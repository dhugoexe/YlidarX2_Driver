
Lidar_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a264  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800a448  0800a448  0000b448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a848  0800a848  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a848  0800a848  0000b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a850  0800a850  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a850  0800a850  0000b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a858  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  200001d4  0800aa2c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800aa2c  0000c760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e71b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef2  00000000  00000000  0002a91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f8  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f22  00000000  00000000  000315c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2ae  00000000  00000000  000364ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b5b  00000000  00000000  00055798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001362f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db8  00000000  00000000  00136338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0013e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a42c 	.word	0x0800a42c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a42c 	.word	0x0800a42c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f007 fcb9 	bl	8008878 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0e:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f50:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f76:	f001 fc9f 	bl	80028b8 <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f80:	f000 fd18 	bl	80019b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f90:	f002 fcfc 	bl	800398c <HAL_ADCEx_MultiModeConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f9a:	f000 fd0b 	bl	80019b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_ADC1_Init+0xf0>)
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000faa:	237f      	movs	r3, #127	@ 0x7f
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000fbc:	f001 fec8 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fc6:	f000 fcf5 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	@ 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f0 	.word	0x200001f0
 8000fd8:	21800100 	.word	0x21800100

08000fdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09a      	sub	sp, #104	@ 0x68
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2244      	movs	r2, #68	@ 0x44
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fc3b 	bl	8008878 <memset>
  if(adcHandle->Instance==ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100a:	d15e      	bne.n	80010ca <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800100c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001010:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001012:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001016:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fa9b 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001028:	f000 fcc4 	bl	80019b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800102c:	4b29      	ldr	r3, [pc, #164]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 8001032:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001038:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001050:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800105c:	2304      	movs	r3, #4
 800105e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	4619      	mov	r1, r3
 800106e:	481a      	ldr	r0, [pc, #104]	@ (80010d8 <HAL_ADC_MspInit+0xfc>)
 8001070:	f003 f9c4 	bl	80043fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001076:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_ADC_MspInit+0x104>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 800107c:	2205      	movs	r2, #5
 800107e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 800109c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010ae:	480b      	ldr	r0, [pc, #44]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010b0:	f002 fe20 	bl	8003cf4 <HAL_DMA_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80010ba:	f000 fc7b 	bl	80019b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80010c4:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3768      	adds	r7, #104	@ 0x68
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000800 	.word	0x48000800
 80010dc:	2000025c 	.word	0x2000025c
 80010e0:	40020008 	.word	0x40020008

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_DMA_Init+0x70>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ee:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <MX_DMA_Init+0x70>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_DMA_Init+0x70>)
 80010f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_DMA_Init+0x70>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001106:	4a13      	ldr	r2, [pc, #76]	@ (8001154 <MX_DMA_Init+0x70>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6493      	str	r3, [r2, #72]	@ 0x48
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_DMA_Init+0x70>)
 8001110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	200b      	movs	r0, #11
 8001120:	f002 fdb3 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001124:	200b      	movs	r0, #11
 8001126:	f002 fdca 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200c      	movs	r0, #12
 8001130:	f002 fdab 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001134:	200c      	movs	r0, #12
 8001136:	f002 fdc2 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	205e      	movs	r0, #94	@ 0x5e
 8001140:	f002 fda3 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001144:	205e      	movs	r0, #94	@ 0x5e
 8001146:	f002 fdba 	bl	8003cbe <HAL_NVIC_EnableIRQ>

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <MX_GPIO_Init+0xe8>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a33      	ldr	r2, [pc, #204]	@ (8001240 <MX_GPIO_Init+0xe8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <MX_GPIO_Init+0xe8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001186:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <MX_GPIO_Init+0xe8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a2d      	ldr	r2, [pc, #180]	@ (8001240 <MX_GPIO_Init+0xe8>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <MX_GPIO_Init+0xe8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <MX_GPIO_Init+0xe8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a27      	ldr	r2, [pc, #156]	@ (8001240 <MX_GPIO_Init+0xe8>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <MX_GPIO_Init+0xe8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_GPIO_Init+0xe8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <MX_GPIO_Init+0xe8>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_GPIO_Init+0xe8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d6:	f003 fa93 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4814      	ldr	r0, [pc, #80]	@ (8001244 <MX_GPIO_Init+0xec>)
 80011f2:	f003 f903 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80011f6:	2308      	movs	r3, #8
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001206:	230c      	movs	r3, #12
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f003 f8f2 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001218:	2320      	movs	r3, #32
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f003 f8e3 	bl	80043fc <HAL_GPIO_Init>

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <MX_I2C1_Init+0x74>)
 800124e:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <MX_I2C1_Init+0x78>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <MX_I2C1_Init+0x7c>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001260:	2201      	movs	r2, #1
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001282:	480e      	ldr	r0, [pc, #56]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001284:	f003 fa54 	bl	8004730 <HAL_I2C_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800128e:	f000 fb91 	bl	80019b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <MX_I2C1_Init+0x74>)
 8001296:	f003 fae6 	bl	8004866 <HAL_I2CEx_ConfigAnalogFilter>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012a0:	f000 fb88 	bl	80019b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_I2C1_Init+0x74>)
 80012a8:	f003 fb28 	bl	80048fc <HAL_I2CEx_ConfigDigitalFilter>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f000 fb7f 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002bc 	.word	0x200002bc
 80012c0:	40005400 	.word	0x40005400
 80012c4:	40b285c2 	.word	0x40b285c2

080012c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b09a      	sub	sp, #104	@ 0x68
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2244      	movs	r2, #68	@ 0x44
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 fac5 	bl	8008878 <memset>
  if(i2cHandle->Instance==I2C1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <HAL_I2C_MspInit+0xa8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d136      	bne.n	8001366 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012f8:	2340      	movs	r3, #64	@ 0x40
 80012fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f004 f927 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f000 fb50 	bl	80019b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_I2C_MspInit+0xac>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <HAL_I2C_MspInit+0xac>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <HAL_I2C_MspInit+0xac>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800132c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001330:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001332:	2312      	movs	r3, #18
 8001334:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133e:	2304      	movs	r3, #4
 8001340:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001346:	4619      	mov	r1, r3
 8001348:	480b      	ldr	r0, [pc, #44]	@ (8001378 <HAL_I2C_MspInit+0xb0>)
 800134a:	f003 f857 	bl	80043fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_I2C_MspInit+0xac>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_I2C_MspInit+0xac>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001358:	6593      	str	r3, [r2, #88]	@ 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_I2C_MspInit+0xac>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001366:	bf00      	nop
 8001368:	3768      	adds	r7, #104	@ 0x68
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40005400 	.word	0x40005400
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400

0800137c <lidar_DataProcessing>:
	}

}

lidar_point_t lidar_DataProcessing(uint8_t lidar_data, uint8_t sample)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08b      	sub	sp, #44	@ 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6178      	str	r0, [r7, #20]
 8001384:	460b      	mov	r3, r1
 8001386:	74fb      	strb	r3, [r7, #19]
 8001388:	4613      	mov	r3, r2
 800138a:	74bb      	strb	r3, [r7, #18]
	lidar_point_t point = {0};
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]

	lidar_trame = lidar_extractDataFromTrame(lidar_data);
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	461a      	mov	r2, r3
 800139c:	4c1b      	ldr	r4, [pc, #108]	@ (800140c <lidar_DataProcessing+0x90>)
 800139e:	463b      	mov	r3, r7
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f8fc 	bl	80015a0 <lidar_extractDataFromTrame>
 80013a8:	463b      	mov	r3, r7
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	point.distance = lidar_calculatingDistance(lidar_trame.Si, lidar_trame.LSN);
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <lidar_DataProcessing+0x90>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a15      	ldr	r2, [pc, #84]	@ (800140c <lidar_DataProcessing+0x90>)
 80013b6:	8892      	ldrh	r2, [r2, #4]
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f828 	bl	8001410 <lidar_calculatingDistance>
 80013c0:	eef0 7a40 	vmov.f32	s15, s0
 80013c4:	edc7 7a08 	vstr	s15, [r7, #32]
	point.angle = lidar_calculatingAngle(lidar_trame.FSA, lidar_trame.LSA, lidar_trame.LSN);
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <lidar_DataProcessing+0x90>)
 80013ca:	88db      	ldrh	r3, [r3, #6]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <lidar_DataProcessing+0x90>)
 80013d0:	8912      	ldrh	r2, [r2, #8]
 80013d2:	b2d1      	uxtb	r1, r2
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <lidar_DataProcessing+0x90>)
 80013d6:	8892      	ldrh	r2, [r2, #4]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f859 	bl	8001490 <lidar_calculatingAngle>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	edc7 7a07 	vstr	s15, [r7, #28]
	point.isCorrect = lidar_checksum(lidar_data);
 80013e6:	7cfb      	ldrb	r3, [r7, #19]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f8ae 	bl	800154a <lidar_checksum>
 80013ee:	4603      	mov	r3, r0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24

	return point;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	461c      	mov	r4, r3
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	372c      	adds	r7, #44	@ 0x2c
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	20000310 	.word	0x20000310

08001410 <lidar_calculatingDistance>:

float lidar_calculatingDistance(uint8_t* data, int sample)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	float sum = 0.0f;
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sample; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	e01e      	b.n	8001464 <lidar_calculatingDistance+0x54>
	{
		sum += (data[i * 2] + data[i * 2 + 1]) / 4.0f;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	3301      	adds	r3, #1
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	440b      	add	r3, r1
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800144e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001452:	ed97 7a03 	vldr	s14, [r7, #12]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < sample; i++)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbdc      	blt.n	8001426 <lidar_calculatingDistance+0x16>
	}

	return sum / sample;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001476:	ed97 7a03 	vldr	s14, [r7, #12]
 800147a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800147e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <lidar_calculatingAngle>:

float lidar_calculatingAngle(uint8_t FSA_data, uint8_t LSA_data, int samples)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	460b      	mov	r3, r1
 800149e:	71bb      	strb	r3, [r7, #6]
	float sum = 0.0f;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]

	float angleFSA = (FSA_data >> 1) / 64;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float angleLSA = (LSA_data >> 1) / 64;
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	edc7 7a02 	vstr	s15, [r7, #8]

	for (int i = 0; i < samples; i++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	e022      	b.n	800151e <lidar_calculatingAngle+0x8e>
	{
		sum += ((angleLSA - angleFSA) / (samples -1)) * (i-1) + angleFSA;
 80014d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80014dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < samples; i++)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbd8      	blt.n	80014d8 <lidar_calculatingAngle+0x48>
	}
	return sum/samples;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001530:	ed97 7a05 	vldr	s14, [r7, #20]
 8001534:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001538:	eef0 7a66 	vmov.f32	s15, s13

}
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <lidar_checksum>:

int lidar_checksum(const uint8_t *data)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	uint16_t checksum = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	81fb      	strh	r3, [r7, #14]

	for (size_t i = 0; i < sizeof(data); i++) {
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	e00a      	b.n	8001572 <lidar_checksum+0x28>
		checksum ^= (uint16_t)data[i];
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	4053      	eors	r3, r2
 800156a:	81fb      	strh	r3, [r7, #14]
	for (size_t i = 0; i < sizeof(data); i++) {
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	3301      	adds	r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d9f1      	bls.n	800155c <lidar_checksum+0x12>
	}
	return checksum == data[8] + data[9];
 8001578:	89fa      	ldrh	r2, [r7, #14]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3308      	adds	r3, #8
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3309      	adds	r3, #9
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	440b      	add	r3, r1
 800158a:	429a      	cmp	r2, r3
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3

}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <lidar_extractDataFromTrame>:
	return currentSpeed;
}
 */

lidar_trame_t lidar_extractDataFromTrame(uint8_t* buffer)  
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	lidar_trame_t lidar_trame = {0};
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]

	if (buffer == NULL) {
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d107      	bne.n	80015ce <lidar_extractDataFromTrame+0x2e>
		return lidar_trame;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	461c      	mov	r4, r3
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015cc:	e082      	b.n	80016d4 <lidar_extractDataFromTrame+0x134>
	}

	lidar_trame.PH = (uint16_t)buffer[1] << 8 | buffer[0];
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	813b      	strh	r3, [r7, #8]
	lidar_trame.CT = (uint16_t)buffer[3] << 8 | buffer[2];
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3303      	adds	r3, #3
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3302      	adds	r3, #2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	817b      	strh	r3, [r7, #10]
	lidar_trame.LSN = (uint16_t)buffer[5] << 8 | buffer[4];
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3305      	adds	r3, #5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b21a      	sxth	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21b      	sxth	r3, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	81bb      	strh	r3, [r7, #12]
	lidar_trame.FSA = (uint16_t)buffer[7] << 8 | buffer[6];
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3307      	adds	r3, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3306      	adds	r3, #6
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b21b      	sxth	r3, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	81fb      	strh	r3, [r7, #14]
	lidar_trame.LSA = (uint16_t)buffer[9] << 8 | buffer[8];
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3309      	adds	r3, #9
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3308      	adds	r3, #8
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	b29b      	uxth	r3, r3
 800164c:	823b      	strh	r3, [r7, #16]
	lidar_trame.CS = (uint16_t)buffer[11] << 8 | buffer[10];
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	330b      	adds	r3, #11
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	330a      	adds	r3, #10
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21b      	sxth	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	827b      	strh	r3, [r7, #18]

	if (lidar_trame.LSN > 0) {
 8001668:	89bb      	ldrh	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d02b      	beq.n	80016c6 <lidar_extractDataFromTrame+0x126>
		lidar_trame.Si = (uint16_t*)malloc(lidar_trame.LSN * sizeof(uint16_t));
 800166e:	89bb      	ldrh	r3, [r7, #12]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f006 f9e8 	bl	8007a48 <malloc>
 8001678:	4603      	mov	r3, r0
 800167a:	617b      	str	r3, [r7, #20]

		if (lidar_trame.Si != NULL) {
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d021      	beq.n	80016c6 <lidar_extractDataFromTrame+0x126>
			for (uint16_t i = 0; i < lidar_trame.LSN; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	83fb      	strh	r3, [r7, #30]
 8001686:	e01a      	b.n	80016be <lidar_extractDataFromTrame+0x11e>
				size_t offset = 12 + (i * 2);
 8001688:	8bfb      	ldrh	r3, [r7, #30]
 800168a:	3306      	adds	r3, #6
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
				lidar_trame.Si[i] = (uint16_t)buffer[offset + 1] << 8 | buffer[offset];
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	440b      	add	r3, r1
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b219      	sxth	r1, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	8bfb      	ldrh	r3, [r7, #30]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	b28a      	uxth	r2, r1
 80016b6:	801a      	strh	r2, [r3, #0]
			for (uint16_t i = 0; i < lidar_trame.LSN; i++) {
 80016b8:	8bfb      	ldrh	r3, [r7, #30]
 80016ba:	3301      	adds	r3, #1
 80016bc:	83fb      	strh	r3, [r7, #30]
 80016be:	89bb      	ldrh	r3, [r7, #12]
 80016c0:	8bfa      	ldrh	r2, [r7, #30]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3e0      	bcc.n	8001688 <lidar_extractDataFromTrame+0xe8>
			}
		}
	}

	return lidar_trame;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	461c      	mov	r4, r3
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	3724      	adds	r7, #36	@ 0x24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}

080016dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	b097      	sub	sp, #92	@ 0x5c
 80016e2:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016e4:	f000 fe11 	bl	800230a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016e8:	f000 f8c0 	bl	800186c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016ec:	f7ff fd34 	bl	8001158 <MX_GPIO_Init>
	MX_DMA_Init();
 80016f0:	f7ff fcf8 	bl	80010e4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80016f4:	f000 fc76 	bl	8001fe4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80016f8:	f000 fcc0 	bl	800207c <MX_USART3_UART_Init>
	MX_I2C1_Init();
 80016fc:	f7ff fda4 	bl	8001248 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001700:	f7ff fbf2 	bl	8000ee8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001704:	f000 fb42 	bl	8001d8c <MX_TIM2_Init>
	MX_TIM6_Init();
 8001708:	f000 fb8e 	bl	8001e28 <MX_TIM6_Init>
	MX_TIM16_Init();
 800170c:	f000 fbc4 	bl	8001e98 <MX_TIM16_Init>
	MX_TIM1_Init();
 8001710:	f000 fae8 	bl	8001ce4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	printf("Starting DMA... \r\n");
 8001714:	484c      	ldr	r0, [pc, #304]	@ (8001848 <main+0x16c>)
 8001716:	f006 ffcf 	bl	80086b8 <puts>

	HAL_TIM_Base_Start(&htim16);
 800171a:	484c      	ldr	r0, [pc, #304]	@ (800184c <main+0x170>)
 800171c:	f004 f964 	bl	80059e8 <HAL_TIM_Base_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001720:	217f      	movs	r1, #127	@ 0x7f
 8001722:	484b      	ldr	r0, [pc, #300]	@ (8001850 <main+0x174>)
 8001724:	f002 f8d0 	bl	80038c8 <HAL_ADCEx_Calibration_Start>
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_SIZE))
 8001728:	2210      	movs	r2, #16
 800172a:	494a      	ldr	r1, [pc, #296]	@ (8001854 <main+0x178>)
 800172c:	4848      	ldr	r0, [pc, #288]	@ (8001850 <main+0x174>)
 800172e:	f001 fa47 	bl	8002bc0 <HAL_ADC_Start_DMA>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <main+0x68>
	{
		printf("HAL_ERROR\r\n");
 8001738:	4847      	ldr	r0, [pc, #284]	@ (8001858 <main+0x17c>)
 800173a:	f006 ffbd 	bl	80086b8 <puts>
		Error_Handler();
 800173e:	f000 f939 	bl	80019b4 <Error_Handler>
 8001742:	e002      	b.n	800174a <main+0x6e>
	}else( printf("HAL_OK\r\n"));
 8001744:	4845      	ldr	r0, [pc, #276]	@ (800185c <main+0x180>)
 8001746:	f006 ffb7 	bl	80086b8 <puts>

	uint32_t lastTick = HAL_GetTick();
 800174a:	f000 fe43 	bl	80023d4 <HAL_GetTick>
 800174e:	64f8      	str	r0, [r7, #76]	@ 0x4c
	const uint32_t PRINT_INTERVAL = 1000;
 8001750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001754:	64bb      	str	r3, [r7, #72]	@ 0x48

	lidar_point_t current_point;
	uint8_t lidar_initialized = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	 */



	uint8_t rxBuffer[32];
	lidar_point_t point = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		//lidar_scan_loop();
		status = HAL_UART_Receive(&huart3, rxBuffer, 32, 1000);
 8001766:	f107 0110 	add.w	r1, r7, #16
 800176a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176e:	2220      	movs	r2, #32
 8001770:	483b      	ldr	r0, [pc, #236]	@ (8001860 <main+0x184>)
 8001772:	f004 fef5 	bl	8006560 <HAL_UART_Receive>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <main+0x188>)
 800177c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 800177e:	200a      	movs	r0, #10
 8001780:	f000 fe34 	bl	80023ec <HAL_Delay>
		if(rxBuffer[0] == 0xAA && rxBuffer[1] == 0x55)
 8001784:	7c3b      	ldrb	r3, [r7, #16]
 8001786:	2baa      	cmp	r3, #170	@ 0xaa
 8001788:	d1ed      	bne.n	8001766 <main+0x8a>
 800178a:	7c7b      	ldrb	r3, [r7, #17]
 800178c:	2b55      	cmp	r3, #85	@ 0x55
 800178e:	d1ea      	bne.n	8001766 <main+0x8a>
		{
 8001790:	466b      	mov	r3, sp
 8001792:	461e      	mov	r6, r3
			uint8_t sample = rxBuffer[3];
 8001794:	7cfb      	ldrb	r3, [r7, #19]
 8001796:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			uint8_t sampleData[sample*2];
 800179a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800179e:	0059      	lsls	r1, r3, #1
 80017a0:	1e4b      	subs	r3, r1, #1
 80017a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80017a4:	460a      	mov	r2, r1
 80017a6:	2300      	movs	r3, #0
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	00eb      	lsls	r3, r5, #3
 80017b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ba:	00e2      	lsls	r2, r4, #3
 80017bc:	460a      	mov	r2, r1
 80017be:	2300      	movs	r3, #0
 80017c0:	4690      	mov	r8, r2
 80017c2:	4699      	mov	r9, r3
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d8:	460b      	mov	r3, r1
 80017da:	3307      	adds	r3, #7
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	ebad 0d03 	sub.w	sp, sp, r3
 80017e4:	ab02      	add	r3, sp, #8
 80017e6:	3300      	adds	r3, #0
 80017e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			memcpy(sampleData, &rxBuffer[10], sample*2);
 80017ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	461a      	mov	r2, r3
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	330a      	adds	r3, #10
 80017f8:	4619      	mov	r1, r3
 80017fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80017fc:	f007 f8cb 	bl	8008996 <memcpy>
			point = lidar_DataProcessing(sampleData, sample);
 8001800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001802:	b2d9      	uxtb	r1, r3
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fdb6 	bl	800137c <lidar_DataProcessing>

			printf("Distance: %.2f mm, Angle: %.2f°\r\n",
					point.distance,
 8001810:	68bb      	ldr	r3, [r7, #8]
			printf("Distance: %.2f mm, Angle: %.2f°\r\n",
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fec0 	bl	8000598 <__aeabi_f2d>
 8001818:	4682      	mov	sl, r0
 800181a:	468b      	mov	fp, r1
					point.angle);
 800181c:	687b      	ldr	r3, [r7, #4]
			printf("Distance: %.2f mm, Angle: %.2f°\r\n",
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feba 	bl	8000598 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9cd 2300 	strd	r2, r3, [sp]
 800182c:	4652      	mov	r2, sl
 800182e:	465b      	mov	r3, fp
 8001830:	480d      	ldr	r0, [pc, #52]	@ (8001868 <main+0x18c>)
 8001832:	f006 fed9 	bl	80085e8 <iprintf>
			memset(rxBuffer, 0, sizeof(rxBuffer));
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	2220      	movs	r2, #32
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f007 f81a 	bl	8008878 <memset>
 8001844:	46b5      	mov	sp, r6
		status = HAL_UART_Receive(&huart3, rxBuffer, 32, 1000);
 8001846:	e78e      	b.n	8001766 <main+0x8a>
 8001848:	0800a448 	.word	0x0800a448
 800184c:	2000043c 	.word	0x2000043c
 8001850:	200001f0 	.word	0x200001f0
 8001854:	20000324 	.word	0x20000324
 8001858:	0800a45c 	.word	0x0800a45c
 800185c:	0800a468 	.word	0x0800a468
 8001860:	2000051c 	.word	0x2000051c
 8001864:	20000320 	.word	0x20000320
 8001868:	0800a470 	.word	0x0800a470

0800186c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	@ 0x50
 8001870:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	2238      	movs	r2, #56	@ 0x38
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fffc 	bl	8008878 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800188e:	2000      	movs	r0, #0
 8001890:	f003 f880 	bl	8004994 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2340      	movs	r3, #64	@ 0x40
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018aa:	2304      	movs	r3, #4
 80018ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80018ae:	2355      	movs	r3, #85	@ 0x55
 80018b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018be:	f107 0318 	add.w	r3, r7, #24
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f91a 	bl	8004afc <HAL_RCC_OscConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80018ce:	f000 f871 	bl	80019b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d6:	2303      	movs	r3, #3
 80018d8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2104      	movs	r1, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 fc18 	bl	8005120 <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80018f6:	f000 f85d 	bl	80019b4 <Error_Handler>
	}
}
 80018fa:	bf00      	nop
 80018fc:	3750      	adds	r7, #80	@ 0x50
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <Calculate_Current>:

/* USER CODE BEGIN 4 */

static void Calculate_Current(Current_Measure_t *measure, uint16_t adc_value)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
	measure->adc_raw = adc_value;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	801a      	strh	r2, [r3, #0]

	// Calcul de la tension en mV
	measure->voltage_mv = ((uint32_t)adc_value * ADC_VREF_MV) / ADC_RESOLUTION;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	0b1a      	lsrs	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	605a      	str	r2, [r3, #4]

	// Calcul du courant en mA
	// I = V / (R * G) où G est le gain de l'amplificateur
	// Pour éviter les divisions flottantes, on multiplie d'abord par 1000 pour avoir des mA
	measure->current_ma = (measure->voltage_mv * 1000) /
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4a06      	ldr	r2, [pc, #24]	@ (800194c <Calculate_Current+0x48>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	09da      	lsrs	r2, r3, #7
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
			(SHUNT_RESISTANCE_MOHM * GAIN_AMPLIFIER);
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001960:	d11e      	bne.n	80019a0 <HAL_ADC_ConvCpltCallback+0x50>
	{
		// Calcul de la moyenne
		uint32_t sum = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
		for (uint16_t i = 0; i < ADC_BUF_SIZE; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	817b      	strh	r3, [r7, #10]
 800196a:	e00b      	b.n	8001984 <HAL_ADC_ConvCpltCallback+0x34>
		{
			sum += adc_buffer[i];
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <HAL_ADC_ConvCpltCallback+0x58>)
 8001970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
		for (uint16_t i = 0; i < ADC_BUF_SIZE; i++)
 800197e:	897b      	ldrh	r3, [r7, #10]
 8001980:	3301      	adds	r3, #1
 8001982:	817b      	strh	r3, [r7, #10]
 8001984:	897b      	ldrh	r3, [r7, #10]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	d9f0      	bls.n	800196c <HAL_ADC_ConvCpltCallback+0x1c>
		}
		uint16_t avgADC = sum / ADC_BUF_SIZE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	813b      	strh	r3, [r7, #8]

		// Calcul du courant et mise à jour des mesures
		Calculate_Current(&currentMeasure, avgADC);
 8001990:	893b      	ldrh	r3, [r7, #8]
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_ADC_ConvCpltCallback+0x5c>)
 8001996:	f7ff ffb5 	bl	8001904 <Calculate_Current>
		conversionComplete = 1;
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_ADC_ConvCpltCallback+0x60>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
	}
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000324 	.word	0x20000324
 80019ac:	20000348 	.word	0x20000348
 80019b0:	20000344 	.word	0x20000344

080019b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <Error_Handler+0x8>

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_MspInit+0x44>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <HAL_MspInit+0x44>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <HAL_MspInit+0x44>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <HAL_MspInit+0x44>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <HAL_MspInit+0x44>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_MspInit+0x44>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019f6:	f003 f871 	bl	8004adc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001a10:	1d39      	adds	r1, r7, #4
 8001a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a16:	2201      	movs	r2, #1
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <__io_putchar+0x20>)
 8001a1a:	f004 fd13 	bl	8006444 <HAL_UART_Transmit>

  return ch;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000488 	.word	0x20000488

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 fc95 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <DMA1_Channel1_IRQHandler+0x10>)
 8001a92:	f002 fb12 	bl	80040ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000025c 	.word	0x2000025c

08001aa0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <DMA1_Channel2_IRQHandler+0x10>)
 8001aa6:	f002 fb08 	bl	80040ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200005b0 	.word	0x200005b0

08001ab4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001aba:	f003 fff7 	bl	8005aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000358 	.word	0x20000358

08001ac8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001ace:	f003 ffed 	bl	8005aac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001ad2:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001ad4:	f003 ffea 	bl	8005aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000358 	.word	0x20000358
 8001ae0:	2000043c 	.word	0x2000043c

08001ae4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001aea:	f003 ffdf 	bl	8005aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000358 	.word	0x20000358

08001af8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <TIM1_CC_IRQHandler+0x10>)
 8001afe:	f003 ffd5 	bl	8005aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000358 	.word	0x20000358

08001b0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <USART3_IRQHandler+0x10>)
 8001b12:	f004 fded 	bl	80066f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000051c 	.word	0x2000051c

08001b20 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart3_rx);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <DMAMUX_OVR_IRQHandler+0x10>)
 8001b26:	f002 fc17 	bl	8004358 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200005b0 	.word	0x200005b0

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4e:	f006 fef5 	bl	800893c <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
  return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b76:	bf00      	nop
 8001b78:	e7fd      	b.n	8001b76 <_exit+0x12>

08001b7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e00a      	b.n	8001ba2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8c:	f3af 8000 	nop.w
 8001b90:	4601      	mov	r1, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	60ba      	str	r2, [r7, #8]
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf0      	blt.n	8001b8c <_read+0x12>
  }

  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e009      	b.n	8001bda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff1a 	bl	8001a08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbf1      	blt.n	8001bc6 <_write+0x12>
  }
  return len;
 8001be2:	687b      	ldr	r3, [r7, #4]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_close>:

int _close(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c14:	605a      	str	r2, [r3, #4]
  return 0;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_isatty>:

int _isatty(int file)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f006 fe5a 	bl	800893c <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20008000 	.word	0x20008000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	20000354 	.word	0x20000354
 8001cbc:	20000760 	.word	0x20000760

08001cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d04:	4a20      	ldr	r2, [pc, #128]	@ (8001d88 <MX_TIM1_Init+0xa4>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8001d08:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d16:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d2e:	4815      	ldr	r0, [pc, #84]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d30:	f003 fe02 	bl	8005938 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d3a:	f7ff fe3b 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480e      	ldr	r0, [pc, #56]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d4c:	f003 fffe 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001d56:	f7ff fe2d 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_TIM1_Init+0xa0>)
 8001d6c:	f004 fa52 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d76:	f7ff fe1d 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000358 	.word	0x20000358
 8001d88:	40012c00 	.word	0x40012c00

08001d8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001db4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001db8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd4:	4813      	ldr	r0, [pc, #76]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001dd6:	f003 fdaf 	bl	8005938 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001de0:	f7ff fde8 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001df2:	f003 ffab 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001dfc:	f7ff fdda 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e00:	2320      	movs	r3, #32
 8001e02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_TIM2_Init+0x98>)
 8001e0e:	f004 fa01 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001e18:	f7ff fdcc 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200003a4 	.word	0x200003a4

08001e28 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e38:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e3a:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <MX_TIM6_Init+0x6c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e40:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001e44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e4e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e5a:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e5c:	f003 fd6c 	bl	8005938 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001e66:	f7ff fda5 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <MX_TIM6_Init+0x68>)
 8001e78:	f004 f9cc 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001e82:	f7ff fd97 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200003f0 	.word	0x200003f0
 8001e94:	40001000 	.word	0x40001000

08001e98 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001e9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ee0 <MX_TIM16_Init+0x48>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	@ (8001edc <MX_TIM16_Init+0x44>)
 8001eca:	f003 fd35 	bl	8005938 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f7ff fd6e 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2000043c 	.word	0x2000043c
 8001ee0:	40014400 	.word	0x40014400

08001ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a38      	ldr	r2, [pc, #224]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xf0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d12c      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efa:	4a37      	ldr	r2, [pc, #220]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001efc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f02:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2018      	movs	r0, #24
 8001f14:	f001 feb9 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f18:	2018      	movs	r0, #24
 8001f1a:	f001 fed0 	bl	8003cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2019      	movs	r0, #25
 8001f24:	f001 feb1 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f001 fec8 	bl	8003cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	201a      	movs	r0, #26
 8001f34:	f001 fea9 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f38:	201a      	movs	r0, #26
 8001f3a:	f001 fec0 	bl	8003cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	201b      	movs	r0, #27
 8001f44:	f001 fea1 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f48:	201b      	movs	r0, #27
 8001f4a:	f001 feb8 	bl	8003cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001f4e:	e03c      	b.n	8001fca <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f58:	d10c      	bne.n	8001f74 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
}
 8001f72:	e02a      	b.n	8001fca <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_TIM_Base_MspInit+0xf8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10c      	bne.n	8001f98 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	e018      	b.n	8001fca <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_TIM_Base_MspInit+0xfc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d113      	bne.n	8001fca <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xf4>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2019      	movs	r0, #25
 8001fc0:	f001 fe63 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fc4:	2019      	movs	r0, #25
 8001fc6:	f001 fe7a 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40001000 	.word	0x40001000
 8001fe0:	40014400 	.word	0x40014400

08001fe4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8001fea:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <MX_USART2_UART_Init+0x94>)
 8001fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8001ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002002:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800202c:	4811      	ldr	r0, [pc, #68]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 800202e:	f004 f9b9 	bl	80063a4 <HAL_UART_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002038:	f7ff fcbc 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203c:	2100      	movs	r1, #0
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002040:	f005 fc37 	bl	80078b2 <HAL_UARTEx_SetTxFifoThreshold>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800204a:	f7ff fcb3 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204e:	2100      	movs	r1, #0
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002052:	f005 fc6c 	bl	800792e <HAL_UARTEx_SetRxFifoThreshold>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800205c:	f7ff fcaa 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <MX_USART2_UART_Init+0x90>)
 8002062:	f005 fbed 	bl	8007840 <HAL_UARTEx_DisableFifoMode>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800206c:	f7ff fca2 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000488 	.word	0x20000488
 8002078:	40004400 	.word	0x40004400

0800207c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002080:	4b22      	ldr	r3, [pc, #136]	@ (800210c <MX_USART3_UART_Init+0x90>)
 8002082:	4a23      	ldr	r2, [pc, #140]	@ (8002110 <MX_USART3_UART_Init+0x94>)
 8002084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <MX_USART3_UART_Init+0x90>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <MX_USART3_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <MX_USART3_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <MX_USART3_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020a2:	2204      	movs	r2, #4
 80020a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c4:	4811      	ldr	r0, [pc, #68]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020c6:	f004 f96d 	bl	80063a4 <HAL_UART_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80020d0:	f7ff fc70 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d4:	2100      	movs	r1, #0
 80020d6:	480d      	ldr	r0, [pc, #52]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020d8:	f005 fbeb 	bl	80078b2 <HAL_UARTEx_SetTxFifoThreshold>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80020e2:	f7ff fc67 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e6:	2100      	movs	r1, #0
 80020e8:	4808      	ldr	r0, [pc, #32]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020ea:	f005 fc20 	bl	800792e <HAL_UARTEx_SetRxFifoThreshold>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80020f4:	f7ff fc5e 	bl	80019b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	@ (800210c <MX_USART3_UART_Init+0x90>)
 80020fa:	f005 fba1 	bl	8007840 <HAL_UARTEx_DisableFifoMode>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002104:	f7ff fc56 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000051c 	.word	0x2000051c
 8002110:	40004800 	.word	0x40004800

08002114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b09c      	sub	sp, #112	@ 0x70
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	2244      	movs	r2, #68	@ 0x44
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f006 fb9f 	bl	8008878 <memset>
  if(uartHandle->Instance==USART2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a58      	ldr	r2, [pc, #352]	@ (80022a0 <HAL_UART_MspInit+0x18c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d138      	bne.n	80021b6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002144:	2302      	movs	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fa01 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800215c:	f7ff fc2a 	bl	80019b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002160:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	4a4f      	ldr	r2, [pc, #316]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216a:	6593      	str	r3, [r2, #88]	@ 0x58
 800216c:	4b4d      	ldr	r3, [pc, #308]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217c:	4a49      	ldr	r2, [pc, #292]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002184:	4b47      	ldr	r3, [pc, #284]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002190:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002194:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a2:	2307      	movs	r3, #7
 80021a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b0:	f002 f924 	bl	80043fc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021b4:	e070      	b.n	8002298 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3b      	ldr	r2, [pc, #236]	@ (80022a8 <HAL_UART_MspInit+0x194>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d16b      	bne.n	8002298 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021c0:	2304      	movs	r3, #4
 80021c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 f9c3 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80021d8:	f7ff fbec 	bl	80019b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021dc:	4b31      	ldr	r3, [pc, #196]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	4a30      	ldr	r2, [pc, #192]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 80021e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e8:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_UART_MspInit+0x190>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800220c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002210:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800221e:	2307      	movs	r3, #7
 8002220:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002226:	4619      	mov	r1, r3
 8002228:	4820      	ldr	r0, [pc, #128]	@ (80022ac <HAL_UART_MspInit+0x198>)
 800222a:	f002 f8e7 	bl	80043fc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800222e:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002230:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <HAL_UART_MspInit+0x1a0>)
 8002232:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002234:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002236:	221c      	movs	r2, #28
 8002238:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 800224e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002252:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800225a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 800225e:	2220      	movs	r2, #32
 8002260:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002268:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800226a:	4811      	ldr	r0, [pc, #68]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 800226c:	f001 fd42 	bl	8003cf4 <HAL_DMA_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8002276:	f7ff fb9d 	bl	80019b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 800227e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002282:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_UART_MspInit+0x19c>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	2027      	movs	r0, #39	@ 0x27
 800228e:	f001 fcfc 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002292:	2027      	movs	r0, #39	@ 0x27
 8002294:	f001 fd13 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 8002298:	bf00      	nop
 800229a:	3770      	adds	r7, #112	@ 0x70
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40004400 	.word	0x40004400
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40004800 	.word	0x40004800
 80022ac:	48000400 	.word	0x48000400
 80022b0:	200005b0 	.word	0x200005b0
 80022b4:	4002001c 	.word	0x4002001c

080022b8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80022b8:	480d      	ldr	r0, [pc, #52]	@ (80022f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80022bc:	f7ff fd00 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c2:	490d      	ldr	r1, [pc, #52]	@ (80022f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <LoopForever+0xe>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002304 <LoopForever+0x16>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80022e6:	f006 fb2f 	bl	8008948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ea:	f7ff f9f7 	bl	80016dc <main>

080022ee <LoopForever>:

LoopForever:
    b LoopForever
 80022ee:	e7fe      	b.n	80022ee <LoopForever>
  ldr   r0, =_estack
 80022f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022fc:	0800a858 	.word	0x0800a858
  ldr r2, =_sbss
 8002300:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002304:	20000760 	.word	0x20000760

08002308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_2_IRQHandler>

0800230a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f001 fcad 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f80e 	bl	800233c <HAL_InitTick>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	e001      	b.n	8002330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800232c:	f7ff fb48 	bl	80019c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002330:	79fb      	ldrb	r3, [r7, #7]

}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002348:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <HAL_InitTick+0x68>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_InitTick+0x6c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_InitTick+0x68>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800235c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f001 fcb8 	bl	8003cda <HAL_SYSTICK_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d809      	bhi.n	800238a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002376:	2200      	movs	r2, #0
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800237e:	f001 fc84 	bl	8003c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_InitTick+0x70>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	e007      	b.n	800239a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e004      	b.n	800239a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e001      	b.n	800239a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <HAL_IncTick+0x1c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_IncTick+0x20>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	4a03      	ldr	r2, [pc, #12]	@ (80023cc <HAL_IncTick+0x1c>)
 80023c0:	6013      	str	r3, [r2, #0]
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	20000610 	.word	0x20000610
 80023d0:	20000008 	.word	0x20000008

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	@ (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000610 	.word	0x20000610

080023ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff ffee 	bl	80023d4 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002404:	d004      	beq.n	8002410 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_Delay+0x40>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002410:	bf00      	nop
 8002412:	f7ff ffdf 	bl	80023d4 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	429a      	cmp	r2, r3
 8002420:	d8f7      	bhi.n	8002412 <HAL_Delay+0x26>
  {
  }
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000008 	.word	0x20000008

08002430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3360      	adds	r3, #96	@ 0x60
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <LL_ADC_SetOffset+0x44>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	03fff000 	.word	0x03fff000

080024e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3360      	adds	r3, #96	@ 0x60
 80024ee:	461a      	mov	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3360      	adds	r3, #96	@ 0x60
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002542:	b480      	push	{r7}
 8002544:	b087      	sub	sp, #28
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3360      	adds	r3, #96	@ 0x60
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	431a      	orrs	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3360      	adds	r3, #96	@ 0x60
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	615a      	str	r2, [r3, #20]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3330      	adds	r3, #48	@ 0x30
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	4413      	add	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	211f      	movs	r1, #31
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	f003 011f 	and.w	r1, r3, #31
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	431a      	orrs	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002652:	b480      	push	{r7}
 8002654:	b087      	sub	sp, #28
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3314      	adds	r3, #20
 8002662:	461a      	mov	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	0e5b      	lsrs	r3, r3, #25
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	0d1b      	lsrs	r3, r3, #20
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2107      	movs	r1, #7
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	401a      	ands	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	0d1b      	lsrs	r3, r3, #20
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	431a      	orrs	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	43db      	mvns	r3, r3
 80026c2:	401a      	ands	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0318 	and.w	r3, r3, #24
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80026cc:	40d9      	lsrs	r1, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	400b      	ands	r3, r1
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	431a      	orrs	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	0007ffff 	.word	0x0007ffff

080026f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 031f 	and.w	r3, r3, #31
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800271c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6093      	str	r3, [r2, #8]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002744:	d101      	bne.n	800274a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002768:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800276c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002794:	d101      	bne.n	800279a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e4:	f043 0202 	orr.w	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <LL_ADC_IsEnabled+0x18>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <LL_ADC_IsEnabled+0x1a>
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d101      	bne.n	8002836 <LL_ADC_IsDisableOngoing+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_ADC_IsDisableOngoing+0x1a>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d101      	bne.n	8002884 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d101      	bne.n	80028aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e167      	b.n	8002ba2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe fb7b 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff19 	bl	8002730 <LL_ADC_IsDeepPowerDownEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff feff 	bl	800270c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff34 	bl	8002780 <LL_ADC_IsInternalRegulatorEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d115      	bne.n	800294a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff18 	bl	8002758 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002928:	4ba0      	ldr	r3, [pc, #640]	@ (8002bac <HAL_ADC_Init+0x2f4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	099b      	lsrs	r3, r3, #6
 800292e:	4aa0      	ldr	r2, [pc, #640]	@ (8002bb0 <HAL_ADC_Init+0x2f8>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800293c:	e002      	b.n	8002944 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f9      	bne.n	800293e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff16 	bl	8002780 <LL_ADC_IsInternalRegulatorEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10d      	bne.n	8002976 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	f043 0210 	orr.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff76 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002980:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 8100 	bne.w	8002b90 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 80fc 	bne.w	8002b90 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff23 	bl	80027f8 <LL_ADC_IsEnabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d111      	bne.n	80029dc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029bc:	f7ff ff1c 	bl	80027f8 <LL_ADC_IsEnabled>
 80029c0:	4604      	mov	r4, r0
 80029c2:	487c      	ldr	r0, [pc, #496]	@ (8002bb4 <HAL_ADC_Init+0x2fc>)
 80029c4:	f7ff ff18 	bl	80027f8 <LL_ADC_IsEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4619      	mov	r1, r3
 80029d6:	4878      	ldr	r0, [pc, #480]	@ (8002bb8 <HAL_ADC_Init+0x300>)
 80029d8:	f7ff fd2a 	bl	8002430 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7f5b      	ldrb	r3, [r3, #29]
 80029e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	045b      	lsls	r3, r3, #17
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	4b60      	ldr	r3, [pc, #384]	@ (8002bbc <HAL_ADC_Init+0x304>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	69b9      	ldr	r1, [r7, #24]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff15 	bl	8002892 <LL_ADC_INJ_IsConversionOngoing>
 8002a68:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d16d      	bne.n	8002b4c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d16a      	bne.n	8002b4c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a7a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a82:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a92:	f023 0302 	bic.w	r3, r3, #2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d017      	beq.n	8002ad8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ab6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ac0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6911      	ldr	r1, [r2, #16]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ad6:	e013      	b.n	8002b00 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ae6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002afc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d118      	bne.n	8002b3c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b20:	4311      	orrs	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	e007      	b.n	8002b4c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10c      	bne.n	8002b6e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f023 010f 	bic.w	r1, r3, #15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	1e5a      	subs	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b6c:	e007      	b.n	8002b7e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 020f 	bic.w	r2, r2, #15
 8002b7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b8e:	e007      	b.n	8002ba0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	f043 0210 	orr.w	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd90      	pop	{r4, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	053e2d63 	.word	0x053e2d63
 8002bb4:	50000100 	.word	0x50000100
 8002bb8:	50000300 	.word	0x50000300
 8002bbc:	fff04007 	.word	0xfff04007

08002bc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bcc:	4851      	ldr	r0, [pc, #324]	@ (8002d14 <HAL_ADC_Start_DMA+0x154>)
 8002bce:	f7ff fd8f 	bl	80026f0 <LL_ADC_GetMultimode>
 8002bd2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe47 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 808f 	bne.w	8002d04 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x34>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e08a      	b.n	8002d0a <HAL_ADC_Start_DMA+0x14a>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d173      	bne.n	8002cf6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fc8e 	bl	8003530 <ADC_Enable>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d166      	bne.n	8002cec <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a38      	ldr	r2, [pc, #224]	@ (8002d18 <HAL_ADC_Start_DMA+0x158>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d002      	beq.n	8002c42 <HAL_ADC_Start_DMA+0x82>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e001      	b.n	8002c46 <HAL_ADC_Start_DMA+0x86>
 8002c42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d002      	beq.n	8002c54 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c70:	f023 0206 	bic.w	r2, r3, #6
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c84:	4a25      	ldr	r2, [pc, #148]	@ (8002d1c <HAL_ADC_Start_DMA+0x15c>)
 8002c86:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	4a24      	ldr	r2, [pc, #144]	@ (8002d20 <HAL_ADC_Start_DMA+0x160>)
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	4a23      	ldr	r2, [pc, #140]	@ (8002d24 <HAL_ADC_Start_DMA+0x164>)
 8002c96:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	221c      	movs	r2, #28
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0210 	orr.w	r2, r2, #16
 8002cb6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3340      	adds	r3, #64	@ 0x40
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f001 f8b4 	bl	8003e44 <HAL_DMA_Start_IT>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fdad 	bl	8002844 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cea:	e00d      	b.n	8002d08 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002cf4:	e008      	b.n	8002d08 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002d02:	e001      	b.n	8002d08 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
 8002d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	50000300 	.word	0x50000300
 8002d18:	50000100 	.word	0x50000100
 8002d1c:	080036fb 	.word	0x080036fb
 8002d20:	080037d3 	.word	0x080037d3
 8002d24:	080037ef 	.word	0x080037ef

08002d28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0b6      	sub	sp, #216	@ 0xd8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x22>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e3c8      	b.n	8003504 <HAL_ADC_ConfigChannel+0x7b4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fd74 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 83ad 	bne.w	80034e6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f7ff fc2e 	bl	80025fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd62 	bl	800286c <LL_ADC_REG_IsConversionOngoing>
 8002da8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fd6e 	bl	8002892 <LL_ADC_INJ_IsConversionOngoing>
 8002db6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 81d9 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 81d4 	bne.w	8003176 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dd6:	d10f      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7ff fc35 	bl	8002652 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fbdc 	bl	80025ae <LL_ADC_SetSamplingTimeCommonConfig>
 8002df6:	e00e      	b.n	8002e16 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f7ff fc24 	bl	8002652 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fbcc 	bl	80025ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d022      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6919      	ldr	r1, [r3, #16]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e48:	f7ff fb26 	bl	8002498 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6919      	ldr	r1, [r3, #16]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f7ff fb72 	bl	8002542 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x124>
 8002e6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e72:	e000      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x126>
 8002e74:	2300      	movs	r3, #0
 8002e76:	461a      	mov	r2, r3
 8002e78:	f7ff fb7e 	bl	8002578 <LL_ADC_SetOffsetSaturation>
 8002e7c:	e17b      	b.n	8003176 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fb2b 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x15a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fb20 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	e01e      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x198>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fb15 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e004      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1b0>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	e018      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1e2>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fae4 	bl	800250c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fac8 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x220>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fabd 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	e01e      	b.n	8002fae <HAL_ADC_ConfigChannel+0x25e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fab2 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e004      	b.n	8002fac <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x276>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	e018      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x2a8>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e004      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fa81 	bl	800250c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2102      	movs	r1, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fa65 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8003016:	4603      	mov	r3, r0
 8003018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x2e6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fa5a 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 800302c:	4603      	mov	r3, r0
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	e01e      	b.n	8003074 <HAL_ADC_ConfigChannel+0x324>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fa4f 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800305c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e004      	b.n	8003072 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003068:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_ADC_ConfigChannel+0x33c>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	e016      	b.n	80030ba <HAL_ADC_ConfigChannel+0x36a>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800309e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e004      	b.n	80030ba <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80030b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d106      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	2102      	movs	r1, #2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fa20 	bl	800250c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fa04 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 80030d8:	4603      	mov	r3, r0
 80030da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x3a8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2103      	movs	r1, #3
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f9f9 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 80030ee:	4603      	mov	r3, r0
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	e017      	b.n	8003128 <HAL_ADC_ConfigChannel+0x3d8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2103      	movs	r1, #3
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f9ee 	bl	80024e0 <LL_ADC_GetOffsetChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003110:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003112:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800311e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x3f0>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	e011      	b.n	8003164 <HAL_ADC_ConfigChannel+0x414>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800314e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003150:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800315c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003164:	429a      	cmp	r2, r3
 8003166:	d106      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	2103      	movs	r1, #3
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f9cb 	bl	800250c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fb3c 	bl	80027f8 <LL_ADC_IsEnabled>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 8140 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	461a      	mov	r2, r3
 8003196:	f7ff fa87 	bl	80026a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4a8f      	ldr	r2, [pc, #572]	@ (80033dc <HAL_ADC_ConfigChannel+0x68c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f040 8131 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x47e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	3301      	adds	r3, #1
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	2b09      	cmp	r3, #9
 80031c4:	bf94      	ite	ls
 80031c6:	2301      	movls	r3, #1
 80031c8:	2300      	movhi	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e019      	b.n	8003202 <HAL_ADC_ConfigChannel+0x4b2>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80031dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80031e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80031e6:	2320      	movs	r3, #32
 80031e8:	e003      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80031ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	bf94      	ite	ls
 80031fc:	2301      	movls	r3, #1
 80031fe:	2300      	movhi	r3, #0
 8003200:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003202:	2b00      	cmp	r3, #0
 8003204:	d079      	beq.n	80032fa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x4d2>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	3301      	adds	r3, #1
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003220:	e015      	b.n	800324e <HAL_ADC_ConfigChannel+0x4fe>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003232:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800323e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3301      	adds	r3, #1
 8003248:	069b      	lsls	r3, r3, #26
 800324a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_ConfigChannel+0x51e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	e017      	b.n	800329e <HAL_ADC_ConfigChannel+0x54e>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800327c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800327e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e003      	b.n	8003292 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800328a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	ea42 0103 	orr.w	r1, r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x574>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	051b      	lsls	r3, r3, #20
 80032c2:	e018      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x5a6>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80032d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80032e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 021f 	and.w	r2, r3, #31
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f6:	430b      	orrs	r3, r1
 80032f8:	e081      	b.n	80033fe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x5c6>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	3301      	adds	r3, #1
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003314:	e015      	b.n	8003342 <HAL_ADC_ConfigChannel+0x5f2>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3301      	adds	r3, #1
 800333c:	069b      	lsls	r3, r3, #26
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x612>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	e017      	b.n	8003392 <HAL_ADC_ConfigChannel+0x642>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	61fb      	str	r3, [r7, #28]
  return result;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	ea42 0103 	orr.w	r1, r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <HAL_ADC_ConfigChannel+0x66e>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	3301      	adds	r3, #1
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	3b1e      	subs	r3, #30
 80033b6:	051b      	lsls	r3, r3, #20
 80033b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033bc:	e01e      	b.n	80033fc <HAL_ADC_ConfigChannel+0x6ac>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	613b      	str	r3, [r7, #16]
  return result;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e006      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x698>
 80033da:	bf00      	nop
 80033dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	f003 021f 	and.w	r2, r3, #31
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	3b1e      	subs	r3, #30
 80033f6:	051b      	lsls	r3, r3, #20
 80033f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003402:	4619      	mov	r1, r3
 8003404:	f7ff f925 	bl	8002652 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_ADC_ConfigChannel+0x7bc>)
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d071      	beq.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003414:	483e      	ldr	r0, [pc, #248]	@ (8003510 <HAL_ADC_ConfigChannel+0x7c0>)
 8003416:	f7ff f831 	bl	800247c <LL_ADC_GetCommonPathInternalCh>
 800341a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3c      	ldr	r2, [pc, #240]	@ (8003514 <HAL_ADC_ConfigChannel+0x7c4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_ADC_ConfigChannel+0x6e2>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3a      	ldr	r2, [pc, #232]	@ (8003518 <HAL_ADC_ConfigChannel+0x7c8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d127      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d121      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003446:	d157      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800344c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003450:	4619      	mov	r1, r3
 8003452:	482f      	ldr	r0, [pc, #188]	@ (8003510 <HAL_ADC_ConfigChannel+0x7c0>)
 8003454:	f7fe ffff 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003458:	4b30      	ldr	r3, [pc, #192]	@ (800351c <HAL_ADC_ConfigChannel+0x7cc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <HAL_ADC_ConfigChannel+0x7d0>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003472:	e002      	b.n	800347a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f9      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003480:	e03a      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a27      	ldr	r2, [pc, #156]	@ (8003524 <HAL_ADC_ConfigChannel+0x7d4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d113      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800348c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_ADC_ConfigChannel+0x7d8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02a      	beq.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	4619      	mov	r1, r3
 80034ac:	4818      	ldr	r0, [pc, #96]	@ (8003510 <HAL_ADC_ConfigChannel+0x7c0>)
 80034ae:	f7fe ffd2 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034b2:	e021      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <HAL_ADC_ConfigChannel+0x7dc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d11c      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <HAL_ADC_ConfigChannel+0x7d8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d011      	beq.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034dc:	4619      	mov	r1, r3
 80034de:	480c      	ldr	r0, [pc, #48]	@ (8003510 <HAL_ADC_ConfigChannel+0x7c0>)
 80034e0:	f7fe ffb9 	bl	8002456 <LL_ADC_SetCommonPathInternalCh>
 80034e4:	e008      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003500:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003504:	4618      	mov	r0, r3
 8003506:	37d8      	adds	r7, #216	@ 0xd8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	80080000 	.word	0x80080000
 8003510:	50000300 	.word	0x50000300
 8003514:	c3210000 	.word	0xc3210000
 8003518:	90c00010 	.word	0x90c00010
 800351c:	20000000 	.word	0x20000000
 8003520:	053e2d63 	.word	0x053e2d63
 8003524:	c7520000 	.word	0xc7520000
 8003528:	50000100 	.word	0x50000100
 800352c:	cb840000 	.word	0xcb840000

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f959 	bl	80027f8 <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d169      	bne.n	8003620 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	4b36      	ldr	r3, [pc, #216]	@ (800362c <ADC_Enable+0xfc>)
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e055      	b.n	8003622 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f914 	bl	80027a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003580:	482b      	ldr	r0, [pc, #172]	@ (8003630 <ADC_Enable+0x100>)
 8003582:	f7fe ff7b 	bl	800247c <LL_ADC_GetCommonPathInternalCh>
 8003586:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <ADC_Enable+0x104>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <ADC_Enable+0x108>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035aa:	e002      	b.n	80035b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f9      	bne.n	80035ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b8:	f7fe ff0c 	bl	80023d4 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035be:	e028      	b.n	8003612 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f917 	bl	80027f8 <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff f8e7 	bl	80027a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035da:	f7fe fefb 	bl	80023d4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d914      	bls.n	8003612 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00d      	beq.n	8003612 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fa:	f043 0210 	orr.w	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e007      	b.n	8003622 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d1cf      	bne.n	80035c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	8000003f 	.word	0x8000003f
 8003630:	50000300 	.word	0x50000300
 8003634:	20000000 	.word	0x20000000
 8003638:	053e2d63 	.word	0x053e2d63

0800363c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f8e8 	bl	800281e <LL_ADC_IsDisableOngoing>
 800364e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff f8cf 	bl	80027f8 <LL_ADC_IsEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d047      	beq.n	80036f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d144      	bne.n	80036f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030d 	and.w	r3, r3, #13
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10c      	bne.n	800368e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff f8a9 	bl	80027d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2203      	movs	r2, #3
 8003684:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003686:	f7fe fea5 	bl	80023d4 <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800368c:	e029      	b.n	80036e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e023      	b.n	80036f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036aa:	f7fe fe93 	bl	80023d4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d914      	bls.n	80036e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	f043 0210 	orr.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e007      	b.n	80036f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1dc      	bne.n	80036aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003710:	2b00      	cmp	r3, #0
 8003712:	d14b      	bne.n	80037ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d021      	beq.n	8003772 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe ff4e 	bl	80025d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d032      	beq.n	80037a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d12b      	bne.n	80037a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11f      	bne.n	80037a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003770:	e018      	b.n	80037a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7fe f8d3 	bl	8001950 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037aa:	e00e      	b.n	80037ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff fabf 	bl	8002d3c <HAL_ADC_ErrorCallback>
}
 80037be:	e004      	b.n	80037ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff faa1 	bl	8002d28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff fa91 	bl	8002d3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <LL_ADC_IsEnabled>:
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <LL_ADC_IsEnabled+0x18>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_ADC_IsEnabled+0x1a>
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_StartCalibration>:
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800385a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003864:	4313      	orrs	r3, r2
 8003866:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_ADC_IsCalibrationOnGoing>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800388a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800388e:	d101      	bne.n	8003894 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d101      	bne.n	80038ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ADCEx_Calibration_Start+0x1c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e04d      	b.n	8003980 <HAL_ADCEx_Calibration_Start+0xb8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fea5 	bl	800363c <ADC_Disable>
 80038f2:	4603      	mov	r3, r0
 80038f4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d136      	bne.n	800396a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003904:	f023 0302 	bic.w	r3, r3, #2
 8003908:	f043 0202 	orr.w	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff96 	bl	8003848 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800391c:	e014      	b.n	8003948 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4a18      	ldr	r2, [pc, #96]	@ (8003988 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d90d      	bls.n	8003948 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f023 0312 	bic.w	r3, r3, #18
 8003934:	f043 0210 	orr.w	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e01b      	b.n	8003980 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff94 	bl	800387a <LL_ADC_IsCalibrationOnGoing>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e2      	bne.n	800391e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f023 0303 	bic.w	r3, r3, #3
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003968:	e005      	b.n	8003976 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	0004de01 	.word	0x0004de01

0800398c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b0a1      	sub	sp, #132	@ 0x84
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e08b      	b.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039b2:	2300      	movs	r3, #0
 80039b4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039b6:	2300      	movs	r3, #0
 80039b8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c2:	d102      	bne.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039c4:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	e001      	b.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e06a      	b.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff57 	bl	80038a2 <LL_ADC_REG_IsConversionOngoing>
 80039f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff51 	bl	80038a2 <LL_ADC_REG_IsConversionOngoing>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d14c      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d149      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003a0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d028      	beq.n	8003a6a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a2a:	035b      	lsls	r3, r3, #13
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a38:	f7ff fef3 	bl	8003822 <LL_ADC_IsEnabled>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4823      	ldr	r0, [pc, #140]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a40:	f7ff feef 	bl	8003822 <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4323      	orrs	r3, r4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d133      	bne.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a54:	f023 030f 	bic.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	431a      	orrs	r2, r3
 8003a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a66:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a68:	e024      	b.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a76:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a7a:	f7ff fed2 	bl	8003822 <LL_ADC_IsEnabled>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4812      	ldr	r0, [pc, #72]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a82:	f7ff fece 	bl	8003822 <LL_ADC_IsEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4323      	orrs	r3, r4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d112      	bne.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a96:	f023 030f 	bic.w	r3, r3, #15
 8003a9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a9c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a9e:	e009      	b.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003ab2:	e000      	b.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003abe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3784      	adds	r7, #132	@ 0x84
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	50000100 	.word	0x50000100
 8003ad0:	50000300 	.word	0x50000300

08003ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af0:	4013      	ands	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b06:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <__NVIC_GetPriorityGrouping+0x18>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0307 	and.w	r3, r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	@ (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	db0a      	blt.n	8003b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	490c      	ldr	r1, [pc, #48]	@ (8003bc0 <__NVIC_SetPriority+0x4c>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	440b      	add	r3, r1
 8003b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b9c:	e00a      	b.n	8003bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4908      	ldr	r1, [pc, #32]	@ (8003bc4 <__NVIC_SetPriority+0x50>)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	3b04      	subs	r3, #4
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	761a      	strb	r2, [r3, #24]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f1c3 0307 	rsb	r3, r3, #7
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	bf28      	it	cs
 8003be6:	2304      	movcs	r3, #4
 8003be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d902      	bls.n	8003bf8 <NVIC_EncodePriority+0x30>
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3b03      	subs	r3, #3
 8003bf6:	e000      	b.n	8003bfa <NVIC_EncodePriority+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	4313      	orrs	r3, r2
         );
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3724      	adds	r7, #36	@ 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	@ (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c54:	f7ff ff8e 	bl	8003b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff29 	bl	8003ad4 <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c98:	f7ff ff40 	bl	8003b1c <__NVIC_GetPriorityGrouping>
 8003c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff ff90 	bl	8003bc8 <NVIC_EncodePriority>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff5f 	bl	8003b74 <__NVIC_SetPriority>
}
 8003cb6:	bf00      	nop
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff33 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ffa4 	bl	8003c30 <SysTick_Config>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e08d      	b.n	8003e22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b47      	ldr	r3, [pc, #284]	@ (8003e2c <HAL_DMA_Init+0x138>)
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d80f      	bhi.n	8003d32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <HAL_DMA_Init+0x13c>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4a45      	ldr	r2, [pc, #276]	@ (8003e34 <HAL_DMA_Init+0x140>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	@ (8003e38 <HAL_DMA_Init+0x144>)
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d30:	e00e      	b.n	8003d50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b40      	ldr	r3, [pc, #256]	@ (8003e3c <HAL_DMA_Init+0x148>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e34 <HAL_DMA_Init+0x140>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e40 <HAL_DMA_Init+0x14c>)
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa76 	bl	8004294 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003db0:	d102      	bne.n	8003db8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dcc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_DMA_Init+0x104>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d80c      	bhi.n	8003df8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fa96 	bl	8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e008      	b.n	8003e0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40020407 	.word	0x40020407
 8003e30:	bffdfff8 	.word	0xbffdfff8
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	bffdfbf8 	.word	0xbffdfbf8
 8003e40:	40020400 	.word	0x40020400

08003e44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_DMA_Start_IT+0x20>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e066      	b.n	8003f32 <HAL_DMA_Start_IT+0xee>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d155      	bne.n	8003f24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9bb 	bl	8004218 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 020e 	orr.w	r2, r2, #14
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e00f      	b.n	8003edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 020a 	orr.w	r2, r2, #10
 8003eda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e005      	b.n	8003f30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d005      	beq.n	8003f5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e037      	b.n	8003fce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 020e 	bic.w	r2, r2, #14
 8003f6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003faa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fc2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fcc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d00d      	beq.n	8004020 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2204      	movs	r2, #4
 8004008:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	e047      	b.n	80040b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 020e 	bic.w	r2, r2, #14
 800402e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800404e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	2101      	movs	r1, #1
 800405e:	fa01 f202 	lsl.w	r2, r1, r2
 8004062:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800406c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004084:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800408e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
    }
  }
  return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2204      	movs	r2, #4
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d026      	beq.n	8004134 <HAL_DMA_IRQHandler+0x7a>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d021      	beq.n	8004134 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d107      	bne.n	800410e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0204 	bic.w	r2, r2, #4
 800410c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f003 021f 	and.w	r2, r3, #31
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	2104      	movs	r1, #4
 800411c:	fa01 f202 	lsl.w	r2, r1, r2
 8004120:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	2b00      	cmp	r3, #0
 8004128:	d071      	beq.n	800420e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004132:	e06c      	b.n	800420e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2202      	movs	r2, #2
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02e      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d029      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020a 	bic.w	r2, r2, #10
 800416e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417c:	f003 021f 	and.w	r2, r3, #31
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	2102      	movs	r1, #2
 8004186:	fa01 f202 	lsl.w	r2, r1, r2
 800418a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d038      	beq.n	800420e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041a4:	e033      	b.n	800420e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2208      	movs	r2, #8
 80041b0:	409a      	lsls	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02a      	beq.n	8004210 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d025      	beq.n	8004210 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 020e 	bic.w	r2, r2, #14
 80041d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f202 	lsl.w	r2, r1, r2
 80041e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800420e:	bf00      	nop
 8004210:	bf00      	nop
}
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800422e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f003 021f 	and.w	r2, r3, #31
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f202 	lsl.w	r2, r1, r2
 8004254:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b10      	cmp	r3, #16
 8004264:	d108      	bne.n	8004278 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004276:	e007      	b.n	8004288 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d802      	bhi.n	80042ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80042a8:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e001      	b.n	80042b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80042ae:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80042b0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3b08      	subs	r3, #8
 80042be:	4a12      	ldr	r2, [pc, #72]	@ (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	@ (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40020407 	.word	0x40020407
 8004300:	40020800 	.word	0x40020800
 8004304:	40020820 	.word	0x40020820
 8004308:	cccccccd 	.word	0xcccccccd
 800430c:	40020880 	.word	0x40020880

08004310 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	461a      	mov	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a08      	ldr	r2, [pc, #32]	@ (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004332:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3b01      	subs	r3, #1
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	1000823f 	.word	0x1000823f
 8004354:	40020940 	.word	0x40020940

08004358 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800437e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004388:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d022      	beq.n	80043f4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01a      	beq.n	80043f4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
      }
    }
  }
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800440a:	e15a      	b.n	80046c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 814c 	beq.w	80046bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d005      	beq.n	800443c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004438:	2b02      	cmp	r3, #2
 800443a:	d130      	bne.n	800449e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4013      	ands	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004472:	2201      	movs	r2, #1
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4013      	ands	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	f003 0201 	and.w	r2, r3, #1
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d017      	beq.n	80044da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	2203      	movs	r2, #3
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d123      	bne.n	800452e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	08da      	lsrs	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	220f      	movs	r2, #15
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	08da      	lsrs	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3208      	adds	r2, #8
 8004528:	6939      	ldr	r1, [r7, #16]
 800452a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	2203      	movs	r2, #3
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0203 	and.w	r2, r3, #3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80a6 	beq.w	80046bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004570:	4b5b      	ldr	r3, [pc, #364]	@ (80046e0 <HAL_GPIO_Init+0x2e4>)
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	4a5a      	ldr	r2, [pc, #360]	@ (80046e0 <HAL_GPIO_Init+0x2e4>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6613      	str	r3, [r2, #96]	@ 0x60
 800457c:	4b58      	ldr	r3, [pc, #352]	@ (80046e0 <HAL_GPIO_Init+0x2e4>)
 800457e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004588:	4a56      	ldr	r2, [pc, #344]	@ (80046e4 <HAL_GPIO_Init+0x2e8>)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	3302      	adds	r3, #2
 8004590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045b2:	d01f      	beq.n	80045f4 <HAL_GPIO_Init+0x1f8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a4c      	ldr	r2, [pc, #304]	@ (80046e8 <HAL_GPIO_Init+0x2ec>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d019      	beq.n	80045f0 <HAL_GPIO_Init+0x1f4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a4b      	ldr	r2, [pc, #300]	@ (80046ec <HAL_GPIO_Init+0x2f0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_GPIO_Init+0x1f0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a4a      	ldr	r2, [pc, #296]	@ (80046f0 <HAL_GPIO_Init+0x2f4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00d      	beq.n	80045e8 <HAL_GPIO_Init+0x1ec>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a49      	ldr	r2, [pc, #292]	@ (80046f4 <HAL_GPIO_Init+0x2f8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d007      	beq.n	80045e4 <HAL_GPIO_Init+0x1e8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a48      	ldr	r2, [pc, #288]	@ (80046f8 <HAL_GPIO_Init+0x2fc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d101      	bne.n	80045e0 <HAL_GPIO_Init+0x1e4>
 80045dc:	2305      	movs	r3, #5
 80045de:	e00a      	b.n	80045f6 <HAL_GPIO_Init+0x1fa>
 80045e0:	2306      	movs	r3, #6
 80045e2:	e008      	b.n	80045f6 <HAL_GPIO_Init+0x1fa>
 80045e4:	2304      	movs	r3, #4
 80045e6:	e006      	b.n	80045f6 <HAL_GPIO_Init+0x1fa>
 80045e8:	2303      	movs	r3, #3
 80045ea:	e004      	b.n	80045f6 <HAL_GPIO_Init+0x1fa>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e002      	b.n	80045f6 <HAL_GPIO_Init+0x1fa>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <HAL_GPIO_Init+0x1fa>
 80045f4:	2300      	movs	r3, #0
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	f002 0203 	and.w	r2, r2, #3
 80045fc:	0092      	lsls	r2, r2, #2
 80045fe:	4093      	lsls	r3, r2
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004606:	4937      	ldr	r1, [pc, #220]	@ (80046e4 <HAL_GPIO_Init+0x2e8>)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	3302      	adds	r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004614:	4b39      	ldr	r3, [pc, #228]	@ (80046fc <HAL_GPIO_Init+0x300>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	43db      	mvns	r3, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4013      	ands	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004638:	4a30      	ldr	r2, [pc, #192]	@ (80046fc <HAL_GPIO_Init+0x300>)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800463e:	4b2f      	ldr	r3, [pc, #188]	@ (80046fc <HAL_GPIO_Init+0x300>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	43db      	mvns	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004662:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <HAL_GPIO_Init+0x300>)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004668:	4b24      	ldr	r3, [pc, #144]	@ (80046fc <HAL_GPIO_Init+0x300>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	43db      	mvns	r3, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800468c:	4a1b      	ldr	r2, [pc, #108]	@ (80046fc <HAL_GPIO_Init+0x300>)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004692:	4b1a      	ldr	r3, [pc, #104]	@ (80046fc <HAL_GPIO_Init+0x300>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046b6:	4a11      	ldr	r2, [pc, #68]	@ (80046fc <HAL_GPIO_Init+0x300>)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3301      	adds	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f ae9d 	bne.w	800440c <HAL_GPIO_Init+0x10>
  }
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40010000 	.word	0x40010000
 80046e8:	48000400 	.word	0x48000400
 80046ec:	48000800 	.word	0x48000800
 80046f0:	48000c00 	.word	0x48000c00
 80046f4:	48001000 	.word	0x48001000
 80046f8:	48001400 	.word	0x48001400
 80046fc:	40010400 	.word	0x40010400

08004700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	807b      	strh	r3, [r7, #2]
 800470c:	4613      	mov	r3, r2
 800470e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004710:	787b      	ldrb	r3, [r7, #1]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004716:	887a      	ldrh	r2, [r7, #2]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800471c:	e002      	b.n	8004724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e08d      	b.n	800485e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fc fdb6 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	@ 0x24
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	e006      	b.n	80047b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80047b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d108      	bne.n	80047d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ce:	605a      	str	r2, [r3, #4]
 80047d0:	e007      	b.n	80047e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69d9      	ldr	r1, [r3, #28]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b20      	cmp	r3, #32
 800487a:	d138      	bne.n	80048ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004886:	2302      	movs	r3, #2
 8004888:	e032      	b.n	80048f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2224      	movs	r2, #36	@ 0x24
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b20      	cmp	r3, #32
 8004910:	d139      	bne.n	8004986 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800491c:	2302      	movs	r3, #2
 800491e:	e033      	b.n	8004988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	@ 0x24
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800494e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d141      	bne.n	8004a26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049a2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ae:	d131      	bne.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049b0:	4b47      	ldr	r3, [pc, #284]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049b6:	4a46      	ldr	r2, [pc, #280]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049c0:	4b43      	ldr	r3, [pc, #268]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049c8:	4a41      	ldr	r2, [pc, #260]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049d0:	4b40      	ldr	r3, [pc, #256]	@ (8004ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2232      	movs	r2, #50	@ 0x32
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	4a3f      	ldr	r2, [pc, #252]	@ (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	0c9b      	lsrs	r3, r3, #18
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049e6:	e002      	b.n	80049ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ee:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fa:	d102      	bne.n	8004a02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f2      	bne.n	80049e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a02:	4b33      	ldr	r3, [pc, #204]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0e:	d158      	bne.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e057      	b.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a14:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a24:	e04d      	b.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2c:	d141      	bne.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a2e:	4b28      	ldr	r3, [pc, #160]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3a:	d131      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a42:	4a23      	ldr	r2, [pc, #140]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a4c:	4b20      	ldr	r3, [pc, #128]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a54:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2232      	movs	r2, #50	@ 0x32
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	0c9b      	lsrs	r3, r3, #18
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a72:	e002      	b.n	8004a7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d102      	bne.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f2      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9a:	d112      	bne.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e011      	b.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ab0:	e007      	b.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aba:	4a05      	ldr	r2, [pc, #20]	@ (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ac0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40007000 	.word	0x40007000
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	431bde83 	.word	0x431bde83

08004adc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a04      	ldr	r2, [pc, #16]	@ (8004af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aea:	6093      	str	r3, [r2, #8]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40007000 	.word	0x40007000

08004afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e2fe      	b.n	800510c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d075      	beq.n	8004c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	4b97      	ldr	r3, [pc, #604]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b24:	4b94      	ldr	r3, [pc, #592]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3e>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d002      	beq.n	8004b40 <HAL_RCC_OscConfig+0x44>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	4b8d      	ldr	r3, [pc, #564]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05b      	beq.n	8004c04 <HAL_RCC_OscConfig+0x108>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d157      	bne.n	8004c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e2d9      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b60:	d106      	bne.n	8004b70 <HAL_RCC_OscConfig+0x74>
 8004b62:	4b85      	ldr	r3, [pc, #532]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a84      	ldr	r2, [pc, #528]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e01d      	b.n	8004bac <HAL_RCC_OscConfig+0xb0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCC_OscConfig+0x98>
 8004b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4b7c      	ldr	r3, [pc, #496]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7b      	ldr	r2, [pc, #492]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e00b      	b.n	8004bac <HAL_RCC_OscConfig+0xb0>
 8004b94:	4b78      	ldr	r3, [pc, #480]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a77      	ldr	r2, [pc, #476]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	4b75      	ldr	r3, [pc, #468]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a74      	ldr	r2, [pc, #464]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fc0e 	bl	80023d4 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fc0a 	bl	80023d4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e29e      	b.n	800510c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bce:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0xc0>
 8004bda:	e014      	b.n	8004c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fbfa 	bl	80023d4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fd fbf6 	bl	80023d4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	@ 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e28a      	b.n	800510c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bf6:	4b60      	ldr	r3, [pc, #384]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0xe8>
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d075      	beq.n	8004cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c12:	4b59      	ldr	r3, [pc, #356]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c1c:	4b56      	ldr	r3, [pc, #344]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCC_OscConfig+0x136>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d002      	beq.n	8004c38 <HAL_RCC_OscConfig+0x13c>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d11f      	bne.n	8004c78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c38:	4b4f      	ldr	r3, [pc, #316]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_OscConfig+0x154>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e25d      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c50:	4b49      	ldr	r3, [pc, #292]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	4946      	ldr	r1, [pc, #280]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c64:	4b45      	ldr	r3, [pc, #276]	@ (8004d7c <HAL_RCC_OscConfig+0x280>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fb67 	bl	800233c <HAL_InitTick>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d043      	beq.n	8004cfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e249      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d023      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c80:	4b3d      	ldr	r3, [pc, #244]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3c      	ldr	r2, [pc, #240]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fba2 	bl	80023d4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fd fb9e 	bl	80023d4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e232      	b.n	800510c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca6:	4b34      	ldr	r3, [pc, #208]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b31      	ldr	r3, [pc, #196]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	492d      	ldr	r1, [pc, #180]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	604b      	str	r3, [r1, #4]
 8004cc6:	e01a      	b.n	8004cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fb7e 	bl	80023d4 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fd fb7a 	bl	80023d4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e20e      	b.n	800510c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cee:	4b22      	ldr	r3, [pc, #136]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x1e0>
 8004cfa:	e000      	b.n	8004cfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d041      	beq.n	8004d8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d12:	4b19      	ldr	r3, [pc, #100]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d18:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fd fb57 	bl	80023d4 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2a:	f7fd fb53 	bl	80023d4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1e7      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ef      	beq.n	8004d2a <HAL_RCC_OscConfig+0x22e>
 8004d4a:	e020      	b.n	8004d8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d52:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	f023 0301 	bic.w	r3, r3, #1
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd fb3a 	bl	80023d4 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d62:	e00d      	b.n	8004d80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fd fb36 	bl	80023d4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d906      	bls.n	8004d80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1ca      	b.n	800510c <HAL_RCC_OscConfig+0x610>
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d80:	4b8c      	ldr	r3, [pc, #560]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1ea      	bne.n	8004d64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a6 	beq.w	8004ee8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004da0:	4b84      	ldr	r3, [pc, #528]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_OscConfig+0x2b4>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x2b6>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	4b7f      	ldr	r3, [pc, #508]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	4a7e      	ldr	r2, [pc, #504]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd2:	4b79      	ldr	r3, [pc, #484]	@ (8004fb8 <HAL_RCC_OscConfig+0x4bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d118      	bne.n	8004e10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dde:	4b76      	ldr	r3, [pc, #472]	@ (8004fb8 <HAL_RCC_OscConfig+0x4bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a75      	ldr	r2, [pc, #468]	@ (8004fb8 <HAL_RCC_OscConfig+0x4bc>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dea:	f7fd faf3 	bl	80023d4 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df2:	f7fd faef 	bl	80023d4 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e183      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e04:	4b6c      	ldr	r3, [pc, #432]	@ (8004fb8 <HAL_RCC_OscConfig+0x4bc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d108      	bne.n	8004e2a <HAL_RCC_OscConfig+0x32e>
 8004e18:	4b66      	ldr	r3, [pc, #408]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	4a65      	ldr	r2, [pc, #404]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e28:	e024      	b.n	8004e74 <HAL_RCC_OscConfig+0x378>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	d110      	bne.n	8004e54 <HAL_RCC_OscConfig+0x358>
 8004e32:	4b60      	ldr	r3, [pc, #384]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e38:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e42:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e48:	4a5a      	ldr	r2, [pc, #360]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e52:	e00f      	b.n	8004e74 <HAL_RCC_OscConfig+0x378>
 8004e54:	4b57      	ldr	r3, [pc, #348]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	4a56      	ldr	r2, [pc, #344]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e64:	4b53      	ldr	r3, [pc, #332]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	4a52      	ldr	r2, [pc, #328]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d016      	beq.n	8004eaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fd faaa 	bl	80023d4 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fd faa6 	bl	80023d4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e138      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9a:	4b46      	ldr	r3, [pc, #280]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ed      	beq.n	8004e84 <HAL_RCC_OscConfig+0x388>
 8004ea8:	e015      	b.n	8004ed6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fd fa93 	bl	80023d4 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd fa8f 	bl	80023d4 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e121      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1ed      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004edc:	4b35      	ldr	r3, [pc, #212]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee0:	4a34      	ldr	r2, [pc, #208]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d03c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004efc:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f02:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fd fa62 	bl	80023d4 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f14:	f7fd fa5e 	bl	80023d4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0f2      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f26:	4b23      	ldr	r3, [pc, #140]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ef      	beq.n	8004f14 <HAL_RCC_OscConfig+0x418>
 8004f34:	e01b      	b.n	8004f6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f36:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fd fa45 	bl	80023d4 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f4e:	f7fd fa41 	bl	80023d4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0d5      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f60:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ef      	bne.n	8004f4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80c9 	beq.w	800510a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f78:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	f000 8083 	beq.w	800508c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d15e      	bne.n	800504c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8e:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a08      	ldr	r2, [pc, #32]	@ (8004fb4 <HAL_RCC_OscConfig+0x4b8>)
 8004f94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fd fa1b 	bl	80023d4 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa0:	e00c      	b.n	8004fbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fd fa17 	bl	80023d4 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d905      	bls.n	8004fbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e0ab      	b.n	800510c <HAL_RCC_OscConfig+0x610>
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fbc:	4b55      	ldr	r3, [pc, #340]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ec      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc8:	4b52      	ldr	r3, [pc, #328]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	4b52      	ldr	r3, [pc, #328]	@ (8005118 <HAL_RCC_OscConfig+0x61c>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6a11      	ldr	r1, [r2, #32]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	0112      	lsls	r2, r2, #4
 8004fdc:	4311      	orrs	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fe2:	0212      	lsls	r2, r2, #8
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0552      	lsls	r2, r2, #21
 8004ff0:	4311      	orrs	r1, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ff6:	0852      	lsrs	r2, r2, #1
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	0652      	lsls	r2, r2, #25
 8004ffc:	4311      	orrs	r1, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005002:	06d2      	lsls	r2, r2, #27
 8005004:	430a      	orrs	r2, r1
 8005006:	4943      	ldr	r1, [pc, #268]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005008:	4313      	orrs	r3, r2
 800500a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500c:	4b41      	ldr	r3, [pc, #260]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a40      	ldr	r2, [pc, #256]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005016:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005018:	4b3e      	ldr	r3, [pc, #248]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a3d      	ldr	r2, [pc, #244]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 800501e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005022:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fd f9d6 	bl	80023d4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fd f9d2 	bl	80023d4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e066      	b.n	800510c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503e:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x530>
 800504a:	e05e      	b.n	800510a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504c:	4b31      	ldr	r3, [pc, #196]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fd f9bc 	bl	80023d4 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7fd f9b8 	bl	80023d4 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e04c      	b.n	800510c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005072:	4b28      	ldr	r3, [pc, #160]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800507e:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	4924      	ldr	r1, [pc, #144]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 8005084:	4b25      	ldr	r3, [pc, #148]	@ (800511c <HAL_RCC_OscConfig+0x620>)
 8005086:	4013      	ands	r3, r2
 8005088:	60cb      	str	r3, [r1, #12]
 800508a:	e03e      	b.n	800510a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e039      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005098:	4b1e      	ldr	r3, [pc, #120]	@ (8005114 <HAL_RCC_OscConfig+0x618>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0203 	and.w	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d12c      	bne.n	8005106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	3b01      	subs	r3, #1
 80050b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d123      	bne.n	8005106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d11b      	bne.n	8005106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d113      	bne.n	8005106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	3b01      	subs	r3, #1
 80050ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	3b01      	subs	r3, #1
 8005100:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d001      	beq.n	800510a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	019f800c 	.word	0x019f800c
 800511c:	feeefffc 	.word	0xfeeefffc

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e11e      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005138:	4b91      	ldr	r3, [pc, #580]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d910      	bls.n	8005168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b8e      	ldr	r3, [pc, #568]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 020f 	bic.w	r2, r3, #15
 800514e:	498c      	ldr	r1, [pc, #560]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b8a      	ldr	r3, [pc, #552]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e106      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d073      	beq.n	800525c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d129      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517c:	4b81      	ldr	r3, [pc, #516]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0f4      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800518c:	f000 f99e 	bl	80054cc <RCC_GetSysClockFreqFromPLLSource>
 8005190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4a7c      	ldr	r2, [pc, #496]	@ (8005388 <HAL_RCC_ClockConfig+0x268>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d93f      	bls.n	800521a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800519a:	4b7a      	ldr	r3, [pc, #488]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d033      	beq.n	800521a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d12f      	bne.n	800521a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051ba:	4b72      	ldr	r3, [pc, #456]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051c2:	4a70      	ldr	r2, [pc, #448]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051ca:	2380      	movs	r3, #128	@ 0x80
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e024      	b.n	800521a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0c6      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e8:	4b66      	ldr	r3, [pc, #408]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0be      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051f8:	f000 f8ce 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4a61      	ldr	r2, [pc, #388]	@ (8005388 <HAL_RCC_ClockConfig+0x268>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d909      	bls.n	800521a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005206:	4b5f      	ldr	r3, [pc, #380]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800520e:	4a5d      	ldr	r2, [pc, #372]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005214:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005216:	2380      	movs	r3, #128	@ 0x80
 8005218:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800521a:	4b5a      	ldr	r3, [pc, #360]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f023 0203 	bic.w	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4957      	ldr	r1, [pc, #348]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005228:	4313      	orrs	r3, r2
 800522a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522c:	f7fd f8d2 	bl	80023d4 <HAL_GetTick>
 8005230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005232:	e00a      	b.n	800524a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005234:	f7fd f8ce 	bl	80023d4 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e095      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	4b4e      	ldr	r3, [pc, #312]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 020c 	and.w	r2, r3, #12
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	429a      	cmp	r2, r3
 800525a:	d1eb      	bne.n	8005234 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d023      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005274:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4a42      	ldr	r2, [pc, #264]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800527a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800527e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800528c:	4b3d      	ldr	r3, [pc, #244]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005294:	4a3b      	ldr	r2, [pc, #236]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005296:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800529a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529c:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4936      	ldr	r1, [pc, #216]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b80      	cmp	r3, #128	@ 0x80
 80052b4:	d105      	bne.n	80052c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052b6:	4b33      	ldr	r3, [pc, #204]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4a32      	ldr	r2, [pc, #200]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 80052bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d21d      	bcs.n	800530c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 020f 	bic.w	r2, r3, #15
 80052d8:	4929      	ldr	r1, [pc, #164]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052e0:	f7fd f878 	bl	80023d4 <HAL_GetTick>
 80052e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e8:	f7fd f874 	bl	80023d4 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e03b      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	@ (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d1ed      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4917      	ldr	r1, [pc, #92]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005326:	4313      	orrs	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005336:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490f      	ldr	r1, [pc, #60]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800534a:	f000 f825 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490c      	ldr	r1, [pc, #48]	@ (800538c <HAL_RCC_ClockConfig+0x26c>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a0a      	ldr	r2, [pc, #40]	@ (8005390 <HAL_RCC_ClockConfig+0x270>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <HAL_RCC_ClockConfig+0x274>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fc ffe4 	bl	800233c <HAL_InitTick>
 8005374:	4603      	mov	r3, r0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40022000 	.word	0x40022000
 8005384:	40021000 	.word	0x40021000
 8005388:	04c4b400 	.word	0x04c4b400
 800538c:	0800a494 	.word	0x0800a494
 8005390:	20000000 	.word	0x20000000
 8005394:	20000004 	.word	0x20000004

08005398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800539e:	4b2c      	ldr	r3, [pc, #176]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d102      	bne.n	80053b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e047      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053b0:	4b27      	ldr	r3, [pc, #156]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d102      	bne.n	80053c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053bc:	4b26      	ldr	r3, [pc, #152]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e03e      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053c2:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d136      	bne.n	800543c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ce:	4b20      	ldr	r3, [pc, #128]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	3301      	adds	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d10c      	bne.n	8005406 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	4a16      	ldr	r2, [pc, #88]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f6:	68d2      	ldr	r2, [r2, #12]
 80053f8:	0a12      	lsrs	r2, r2, #8
 80053fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	617b      	str	r3, [r7, #20]
      break;
 8005404:	e00c      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	4a10      	ldr	r2, [pc, #64]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005410:	68d2      	ldr	r2, [r2, #12]
 8005412:	0a12      	lsrs	r2, r2, #8
 8005414:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
      break;
 800541e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0e5b      	lsrs	r3, r3, #25
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e001      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005440:	693b      	ldr	r3, [r7, #16]
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	00f42400 	.word	0x00f42400
 8005458:	016e3600 	.word	0x016e3600

0800545c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005460:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_RCC_GetHCLKFreq+0x14>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000000 	.word	0x20000000

08005474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005478:	f7ff fff0 	bl	800545c <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCC_GetPCLK1Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	0800a4a4 	.word	0x0800a4a4

080054a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054a4:	f7ff ffda 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054a8:	4602      	mov	r2, r0
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	0adb      	lsrs	r3, r3, #11
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	4904      	ldr	r1, [pc, #16]	@ (80054c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054b6:	5ccb      	ldrb	r3, [r1, r3]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000
 80054c8:	0800a4a4 	.word	0x0800a4a4

080054cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054d2:	4b1e      	ldr	r3, [pc, #120]	@ (800554c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054dc:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d10c      	bne.n	800550a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f0:	4a17      	ldr	r2, [pc, #92]	@ (8005550 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	4a14      	ldr	r2, [pc, #80]	@ (800554c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054fa:	68d2      	ldr	r2, [r2, #12]
 80054fc:	0a12      	lsrs	r2, r2, #8
 80054fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	617b      	str	r3, [r7, #20]
    break;
 8005508:	e00c      	b.n	8005524 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800550a:	4a12      	ldr	r2, [pc, #72]	@ (8005554 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005512:	4a0e      	ldr	r2, [pc, #56]	@ (800554c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005514:	68d2      	ldr	r2, [r2, #12]
 8005516:	0a12      	lsrs	r2, r2, #8
 8005518:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
    break;
 8005522:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005524:	4b09      	ldr	r3, [pc, #36]	@ (800554c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	0e5b      	lsrs	r3, r3, #25
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	3301      	adds	r3, #1
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	fbb2 f3f3 	udiv	r3, r2, r3
 800553c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800553e:	687b      	ldr	r3, [r7, #4]
}
 8005540:	4618      	mov	r0, r3
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40021000 	.word	0x40021000
 8005550:	016e3600 	.word	0x016e3600
 8005554:	00f42400 	.word	0x00f42400

08005558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005560:	2300      	movs	r3, #0
 8005562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005564:	2300      	movs	r3, #0
 8005566:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8098 	beq.w	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b43      	ldr	r3, [pc, #268]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10d      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	4b40      	ldr	r3, [pc, #256]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558a:	4a3f      	ldr	r2, [pc, #252]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005590:	6593      	str	r3, [r2, #88]	@ 0x58
 8005592:	4b3d      	ldr	r3, [pc, #244]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800559e:	2301      	movs	r3, #1
 80055a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055a2:	4b3a      	ldr	r3, [pc, #232]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a39      	ldr	r2, [pc, #228]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055ae:	f7fc ff11 	bl	80023d4 <HAL_GetTick>
 80055b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b4:	e009      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b6:	f7fc ff0d 	bl	80023d4 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d902      	bls.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	74fb      	strb	r3, [r7, #19]
        break;
 80055c8:	e005      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ca:	4b30      	ldr	r3, [pc, #192]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0ef      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d159      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01e      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d019      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055f8:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005604:	4b20      	ldr	r3, [pc, #128]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560a:	4a1f      	ldr	r2, [pc, #124]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005614:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561a:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005624:	4a18      	ldr	r2, [pc, #96]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d016      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc fecd 	bl	80023d4 <HAL_GetTick>
 800563a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563c:	e00b      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563e:	f7fc fec9 	bl	80023d4 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564c:	4293      	cmp	r3, r2
 800564e:	d902      	bls.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	74fb      	strb	r3, [r7, #19]
            break;
 8005654:	e006      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005656:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ec      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800566a:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005678:	4903      	ldr	r1, [pc, #12]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	74bb      	strb	r3, [r7, #18]
 8005686:	e005      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005688:	40021000 	.word	0x40021000
 800568c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005694:	7c7b      	ldrb	r3, [r7, #17]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d105      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800569a:	4ba6      	ldr	r3, [pc, #664]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569e:	4aa5      	ldr	r2, [pc, #660]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056b2:	4ba0      	ldr	r3, [pc, #640]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f023 0203 	bic.w	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	499c      	ldr	r1, [pc, #624]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056d4:	4b97      	ldr	r3, [pc, #604]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	f023 020c 	bic.w	r2, r3, #12
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	4994      	ldr	r1, [pc, #592]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	498b      	ldr	r1, [pc, #556]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005718:	4b86      	ldr	r3, [pc, #536]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	4983      	ldr	r1, [pc, #524]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800573a:	4b7e      	ldr	r3, [pc, #504]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005740:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	497a      	ldr	r1, [pc, #488]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800575c:	4b75      	ldr	r3, [pc, #468]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	4972      	ldr	r1, [pc, #456]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800577e:	4b6d      	ldr	r3, [pc, #436]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	4969      	ldr	r1, [pc, #420]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057a0:	4b64      	ldr	r3, [pc, #400]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4961      	ldr	r1, [pc, #388]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	4958      	ldr	r1, [pc, #352]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057e4:	4b53      	ldr	r3, [pc, #332]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	4950      	ldr	r1, [pc, #320]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005802:	d105      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005804:	4b4b      	ldr	r3, [pc, #300]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a4a      	ldr	r2, [pc, #296]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800580a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800581c:	4b45      	ldr	r3, [pc, #276]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582a:	4942      	ldr	r1, [pc, #264]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583c:	4b3d      	ldr	r3, [pc, #244]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a3c      	ldr	r2, [pc, #240]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005846:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005854:	4b37      	ldr	r3, [pc, #220]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	4934      	ldr	r1, [pc, #208]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005874:	4b2f      	ldr	r3, [pc, #188]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a2e      	ldr	r2, [pc, #184]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800588c:	4b29      	ldr	r3, [pc, #164]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	4926      	ldr	r1, [pc, #152]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058aa:	d105      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b21      	ldr	r3, [pc, #132]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a20      	ldr	r2, [pc, #128]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	4918      	ldr	r1, [pc, #96]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058e2:	d105      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e4:	4b13      	ldr	r3, [pc, #76]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a12      	ldr	r2, [pc, #72]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590a:	490a      	ldr	r1, [pc, #40]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800591a:	d105      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a04      	ldr	r2, [pc, #16]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005926:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005928:	7cbb      	ldrb	r3, [r7, #18]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000

08005938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e049      	b.n	80059de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc fac0 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 fb14 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d001      	beq.n	8005a00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e042      	b.n	8005a86 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	@ (8005a94 <HAL_TIM_Base_Start+0xac>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_TIM_Base_Start+0x5c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1a:	d013      	beq.n	8005a44 <HAL_TIM_Base_Start+0x5c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <HAL_TIM_Base_Start+0xb0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_TIM_Base_Start+0x5c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <HAL_TIM_Base_Start+0xb4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_TIM_Base_Start+0x5c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_TIM_Base_Start+0xb8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_Base_Start+0x5c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_TIM_Base_Start+0xbc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d115      	bne.n	8005a70 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	4b17      	ldr	r3, [pc, #92]	@ (8005aa8 <HAL_TIM_Base_Start+0xc0>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d015      	beq.n	8005a82 <HAL_TIM_Base_Start+0x9a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a5c:	d011      	beq.n	8005a82 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	00010007 	.word	0x00010007

08005aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0202 	mvn.w	r2, #2
 8005ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa36 	bl	8005f68 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa28 	bl	8005f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa39 	bl	8005f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0204 	mvn.w	r2, #4
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa10 	bl	8005f68 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa02 	bl	8005f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa13 	bl	8005f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0208 	mvn.w	r2, #8
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9ea 	bl	8005f68 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9dc 	bl	8005f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f9ed 	bl	8005f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0210 	mvn.w	r2, #16
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9c4 	bl	8005f68 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9b6 	bl	8005f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f9c7 	bl	8005f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0201 	mvn.w	r2, #1
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f994 	bl	8005f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fb73 	bl	800632c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fb6b 	bl	8006340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00c      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f981 	bl	8005f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00c      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0220 	mvn.w	r2, #32
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fb33 	bl	8006318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00c      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fb3f 	bl	8006354 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00c      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb37 	bl	8006368 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00c      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb2f 	bl	800637c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb27 	bl	8006390 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_ConfigClockSource+0x1c>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0de      	b.n	8005f26 <HAL_TIM_ConfigClockSource+0x1da>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a63      	ldr	r2, [pc, #396]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f000 80a9 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005da8:	4a61      	ldr	r2, [pc, #388]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f200 80ae 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005db0:	4a60      	ldr	r2, [pc, #384]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	f000 80a1 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005db8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f200 80a6 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f000 8099 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8005f38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f200 809e 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8005f3c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f000 8091 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005dd8:	4a58      	ldr	r2, [pc, #352]	@ (8005f3c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	f200 8096 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005de0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005de4:	f000 8089 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005de8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005dec:	f200 808e 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d03e      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x128>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	f200 8087 	bhi.w	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e02:	f000 8086 	beq.w	8005f12 <HAL_TIM_ConfigClockSource+0x1c6>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0a:	d87f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e0c:	2b70      	cmp	r3, #112	@ 0x70
 8005e0e:	d01a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xfa>
 8005e10:	2b70      	cmp	r3, #112	@ 0x70
 8005e12:	d87b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e14:	2b60      	cmp	r3, #96	@ 0x60
 8005e16:	d050      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x16e>
 8005e18:	2b60      	cmp	r3, #96	@ 0x60
 8005e1a:	d877      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e1c:	2b50      	cmp	r3, #80	@ 0x50
 8005e1e:	d03c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x14e>
 8005e20:	2b50      	cmp	r3, #80	@ 0x50
 8005e22:	d873      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	d058      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x18e>
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d86f      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e2c:	2b30      	cmp	r3, #48	@ 0x30
 8005e2e:	d064      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005e30:	2b30      	cmp	r3, #48	@ 0x30
 8005e32:	d86b      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d060      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d867      	bhi.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d05c      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d05a      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0x1ae>
 8005e44:	e062      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e56:	f000 f9bd 	bl	80061d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
      break;
 8005e72:	e04f      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	f000 f9a6 	bl	80061d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e96:	609a      	str	r2, [r3, #8]
      break;
 8005e98:	e03c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 f918 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2150      	movs	r1, #80	@ 0x50
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f971 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e02c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 f937 	bl	800613a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2160      	movs	r1, #96	@ 0x60
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f961 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e01c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f000 f8f8 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2140      	movs	r1, #64	@ 0x40
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f951 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005ef8:	e00c      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f000 f948 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005f0a:	e003      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e000      	b.n	8005f14 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	00100070 	.word	0x00100070
 8005f34:	00100040 	.word	0x00100040
 8005f38:	00100030 	.word	0x00100030
 8005f3c:	00100020 	.word	0x00100020

08005f40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a42      	ldr	r2, [pc, #264]	@ (80060c0 <TIM_Base_SetConfig+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80060c4 <TIM_Base_SetConfig+0x120>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3e      	ldr	r2, [pc, #248]	@ (80060c8 <TIM_Base_SetConfig+0x124>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x38>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80060cc <TIM_Base_SetConfig+0x128>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a33      	ldr	r2, [pc, #204]	@ (80060c0 <TIM_Base_SetConfig+0x11c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01b      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffc:	d017      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a30      	ldr	r2, [pc, #192]	@ (80060c4 <TIM_Base_SetConfig+0x120>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2f      	ldr	r2, [pc, #188]	@ (80060c8 <TIM_Base_SetConfig+0x124>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00f      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <TIM_Base_SetConfig+0x128>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <TIM_Base_SetConfig+0x12c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2c      	ldr	r2, [pc, #176]	@ (80060d4 <TIM_Base_SetConfig+0x130>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2b      	ldr	r2, [pc, #172]	@ (80060d8 <TIM_Base_SetConfig+0x134>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <TIM_Base_SetConfig+0x11c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <TIM_Base_SetConfig+0x128>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <TIM_Base_SetConfig+0x12c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <TIM_Base_SetConfig+0x130>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_Base_SetConfig+0xe8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a14      	ldr	r2, [pc, #80]	@ (80060d8 <TIM_Base_SetConfig+0x134>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d103      	bne.n	8006094 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d105      	bne.n	80060b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f023 0201 	bic.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]
  }
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800

080060dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 030a 	bic.w	r3, r3, #10
 8006118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f023 0210 	bic.w	r2, r3, #16
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006164:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006176:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e065      	b.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2c      	ldr	r2, [pc, #176]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2b      	ldr	r2, [pc, #172]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d108      	bne.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d018      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062a2:	d013      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a18      	ldr	r2, [pc, #96]	@ (800630c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00e      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a17      	ldr	r2, [pc, #92]	@ (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a13      	ldr	r2, [pc, #76]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10c      	bne.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40013400 	.word	0x40013400
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40014000 	.word	0x40014000

08006318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e042      	b.n	800643c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fb fea3 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	@ 0x24
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 ffac 	bl	800734c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fcdd 	bl	8006db4 <UART_SetConfig>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e01b      	b.n	800643c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 f82b 	bl	8007490 <UART_CheckIdleState>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	2b20      	cmp	r3, #32
 800645c:	d17b      	bne.n	8006556 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Transmit+0x26>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e074      	b.n	8006558 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800647e:	f7fb ffa9 	bl	80023d4 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649c:	d108      	bne.n	80064b0 <HAL_UART_Transmit+0x6c>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e003      	b.n	80064b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b8:	e030      	b.n	800651c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	@ 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 f88d 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e03d      	b.n	8006558 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3302      	adds	r3, #2
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	e007      	b.n	800650a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1c8      	bne.n	80064ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2200      	movs	r2, #0
 8006530:	2140      	movs	r1, #64	@ 0x40
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 f856 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e006      	b.n	8006558 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	@ 0x28
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006576:	2b20      	cmp	r3, #32
 8006578:	f040 80b5 	bne.w	80066e6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Receive+0x28>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0ad      	b.n	80066e8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2222      	movs	r2, #34	@ 0x22
 8006598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065a2:	f7fb ff17 	bl	80023d4 <HAL_GetTick>
 80065a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c0:	d10e      	bne.n	80065e0 <HAL_UART_Receive+0x80>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d105      	bne.n	80065d6 <HAL_UART_Receive+0x76>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80065d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065d4:	e02d      	b.n	8006632 <HAL_UART_Receive+0xd2>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	@ 0xff
 80065da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065de:	e028      	b.n	8006632 <HAL_UART_Receive+0xd2>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10d      	bne.n	8006604 <HAL_UART_Receive+0xa4>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_UART_Receive+0x9a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	22ff      	movs	r2, #255	@ 0xff
 80065f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065f8:	e01b      	b.n	8006632 <HAL_UART_Receive+0xd2>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	227f      	movs	r2, #127	@ 0x7f
 80065fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006602:	e016      	b.n	8006632 <HAL_UART_Receive+0xd2>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800660c:	d10d      	bne.n	800662a <HAL_UART_Receive+0xca>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <HAL_UART_Receive+0xc0>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	227f      	movs	r2, #127	@ 0x7f
 800661a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800661e:	e008      	b.n	8006632 <HAL_UART_Receive+0xd2>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	223f      	movs	r2, #63	@ 0x3f
 8006624:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006628:	e003      	b.n	8006632 <HAL_UART_Receive+0xd2>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006638:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006642:	d108      	bne.n	8006656 <HAL_UART_Receive+0xf6>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	e003      	b.n	800665e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800665e:	e036      	b.n	80066ce <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2200      	movs	r2, #0
 8006668:	2120      	movs	r1, #32
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 ffba 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e032      	b.n	80066e8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10c      	bne.n	80066a2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668e:	b29a      	uxth	r2, r3
 8006690:	8a7b      	ldrh	r3, [r7, #18]
 8006692:	4013      	ands	r3, r2
 8006694:	b29a      	uxth	r2, r3
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	3302      	adds	r3, #2
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e00c      	b.n	80066bc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	8a7b      	ldrh	r3, [r7, #18]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	4013      	ands	r3, r2
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	3301      	adds	r3, #1
 80066ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1c2      	bne.n	8006660 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3720      	adds	r7, #32
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b0ba      	sub	sp, #232	@ 0xe8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800671a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800671e:	4013      	ands	r3, r2
 8006720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d11b      	bne.n	8006764 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d015      	beq.n	8006764 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8300 	beq.w	8006d5a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
      }
      return;
 8006762:	e2fa      	b.n	8006d5a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8123 	beq.w	80069b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800676e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006772:	4b8d      	ldr	r3, [pc, #564]	@ (80069a8 <HAL_UART_IRQHandler+0x2b8>)
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800677a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800677e:	4b8b      	ldr	r3, [pc, #556]	@ (80069ac <HAL_UART_IRQHandler+0x2bc>)
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8116 	beq.w	80069b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d011      	beq.n	80067b8 <HAL_UART_IRQHandler+0xc8>
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ae:	f043 0201 	orr.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d011      	beq.n	80067e8 <HAL_UART_IRQHandler+0xf8>
 80067c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2202      	movs	r2, #2
 80067d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067de:	f043 0204 	orr.w	r2, r3, #4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d011      	beq.n	8006818 <HAL_UART_IRQHandler+0x128>
 80067f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2204      	movs	r2, #4
 8006806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680e:	f043 0202 	orr.w	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d017      	beq.n	8006854 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006834:	4b5c      	ldr	r3, [pc, #368]	@ (80069a8 <HAL_UART_IRQHandler+0x2b8>)
 8006836:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2208      	movs	r2, #8
 8006842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684a:	f043 0208 	orr.w	r2, r3, #8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800685c:	2b00      	cmp	r3, #0
 800685e:	d012      	beq.n	8006886 <HAL_UART_IRQHandler+0x196>
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006864:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00c      	beq.n	8006886 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687c:	f043 0220 	orr.w	r2, r3, #32
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8266 	beq.w	8006d5e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d013      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068da:	2b40      	cmp	r3, #64	@ 0x40
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d054      	beq.n	8006994 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fee7 	bl	80076be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	d146      	bne.n	800698c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800692a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800692e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d9      	bne.n	80068fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800695a:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <HAL_UART_IRQHandler+0x2c0>)
 800695c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006964:	4618      	mov	r0, r3
 8006966:	f7fd fb41 	bl	8003fec <HAL_DMA_Abort_IT>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d019      	beq.n	80069a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006982:	e00f      	b.n	80069a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9ff 	bl	8006d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698a:	e00b      	b.n	80069a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f9fb 	bl	8006d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006992:	e007      	b.n	80069a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f9f7 	bl	8006d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80069a2:	e1dc      	b.n	8006d5e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	bf00      	nop
    return;
 80069a6:	e1da      	b.n	8006d5e <HAL_UART_IRQHandler+0x66e>
 80069a8:	10000001 	.word	0x10000001
 80069ac:	04000120 	.word	0x04000120
 80069b0:	0800778b 	.word	0x0800778b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	f040 8170 	bne.w	8006c9e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8169 	beq.w	8006c9e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8162 	beq.w	8006c9e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ec:	2b40      	cmp	r3, #64	@ 0x40
 80069ee:	f040 80d8 	bne.w	8006ba2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80af 	beq.w	8006b68 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a14:	429a      	cmp	r2, r3
 8006a16:	f080 80a7 	bcs.w	8006b68 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 8087 	bne.w	8006b46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1da      	bne.n	8006a38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006aa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e1      	bne.n	8006a82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b14:	f023 0310 	bic.w	r3, r3, #16
 8006b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e4      	bne.n	8006b04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd f9fa 	bl	8003f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f91b 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006b66:	e0fc      	b.n	8006d62 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b72:	429a      	cmp	r2, r3
 8006b74:	f040 80f5 	bne.w	8006d62 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	f040 80eb 	bne.w	8006d62 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8fe 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
      return;
 8006ba0:	e0df      	b.n	8006d62 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80d1 	beq.w	8006d66 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80cc 	beq.w	8006d66 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e4      	bne.n	8006bce <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	623b      	str	r3, [r7, #32]
   return(result);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
 8006c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3308      	adds	r3, #8
 8006c28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e1      	bne.n	8006c04 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 0310 	bic.w	r3, r3, #16
 8006c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	69b9      	ldr	r1, [r7, #24]
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	617b      	str	r3, [r7, #20]
   return(result);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e4      	bne.n	8006c54 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f880 	bl	8006d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c9c:	e063      	b.n	8006d66 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5d8>
 8006caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d008      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006cbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fd9f 	bl	8007804 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cc6:	e051      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d014      	beq.n	8006cfe <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d105      	bne.n	8006cec <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ce4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d03a      	beq.n	8006d6a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
    }
    return;
 8006cfc:	e035      	b.n	8006d6a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <HAL_UART_IRQHandler+0x62e>
 8006d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fd49 	bl	80077ae <UART_EndTransmit_IT>
    return;
 8006d1c:	e026      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_UART_IRQHandler+0x64e>
 8006d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fd78 	bl	800782c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d3c:	e016      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d010      	beq.n	8006d6c <HAL_UART_IRQHandler+0x67c>
 8006d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	da0c      	bge.n	8006d6c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fd60 	bl	8007818 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d58:	e008      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
      return;
 8006d5a:	bf00      	nop
 8006d5c:	e006      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
    return;
 8006d5e:	bf00      	nop
 8006d60:	e004      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
      return;
 8006d62:	bf00      	nop
 8006d64:	e002      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
      return;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <HAL_UART_IRQHandler+0x67c>
    return;
 8006d6a:	bf00      	nop
  }
}
 8006d6c:	37e8      	adds	r7, #232	@ 0xe8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db8:	b08c      	sub	sp, #48	@ 0x30
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4bab      	ldr	r3, [pc, #684]	@ (8007090 <UART_SetConfig+0x2dc>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4aa0      	ldr	r2, [pc, #640]	@ (8007094 <UART_SetConfig+0x2e0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	f023 010f 	bic.w	r1, r3, #15
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a91      	ldr	r2, [pc, #580]	@ (8007098 <UART_SetConfig+0x2e4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d125      	bne.n	8006ea4 <UART_SetConfig+0xf0>
 8006e58:	4b90      	ldr	r3, [pc, #576]	@ (800709c <UART_SetConfig+0x2e8>)
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d81a      	bhi.n	8006e9c <UART_SetConfig+0xe8>
 8006e66:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <UART_SetConfig+0xb8>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006e95 	.word	0x08006e95
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e82:	e0d6      	b.n	8007032 <UART_SetConfig+0x27e>
 8006e84:	2302      	movs	r3, #2
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8a:	e0d2      	b.n	8007032 <UART_SetConfig+0x27e>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e92:	e0ce      	b.n	8007032 <UART_SetConfig+0x27e>
 8006e94:	2308      	movs	r3, #8
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9a:	e0ca      	b.n	8007032 <UART_SetConfig+0x27e>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea2:	e0c6      	b.n	8007032 <UART_SetConfig+0x27e>
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7d      	ldr	r2, [pc, #500]	@ (80070a0 <UART_SetConfig+0x2ec>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d138      	bne.n	8006f20 <UART_SetConfig+0x16c>
 8006eae:	4b7b      	ldr	r3, [pc, #492]	@ (800709c <UART_SetConfig+0x2e8>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f003 030c 	and.w	r3, r3, #12
 8006eb8:	2b0c      	cmp	r3, #12
 8006eba:	d82d      	bhi.n	8006f18 <UART_SetConfig+0x164>
 8006ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <UART_SetConfig+0x110>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ef9 	.word	0x08006ef9
 8006ec8:	08006f19 	.word	0x08006f19
 8006ecc:	08006f19 	.word	0x08006f19
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006f09 	.word	0x08006f09
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f19 	.word	0x08006f19
 8006ee0:	08006f19 	.word	0x08006f19
 8006ee4:	08006f01 	.word	0x08006f01
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	08006f19 	.word	0x08006f19
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efe:	e098      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f00:	2302      	movs	r3, #2
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f06:	e094      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0e:	e090      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f16:	e08c      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1e:	e088      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a5f      	ldr	r2, [pc, #380]	@ (80070a4 <UART_SetConfig+0x2f0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d125      	bne.n	8006f76 <UART_SetConfig+0x1c2>
 8006f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800709c <UART_SetConfig+0x2e8>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f34:	2b30      	cmp	r3, #48	@ 0x30
 8006f36:	d016      	beq.n	8006f66 <UART_SetConfig+0x1b2>
 8006f38:	2b30      	cmp	r3, #48	@ 0x30
 8006f3a:	d818      	bhi.n	8006f6e <UART_SetConfig+0x1ba>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d00a      	beq.n	8006f56 <UART_SetConfig+0x1a2>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d814      	bhi.n	8006f6e <UART_SetConfig+0x1ba>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <UART_SetConfig+0x19a>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d008      	beq.n	8006f5e <UART_SetConfig+0x1aa>
 8006f4c:	e00f      	b.n	8006f6e <UART_SetConfig+0x1ba>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f54:	e06d      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f56:	2302      	movs	r3, #2
 8006f58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f5c:	e069      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f5e:	2304      	movs	r3, #4
 8006f60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f64:	e065      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f66:	2308      	movs	r3, #8
 8006f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6c:	e061      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f6e:	2310      	movs	r3, #16
 8006f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f74:	e05d      	b.n	8007032 <UART_SetConfig+0x27e>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a4b      	ldr	r2, [pc, #300]	@ (80070a8 <UART_SetConfig+0x2f4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d125      	bne.n	8006fcc <UART_SetConfig+0x218>
 8006f80:	4b46      	ldr	r3, [pc, #280]	@ (800709c <UART_SetConfig+0x2e8>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f8c:	d016      	beq.n	8006fbc <UART_SetConfig+0x208>
 8006f8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f90:	d818      	bhi.n	8006fc4 <UART_SetConfig+0x210>
 8006f92:	2b80      	cmp	r3, #128	@ 0x80
 8006f94:	d00a      	beq.n	8006fac <UART_SetConfig+0x1f8>
 8006f96:	2b80      	cmp	r3, #128	@ 0x80
 8006f98:	d814      	bhi.n	8006fc4 <UART_SetConfig+0x210>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <UART_SetConfig+0x1f0>
 8006f9e:	2b40      	cmp	r3, #64	@ 0x40
 8006fa0:	d008      	beq.n	8006fb4 <UART_SetConfig+0x200>
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x210>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006faa:	e042      	b.n	8007032 <UART_SetConfig+0x27e>
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb2:	e03e      	b.n	8007032 <UART_SetConfig+0x27e>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	e03a      	b.n	8007032 <UART_SetConfig+0x27e>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e036      	b.n	8007032 <UART_SetConfig+0x27e>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e032      	b.n	8007032 <UART_SetConfig+0x27e>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a30      	ldr	r2, [pc, #192]	@ (8007094 <UART_SetConfig+0x2e0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d12a      	bne.n	800702c <UART_SetConfig+0x278>
 8006fd6:	4b31      	ldr	r3, [pc, #196]	@ (800709c <UART_SetConfig+0x2e8>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fe4:	d01a      	beq.n	800701c <UART_SetConfig+0x268>
 8006fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fea:	d81b      	bhi.n	8007024 <UART_SetConfig+0x270>
 8006fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff0:	d00c      	beq.n	800700c <UART_SetConfig+0x258>
 8006ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff6:	d815      	bhi.n	8007024 <UART_SetConfig+0x270>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <UART_SetConfig+0x250>
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007000:	d008      	beq.n	8007014 <UART_SetConfig+0x260>
 8007002:	e00f      	b.n	8007024 <UART_SetConfig+0x270>
 8007004:	2300      	movs	r3, #0
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700a:	e012      	b.n	8007032 <UART_SetConfig+0x27e>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007012:	e00e      	b.n	8007032 <UART_SetConfig+0x27e>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701a:	e00a      	b.n	8007032 <UART_SetConfig+0x27e>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007022:	e006      	b.n	8007032 <UART_SetConfig+0x27e>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e002      	b.n	8007032 <UART_SetConfig+0x27e>
 800702c:	2310      	movs	r3, #16
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a17      	ldr	r2, [pc, #92]	@ (8007094 <UART_SetConfig+0x2e0>)
 8007038:	4293      	cmp	r3, r2
 800703a:	f040 80a8 	bne.w	800718e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800703e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007042:	2b08      	cmp	r3, #8
 8007044:	d834      	bhi.n	80070b0 <UART_SetConfig+0x2fc>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <UART_SetConfig+0x298>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007071 	.word	0x08007071
 8007050:	080070b1 	.word	0x080070b1
 8007054:	08007079 	.word	0x08007079
 8007058:	080070b1 	.word	0x080070b1
 800705c:	0800707f 	.word	0x0800707f
 8007060:	080070b1 	.word	0x080070b1
 8007064:	080070b1 	.word	0x080070b1
 8007068:	080070b1 	.word	0x080070b1
 800706c:	08007087 	.word	0x08007087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fe fa00 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8007074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007076:	e021      	b.n	80070bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007078:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <UART_SetConfig+0x2f8>)
 800707a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800707c:	e01e      	b.n	80070bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800707e:	f7fe f98b 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 8007082:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007084:	e01a      	b.n	80070bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800708c:	e016      	b.n	80070bc <UART_SetConfig+0x308>
 800708e:	bf00      	nop
 8007090:	cfff69f3 	.word	0xcfff69f3
 8007094:	40008000 	.word	0x40008000
 8007098:	40013800 	.word	0x40013800
 800709c:	40021000 	.word	0x40021000
 80070a0:	40004400 	.word	0x40004400
 80070a4:	40004800 	.word	0x40004800
 80070a8:	40004c00 	.word	0x40004c00
 80070ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 812a 	beq.w	8007318 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	4a9e      	ldr	r2, [pc, #632]	@ (8007344 <UART_SetConfig+0x590>)
 80070ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d305      	bcc.n	80070f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d903      	bls.n	80070fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070fa:	e10d      	b.n	8007318 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	2200      	movs	r2, #0
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	60fa      	str	r2, [r7, #12]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007108:	4a8e      	ldr	r2, [pc, #568]	@ (8007344 <UART_SetConfig+0x590>)
 800710a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800710e:	b29b      	uxth	r3, r3
 8007110:	2200      	movs	r2, #0
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800711a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800711e:	f7f9 fd6b 	bl	8000bf8 <__aeabi_uldivmod>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4610      	mov	r0, r2
 8007128:	4619      	mov	r1, r3
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	020b      	lsls	r3, r1, #8
 8007134:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007138:	0202      	lsls	r2, r0, #8
 800713a:	6979      	ldr	r1, [r7, #20]
 800713c:	6849      	ldr	r1, [r1, #4]
 800713e:	0849      	lsrs	r1, r1, #1
 8007140:	2000      	movs	r0, #0
 8007142:	460c      	mov	r4, r1
 8007144:	4605      	mov	r5, r0
 8007146:	eb12 0804 	adds.w	r8, r2, r4
 800714a:	eb43 0905 	adc.w	r9, r3, r5
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	469a      	mov	sl, r3
 8007156:	4693      	mov	fp, r2
 8007158:	4652      	mov	r2, sl
 800715a:	465b      	mov	r3, fp
 800715c:	4640      	mov	r0, r8
 800715e:	4649      	mov	r1, r9
 8007160:	f7f9 fd4a 	bl	8000bf8 <__aeabi_uldivmod>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4613      	mov	r3, r2
 800716a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007172:	d308      	bcc.n	8007186 <UART_SetConfig+0x3d2>
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800717a:	d204      	bcs.n	8007186 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	60da      	str	r2, [r3, #12]
 8007184:	e0c8      	b.n	8007318 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800718c:	e0c4      	b.n	8007318 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007196:	d167      	bne.n	8007268 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007198:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800719c:	2b08      	cmp	r3, #8
 800719e:	d828      	bhi.n	80071f2 <UART_SetConfig+0x43e>
 80071a0:	a201      	add	r2, pc, #4	@ (adr r2, 80071a8 <UART_SetConfig+0x3f4>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071d5 	.word	0x080071d5
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071f3 	.word	0x080071f3
 80071b8:	080071e3 	.word	0x080071e3
 80071bc:	080071f3 	.word	0x080071f3
 80071c0:	080071f3 	.word	0x080071f3
 80071c4:	080071f3 	.word	0x080071f3
 80071c8:	080071eb 	.word	0x080071eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071cc:	f7fe f952 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071d2:	e014      	b.n	80071fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d4:	f7fe f964 	bl	80054a0 <HAL_RCC_GetPCLK2Freq>
 80071d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071da:	e010      	b.n	80071fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007348 <UART_SetConfig+0x594>)
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071e0:	e00d      	b.n	80071fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e2:	f7fe f8d9 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 80071e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071e8:	e009      	b.n	80071fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071f0:	e005      	b.n	80071fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8089 	beq.w	8007318 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	4a4e      	ldr	r2, [pc, #312]	@ (8007344 <UART_SetConfig+0x590>)
 800720c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007210:	461a      	mov	r2, r3
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	fbb3 f3f2 	udiv	r3, r3, r2
 8007218:	005a      	lsls	r2, r3, #1
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	085b      	lsrs	r3, r3, #1
 8007220:	441a      	add	r2, r3
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	d916      	bls.n	8007260 <UART_SetConfig+0x4ac>
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007238:	d212      	bcs.n	8007260 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	b29b      	uxth	r3, r3
 800723e:	f023 030f 	bic.w	r3, r3, #15
 8007242:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	b29b      	uxth	r3, r3
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	b29a      	uxth	r2, r3
 8007250:	8bfb      	ldrh	r3, [r7, #30]
 8007252:	4313      	orrs	r3, r2
 8007254:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	8bfa      	ldrh	r2, [r7, #30]
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	e05b      	b.n	8007318 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007266:	e057      	b.n	8007318 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007268:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800726c:	2b08      	cmp	r3, #8
 800726e:	d828      	bhi.n	80072c2 <UART_SetConfig+0x50e>
 8007270:	a201      	add	r2, pc, #4	@ (adr r2, 8007278 <UART_SetConfig+0x4c4>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072b3 	.word	0x080072b3
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072c3 	.word	0x080072c3
 8007294:	080072c3 	.word	0x080072c3
 8007298:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fe f8ea 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 80072a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a2:	e014      	b.n	80072ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fe f8fc 	bl	80054a0 <HAL_RCC_GetPCLK2Freq>
 80072a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072aa:	e010      	b.n	80072ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b26      	ldr	r3, [pc, #152]	@ (8007348 <UART_SetConfig+0x594>)
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b0:	e00d      	b.n	80072ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fe f871 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 80072b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b8:	e009      	b.n	80072ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c0:	e005      	b.n	80072ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072cc:	bf00      	nop
    }

    if (pclk != 0U)
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d021      	beq.n	8007318 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007344 <UART_SetConfig+0x590>)
 80072da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072de:	461a      	mov	r2, r3
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	441a      	add	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	d909      	bls.n	8007312 <UART_SetConfig+0x55e>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d205      	bcs.n	8007312 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	b29a      	uxth	r2, r3
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	e002      	b.n	8007318 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2201      	movs	r2, #1
 800731c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2201      	movs	r2, #1
 8007324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2200      	movs	r2, #0
 800732c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2200      	movs	r2, #0
 8007332:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007334:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007338:	4618      	mov	r0, r3
 800733a:	3730      	adds	r7, #48	@ 0x30
 800733c:	46bd      	mov	sp, r7
 800733e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007342:	bf00      	nop
 8007344:	0800a4ac 	.word	0x0800a4ac
 8007348:	00f42400 	.word	0x00f42400

0800734c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01a      	beq.n	8007462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800744a:	d10a      	bne.n	8007462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
  }
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b098      	sub	sp, #96	@ 0x60
 8007494:	af02      	add	r7, sp, #8
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074a0:	f7fa ff98 	bl	80023d4 <HAL_GetTick>
 80074a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d12f      	bne.n	8007514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074bc:	2200      	movs	r2, #0
 80074be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f88e 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d022      	beq.n	8007514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e063      	b.n	80075dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	2b04      	cmp	r3, #4
 8007520:	d149      	bne.n	80075b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007522:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800752a:	2200      	movs	r2, #0
 800752c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f857 	bl	80075e4 <UART_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d03c      	beq.n	80075b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	623b      	str	r3, [r7, #32]
   return(result);
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800755a:	633b      	str	r3, [r7, #48]	@ 0x30
 800755c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	60fb      	str	r3, [r7, #12]
   return(result);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800758e:	61fa      	str	r2, [r7, #28]
 8007590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	69b9      	ldr	r1, [r7, #24]
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	617b      	str	r3, [r7, #20]
   return(result);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e012      	b.n	80075dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3758      	adds	r7, #88	@ 0x58
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f4:	e04f      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075fc:	d04b      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fe:	f7fa fee9 	bl	80023d4 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	429a      	cmp	r2, r3
 800760c:	d302      	bcc.n	8007614 <UART_WaitOnFlagUntilTimeout+0x30>
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e04e      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d037      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b80      	cmp	r3, #128	@ 0x80
 800762a:	d034      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b40      	cmp	r3, #64	@ 0x40
 8007630:	d031      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b08      	cmp	r3, #8
 800763e:	d110      	bne.n	8007662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2208      	movs	r2, #8
 8007646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f838 	bl	80076be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2208      	movs	r2, #8
 8007652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e029      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800766c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007670:	d111      	bne.n	8007696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800767a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f81e 	bl	80076be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e00f      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4013      	ands	r3, r2
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d0a0      	beq.n	80075f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076be:	b480      	push	{r7}
 80076c0:	b095      	sub	sp, #84	@ 0x54
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	61fb      	str	r3, [r7, #28]
   return(result);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800771c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800771e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e3      	bne.n	80076f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d118      	bne.n	800776a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	60bb      	str	r3, [r7, #8]
   return(result);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f023 0310 	bic.w	r3, r3, #16
 800774c:	647b      	str	r3, [r7, #68]	@ 0x44
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007756:	61bb      	str	r3, [r7, #24]
 8007758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6979      	ldr	r1, [r7, #20]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	613b      	str	r3, [r7, #16]
   return(result);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800777e:	bf00      	nop
 8007780:	3754      	adds	r7, #84	@ 0x54
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff faf1 	bl	8006d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b088      	sub	sp, #32
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	61bb      	str	r3, [r7, #24]
 80077d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	6979      	ldr	r1, [r7, #20]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	613b      	str	r3, [r7, #16]
   return(result);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e6      	bne.n	80077b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fabc 	bl	8006d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077fc:	bf00      	nop
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_UARTEx_DisableFifoMode+0x16>
 8007852:	2302      	movs	r3, #2
 8007854:	e027      	b.n	80078a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	@ 0x24
 8007862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0201 	bic.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007884:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e02d      	b.n	8007926 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2224      	movs	r2, #36	@ 0x24
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0201 	bic.w	r2, r2, #1
 80078f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f850 	bl	80079ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007942:	2302      	movs	r3, #2
 8007944:	e02d      	b.n	80079a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2224      	movs	r2, #36	@ 0x24
 8007952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0201 	bic.w	r2, r2, #1
 800796c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f812 	bl	80079ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d108      	bne.n	80079ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079cc:	e031      	b.n	8007a32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ce:	2308      	movs	r3, #8
 80079d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079d2:	2308      	movs	r3, #8
 80079d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	0e5b      	lsrs	r3, r3, #25
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	0f5b      	lsrs	r3, r3, #29
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	7b3a      	ldrb	r2, [r7, #12]
 80079fa:	4911      	ldr	r1, [pc, #68]	@ (8007a40 <UARTEx_SetNbDataToProcess+0x94>)
 80079fc:	5c8a      	ldrb	r2, [r1, r2]
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a02:	7b3a      	ldrb	r2, [r7, #12]
 8007a04:	490f      	ldr	r1, [pc, #60]	@ (8007a44 <UARTEx_SetNbDataToProcess+0x98>)
 8007a06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	7b7a      	ldrb	r2, [r7, #13]
 8007a18:	4909      	ldr	r1, [pc, #36]	@ (8007a40 <UARTEx_SetNbDataToProcess+0x94>)
 8007a1a:	5c8a      	ldrb	r2, [r1, r2]
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a20:	7b7a      	ldrb	r2, [r7, #13]
 8007a22:	4908      	ldr	r1, [pc, #32]	@ (8007a44 <UARTEx_SetNbDataToProcess+0x98>)
 8007a24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	0800a4c4 	.word	0x0800a4c4
 8007a44:	0800a4cc 	.word	0x0800a4cc

08007a48 <malloc>:
 8007a48:	4b02      	ldr	r3, [pc, #8]	@ (8007a54 <malloc+0xc>)
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	f000 b825 	b.w	8007a9c <_malloc_r>
 8007a52:	bf00      	nop
 8007a54:	20000018 	.word	0x20000018

08007a58 <sbrk_aligned>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8007a98 <sbrk_aligned+0x40>)
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	6831      	ldr	r1, [r6, #0]
 8007a60:	4605      	mov	r5, r0
 8007a62:	b911      	cbnz	r1, 8007a6a <sbrk_aligned+0x12>
 8007a64:	f000 ff48 	bl	80088f8 <_sbrk_r>
 8007a68:	6030      	str	r0, [r6, #0]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 ff43 	bl	80088f8 <_sbrk_r>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d103      	bne.n	8007a7e <sbrk_aligned+0x26>
 8007a76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
 8007a7e:	1cc4      	adds	r4, r0, #3
 8007a80:	f024 0403 	bic.w	r4, r4, #3
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d0f8      	beq.n	8007a7a <sbrk_aligned+0x22>
 8007a88:	1a21      	subs	r1, r4, r0
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f000 ff34 	bl	80088f8 <_sbrk_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	d1f2      	bne.n	8007a7a <sbrk_aligned+0x22>
 8007a94:	e7ef      	b.n	8007a76 <sbrk_aligned+0x1e>
 8007a96:	bf00      	nop
 8007a98:	20000614 	.word	0x20000614

08007a9c <_malloc_r>:
 8007a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	1ccd      	adds	r5, r1, #3
 8007aa2:	f025 0503 	bic.w	r5, r5, #3
 8007aa6:	3508      	adds	r5, #8
 8007aa8:	2d0c      	cmp	r5, #12
 8007aaa:	bf38      	it	cc
 8007aac:	250c      	movcc	r5, #12
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	db01      	blt.n	8007ab8 <_malloc_r+0x1c>
 8007ab4:	42a9      	cmp	r1, r5
 8007ab6:	d904      	bls.n	8007ac2 <_malloc_r+0x26>
 8007ab8:	230c      	movs	r3, #12
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	2000      	movs	r0, #0
 8007abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b98 <_malloc_r+0xfc>
 8007ac6:	f000 f869 	bl	8007b9c <__malloc_lock>
 8007aca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ace:	461c      	mov	r4, r3
 8007ad0:	bb44      	cbnz	r4, 8007b24 <_malloc_r+0x88>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff ffbf 	bl	8007a58 <sbrk_aligned>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	4604      	mov	r4, r0
 8007ade:	d158      	bne.n	8007b92 <_malloc_r+0xf6>
 8007ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ae4:	4627      	mov	r7, r4
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	d143      	bne.n	8007b72 <_malloc_r+0xd6>
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d04b      	beq.n	8007b86 <_malloc_r+0xea>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	4639      	mov	r1, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	eb04 0903 	add.w	r9, r4, r3
 8007af8:	f000 fefe 	bl	80088f8 <_sbrk_r>
 8007afc:	4581      	cmp	r9, r0
 8007afe:	d142      	bne.n	8007b86 <_malloc_r+0xea>
 8007b00:	6821      	ldr	r1, [r4, #0]
 8007b02:	1a6d      	subs	r5, r5, r1
 8007b04:	4629      	mov	r1, r5
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ffa6 	bl	8007a58 <sbrk_aligned>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d03a      	beq.n	8007b86 <_malloc_r+0xea>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	442b      	add	r3, r5
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	bb62      	cbnz	r2, 8007b78 <_malloc_r+0xdc>
 8007b1e:	f8c8 7000 	str.w	r7, [r8]
 8007b22:	e00f      	b.n	8007b44 <_malloc_r+0xa8>
 8007b24:	6822      	ldr	r2, [r4, #0]
 8007b26:	1b52      	subs	r2, r2, r5
 8007b28:	d420      	bmi.n	8007b6c <_malloc_r+0xd0>
 8007b2a:	2a0b      	cmp	r2, #11
 8007b2c:	d917      	bls.n	8007b5e <_malloc_r+0xc2>
 8007b2e:	1961      	adds	r1, r4, r5
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	6025      	str	r5, [r4, #0]
 8007b34:	bf18      	it	ne
 8007b36:	6059      	strne	r1, [r3, #4]
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	bf08      	it	eq
 8007b3c:	f8c8 1000 	streq.w	r1, [r8]
 8007b40:	5162      	str	r2, [r4, r5]
 8007b42:	604b      	str	r3, [r1, #4]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f82f 	bl	8007ba8 <__malloc_unlock>
 8007b4a:	f104 000b 	add.w	r0, r4, #11
 8007b4e:	1d23      	adds	r3, r4, #4
 8007b50:	f020 0007 	bic.w	r0, r0, #7
 8007b54:	1ac2      	subs	r2, r0, r3
 8007b56:	bf1c      	itt	ne
 8007b58:	1a1b      	subne	r3, r3, r0
 8007b5a:	50a3      	strne	r3, [r4, r2]
 8007b5c:	e7af      	b.n	8007abe <_malloc_r+0x22>
 8007b5e:	6862      	ldr	r2, [r4, #4]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	bf0c      	ite	eq
 8007b64:	f8c8 2000 	streq.w	r2, [r8]
 8007b68:	605a      	strne	r2, [r3, #4]
 8007b6a:	e7eb      	b.n	8007b44 <_malloc_r+0xa8>
 8007b6c:	4623      	mov	r3, r4
 8007b6e:	6864      	ldr	r4, [r4, #4]
 8007b70:	e7ae      	b.n	8007ad0 <_malloc_r+0x34>
 8007b72:	463c      	mov	r4, r7
 8007b74:	687f      	ldr	r7, [r7, #4]
 8007b76:	e7b6      	b.n	8007ae6 <_malloc_r+0x4a>
 8007b78:	461a      	mov	r2, r3
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d1fb      	bne.n	8007b78 <_malloc_r+0xdc>
 8007b80:	2300      	movs	r3, #0
 8007b82:	6053      	str	r3, [r2, #4]
 8007b84:	e7de      	b.n	8007b44 <_malloc_r+0xa8>
 8007b86:	230c      	movs	r3, #12
 8007b88:	6033      	str	r3, [r6, #0]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f000 f80c 	bl	8007ba8 <__malloc_unlock>
 8007b90:	e794      	b.n	8007abc <_malloc_r+0x20>
 8007b92:	6005      	str	r5, [r0, #0]
 8007b94:	e7d6      	b.n	8007b44 <_malloc_r+0xa8>
 8007b96:	bf00      	nop
 8007b98:	20000618 	.word	0x20000618

08007b9c <__malloc_lock>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	@ (8007ba4 <__malloc_lock+0x8>)
 8007b9e:	f000 bef8 	b.w	8008992 <__retarget_lock_acquire_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	2000075c 	.word	0x2000075c

08007ba8 <__malloc_unlock>:
 8007ba8:	4801      	ldr	r0, [pc, #4]	@ (8007bb0 <__malloc_unlock+0x8>)
 8007baa:	f000 bef3 	b.w	8008994 <__retarget_lock_release_recursive>
 8007bae:	bf00      	nop
 8007bb0:	2000075c 	.word	0x2000075c

08007bb4 <__cvt>:
 8007bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	ec57 6b10 	vmov	r6, r7, d0
 8007bbc:	2f00      	cmp	r7, #0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	bfbb      	ittet	lt
 8007bc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bca:	461f      	movlt	r7, r3
 8007bcc:	2300      	movge	r3, #0
 8007bce:	232d      	movlt	r3, #45	@ 0x2d
 8007bd0:	700b      	strb	r3, [r1, #0]
 8007bd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bd4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007bd8:	4691      	mov	r9, r2
 8007bda:	f023 0820 	bic.w	r8, r3, #32
 8007bde:	bfbc      	itt	lt
 8007be0:	4632      	movlt	r2, r6
 8007be2:	4616      	movlt	r6, r2
 8007be4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007be8:	d005      	beq.n	8007bf6 <__cvt+0x42>
 8007bea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bee:	d100      	bne.n	8007bf2 <__cvt+0x3e>
 8007bf0:	3401      	adds	r4, #1
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	e000      	b.n	8007bf8 <__cvt+0x44>
 8007bf6:	2103      	movs	r1, #3
 8007bf8:	ab03      	add	r3, sp, #12
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	ab02      	add	r3, sp, #8
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	ec47 6b10 	vmov	d0, r6, r7
 8007c04:	4653      	mov	r3, sl
 8007c06:	4622      	mov	r2, r4
 8007c08:	f000 ff5e 	bl	8008ac8 <_dtoa_r>
 8007c0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c10:	4605      	mov	r5, r0
 8007c12:	d119      	bne.n	8007c48 <__cvt+0x94>
 8007c14:	f019 0f01 	tst.w	r9, #1
 8007c18:	d00e      	beq.n	8007c38 <__cvt+0x84>
 8007c1a:	eb00 0904 	add.w	r9, r0, r4
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2300      	movs	r3, #0
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 ff77 	bl	8000b18 <__aeabi_dcmpeq>
 8007c2a:	b108      	cbz	r0, 8007c30 <__cvt+0x7c>
 8007c2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c30:	2230      	movs	r2, #48	@ 0x30
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	454b      	cmp	r3, r9
 8007c36:	d31e      	bcc.n	8007c76 <__cvt+0xc2>
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c3c:	1b5b      	subs	r3, r3, r5
 8007c3e:	4628      	mov	r0, r5
 8007c40:	6013      	str	r3, [r2, #0]
 8007c42:	b004      	add	sp, #16
 8007c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c4c:	eb00 0904 	add.w	r9, r0, r4
 8007c50:	d1e5      	bne.n	8007c1e <__cvt+0x6a>
 8007c52:	7803      	ldrb	r3, [r0, #0]
 8007c54:	2b30      	cmp	r3, #48	@ 0x30
 8007c56:	d10a      	bne.n	8007c6e <__cvt+0xba>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f7f8 ff5a 	bl	8000b18 <__aeabi_dcmpeq>
 8007c64:	b918      	cbnz	r0, 8007c6e <__cvt+0xba>
 8007c66:	f1c4 0401 	rsb	r4, r4, #1
 8007c6a:	f8ca 4000 	str.w	r4, [sl]
 8007c6e:	f8da 3000 	ldr.w	r3, [sl]
 8007c72:	4499      	add	r9, r3
 8007c74:	e7d3      	b.n	8007c1e <__cvt+0x6a>
 8007c76:	1c59      	adds	r1, r3, #1
 8007c78:	9103      	str	r1, [sp, #12]
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	e7d9      	b.n	8007c32 <__cvt+0x7e>

08007c7e <__exponent>:
 8007c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c80:	2900      	cmp	r1, #0
 8007c82:	bfba      	itte	lt
 8007c84:	4249      	neglt	r1, r1
 8007c86:	232d      	movlt	r3, #45	@ 0x2d
 8007c88:	232b      	movge	r3, #43	@ 0x2b
 8007c8a:	2909      	cmp	r1, #9
 8007c8c:	7002      	strb	r2, [r0, #0]
 8007c8e:	7043      	strb	r3, [r0, #1]
 8007c90:	dd29      	ble.n	8007ce6 <__exponent+0x68>
 8007c92:	f10d 0307 	add.w	r3, sp, #7
 8007c96:	461d      	mov	r5, r3
 8007c98:	270a      	movs	r7, #10
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ca0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ca4:	3430      	adds	r4, #48	@ 0x30
 8007ca6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007caa:	460c      	mov	r4, r1
 8007cac:	2c63      	cmp	r4, #99	@ 0x63
 8007cae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	dcf1      	bgt.n	8007c9a <__exponent+0x1c>
 8007cb6:	3130      	adds	r1, #48	@ 0x30
 8007cb8:	1e94      	subs	r4, r2, #2
 8007cba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cbe:	1c41      	adds	r1, r0, #1
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	42ab      	cmp	r3, r5
 8007cc4:	d30a      	bcc.n	8007cdc <__exponent+0x5e>
 8007cc6:	f10d 0309 	add.w	r3, sp, #9
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	42ac      	cmp	r4, r5
 8007cce:	bf88      	it	hi
 8007cd0:	2300      	movhi	r3, #0
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	4403      	add	r3, r0
 8007cd6:	1a18      	subs	r0, r3, r0
 8007cd8:	b003      	add	sp, #12
 8007cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ce0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ce4:	e7ed      	b.n	8007cc2 <__exponent+0x44>
 8007ce6:	2330      	movs	r3, #48	@ 0x30
 8007ce8:	3130      	adds	r1, #48	@ 0x30
 8007cea:	7083      	strb	r3, [r0, #2]
 8007cec:	70c1      	strb	r1, [r0, #3]
 8007cee:	1d03      	adds	r3, r0, #4
 8007cf0:	e7f1      	b.n	8007cd6 <__exponent+0x58>
	...

08007cf4 <_printf_float>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	b08d      	sub	sp, #52	@ 0x34
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d00:	4616      	mov	r6, r2
 8007d02:	461f      	mov	r7, r3
 8007d04:	4605      	mov	r5, r0
 8007d06:	f000 fdbf 	bl	8008888 <_localeconv_r>
 8007d0a:	6803      	ldr	r3, [r0, #0]
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7f8 fad6 	bl	80002c0 <strlen>
 8007d14:	2300      	movs	r3, #0
 8007d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d18:	f8d8 3000 	ldr.w	r3, [r8]
 8007d1c:	9005      	str	r0, [sp, #20]
 8007d1e:	3307      	adds	r3, #7
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	f103 0208 	add.w	r2, r3, #8
 8007d28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d2c:	f8d4 b000 	ldr.w	fp, [r4]
 8007d30:	f8c8 2000 	str.w	r2, [r8]
 8007d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d3c:	9307      	str	r3, [sp, #28]
 8007d3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8007fbc <_printf_float+0x2c8>)
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d50:	f7f8 ff14 	bl	8000b7c <__aeabi_dcmpun>
 8007d54:	bb70      	cbnz	r0, 8007db4 <_printf_float+0xc0>
 8007d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5a:	4b98      	ldr	r3, [pc, #608]	@ (8007fbc <_printf_float+0x2c8>)
 8007d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d60:	f7f8 feee 	bl	8000b40 <__aeabi_dcmple>
 8007d64:	bb30      	cbnz	r0, 8007db4 <_printf_float+0xc0>
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fedd 	bl	8000b2c <__aeabi_dcmplt>
 8007d72:	b110      	cbz	r0, 8007d7a <_printf_float+0x86>
 8007d74:	232d      	movs	r3, #45	@ 0x2d
 8007d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d7a:	4a91      	ldr	r2, [pc, #580]	@ (8007fc0 <_printf_float+0x2cc>)
 8007d7c:	4b91      	ldr	r3, [pc, #580]	@ (8007fc4 <_printf_float+0x2d0>)
 8007d7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d82:	bf94      	ite	ls
 8007d84:	4690      	movls	r8, r2
 8007d86:	4698      	movhi	r8, r3
 8007d88:	2303      	movs	r3, #3
 8007d8a:	6123      	str	r3, [r4, #16]
 8007d8c:	f02b 0304 	bic.w	r3, fp, #4
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	f04f 0900 	mov.w	r9, #0
 8007d96:	9700      	str	r7, [sp, #0]
 8007d98:	4633      	mov	r3, r6
 8007d9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f000 f9d2 	bl	8008148 <_printf_common>
 8007da4:	3001      	adds	r0, #1
 8007da6:	f040 808d 	bne.w	8007ec4 <_printf_float+0x1d0>
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dae:	b00d      	add	sp, #52	@ 0x34
 8007db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fede 	bl	8000b7c <__aeabi_dcmpun>
 8007dc0:	b140      	cbz	r0, 8007dd4 <_printf_float+0xe0>
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfbc      	itt	lt
 8007dc8:	232d      	movlt	r3, #45	@ 0x2d
 8007dca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dce:	4a7e      	ldr	r2, [pc, #504]	@ (8007fc8 <_printf_float+0x2d4>)
 8007dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8007fcc <_printf_float+0x2d8>)
 8007dd2:	e7d4      	b.n	8007d7e <_printf_float+0x8a>
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007dda:	9206      	str	r2, [sp, #24]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	d13b      	bne.n	8007e58 <_printf_float+0x164>
 8007de0:	2306      	movs	r3, #6
 8007de2:	6063      	str	r3, [r4, #4]
 8007de4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007de8:	2300      	movs	r3, #0
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	9303      	str	r3, [sp, #12]
 8007dee:	ab0a      	add	r3, sp, #40	@ 0x28
 8007df0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007df4:	ab09      	add	r3, sp, #36	@ 0x24
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	6861      	ldr	r1, [r4, #4]
 8007dfa:	ec49 8b10 	vmov	d0, r8, r9
 8007dfe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7ff fed6 	bl	8007bb4 <__cvt>
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e0c:	2b47      	cmp	r3, #71	@ 0x47
 8007e0e:	4680      	mov	r8, r0
 8007e10:	d129      	bne.n	8007e66 <_printf_float+0x172>
 8007e12:	1cc8      	adds	r0, r1, #3
 8007e14:	db02      	blt.n	8007e1c <_printf_float+0x128>
 8007e16:	6863      	ldr	r3, [r4, #4]
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	dd41      	ble.n	8007ea0 <_printf_float+0x1ac>
 8007e1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e20:	fa5f fa8a 	uxtb.w	sl, sl
 8007e24:	3901      	subs	r1, #1
 8007e26:	4652      	mov	r2, sl
 8007e28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e2e:	f7ff ff26 	bl	8007c7e <__exponent>
 8007e32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e34:	1813      	adds	r3, r2, r0
 8007e36:	2a01      	cmp	r2, #1
 8007e38:	4681      	mov	r9, r0
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	dc02      	bgt.n	8007e44 <_printf_float+0x150>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	07d2      	lsls	r2, r2, #31
 8007e42:	d501      	bpl.n	8007e48 <_printf_float+0x154>
 8007e44:	3301      	adds	r3, #1
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0a2      	beq.n	8007d96 <_printf_float+0xa2>
 8007e50:	232d      	movs	r3, #45	@ 0x2d
 8007e52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e56:	e79e      	b.n	8007d96 <_printf_float+0xa2>
 8007e58:	9a06      	ldr	r2, [sp, #24]
 8007e5a:	2a47      	cmp	r2, #71	@ 0x47
 8007e5c:	d1c2      	bne.n	8007de4 <_printf_float+0xf0>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1c0      	bne.n	8007de4 <_printf_float+0xf0>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e7bd      	b.n	8007de2 <_printf_float+0xee>
 8007e66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e6a:	d9db      	bls.n	8007e24 <_printf_float+0x130>
 8007e6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e70:	d118      	bne.n	8007ea4 <_printf_float+0x1b0>
 8007e72:	2900      	cmp	r1, #0
 8007e74:	6863      	ldr	r3, [r4, #4]
 8007e76:	dd0b      	ble.n	8007e90 <_printf_float+0x19c>
 8007e78:	6121      	str	r1, [r4, #16]
 8007e7a:	b913      	cbnz	r3, 8007e82 <_printf_float+0x18e>
 8007e7c:	6822      	ldr	r2, [r4, #0]
 8007e7e:	07d0      	lsls	r0, r2, #31
 8007e80:	d502      	bpl.n	8007e88 <_printf_float+0x194>
 8007e82:	3301      	adds	r3, #1
 8007e84:	440b      	add	r3, r1
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	e7db      	b.n	8007e48 <_printf_float+0x154>
 8007e90:	b913      	cbnz	r3, 8007e98 <_printf_float+0x1a4>
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	07d2      	lsls	r2, r2, #31
 8007e96:	d501      	bpl.n	8007e9c <_printf_float+0x1a8>
 8007e98:	3302      	adds	r3, #2
 8007e9a:	e7f4      	b.n	8007e86 <_printf_float+0x192>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7f2      	b.n	8007e86 <_printf_float+0x192>
 8007ea0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ea6:	4299      	cmp	r1, r3
 8007ea8:	db05      	blt.n	8007eb6 <_printf_float+0x1c2>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	6121      	str	r1, [r4, #16]
 8007eae:	07d8      	lsls	r0, r3, #31
 8007eb0:	d5ea      	bpl.n	8007e88 <_printf_float+0x194>
 8007eb2:	1c4b      	adds	r3, r1, #1
 8007eb4:	e7e7      	b.n	8007e86 <_printf_float+0x192>
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	bfd4      	ite	le
 8007eba:	f1c1 0202 	rsble	r2, r1, #2
 8007ebe:	2201      	movgt	r2, #1
 8007ec0:	4413      	add	r3, r2
 8007ec2:	e7e0      	b.n	8007e86 <_printf_float+0x192>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	055a      	lsls	r2, r3, #21
 8007ec8:	d407      	bmi.n	8007eda <_printf_float+0x1e6>
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	4642      	mov	r2, r8
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	47b8      	blx	r7
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d12b      	bne.n	8007f30 <_printf_float+0x23c>
 8007ed8:	e767      	b.n	8007daa <_printf_float+0xb6>
 8007eda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ede:	f240 80dd 	bls.w	800809c <_printf_float+0x3a8>
 8007ee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f7f8 fe15 	bl	8000b18 <__aeabi_dcmpeq>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d033      	beq.n	8007f5a <_printf_float+0x266>
 8007ef2:	4a37      	ldr	r2, [pc, #220]	@ (8007fd0 <_printf_float+0x2dc>)
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f af54 	beq.w	8007daa <_printf_float+0xb6>
 8007f02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f06:	4543      	cmp	r3, r8
 8007f08:	db02      	blt.n	8007f10 <_printf_float+0x21c>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	07d8      	lsls	r0, r3, #31
 8007f0e:	d50f      	bpl.n	8007f30 <_printf_float+0x23c>
 8007f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f af45 	beq.w	8007daa <_printf_float+0xb6>
 8007f20:	f04f 0900 	mov.w	r9, #0
 8007f24:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007f28:	f104 0a1a 	add.w	sl, r4, #26
 8007f2c:	45c8      	cmp	r8, r9
 8007f2e:	dc09      	bgt.n	8007f44 <_printf_float+0x250>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	079b      	lsls	r3, r3, #30
 8007f34:	f100 8103 	bmi.w	800813e <_printf_float+0x44a>
 8007f38:	68e0      	ldr	r0, [r4, #12]
 8007f3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	bfb8      	it	lt
 8007f40:	4618      	movlt	r0, r3
 8007f42:	e734      	b.n	8007dae <_printf_float+0xba>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4652      	mov	r2, sl
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f af2b 	beq.w	8007daa <_printf_float+0xb6>
 8007f54:	f109 0901 	add.w	r9, r9, #1
 8007f58:	e7e8      	b.n	8007f2c <_printf_float+0x238>
 8007f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc39      	bgt.n	8007fd4 <_printf_float+0x2e0>
 8007f60:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd0 <_printf_float+0x2dc>)
 8007f62:	2301      	movs	r3, #1
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f43f af1d 	beq.w	8007daa <_printf_float+0xb6>
 8007f70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f74:	ea59 0303 	orrs.w	r3, r9, r3
 8007f78:	d102      	bne.n	8007f80 <_printf_float+0x28c>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	07d9      	lsls	r1, r3, #31
 8007f7e:	d5d7      	bpl.n	8007f30 <_printf_float+0x23c>
 8007f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af0d 	beq.w	8007daa <_printf_float+0xb6>
 8007f90:	f04f 0a00 	mov.w	sl, #0
 8007f94:	f104 0b1a 	add.w	fp, r4, #26
 8007f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9a:	425b      	negs	r3, r3
 8007f9c:	4553      	cmp	r3, sl
 8007f9e:	dc01      	bgt.n	8007fa4 <_printf_float+0x2b0>
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	e793      	b.n	8007ecc <_printf_float+0x1d8>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	465a      	mov	r2, fp
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f aefb 	beq.w	8007daa <_printf_float+0xb6>
 8007fb4:	f10a 0a01 	add.w	sl, sl, #1
 8007fb8:	e7ee      	b.n	8007f98 <_printf_float+0x2a4>
 8007fba:	bf00      	nop
 8007fbc:	7fefffff 	.word	0x7fefffff
 8007fc0:	0800a4d4 	.word	0x0800a4d4
 8007fc4:	0800a4d8 	.word	0x0800a4d8
 8007fc8:	0800a4dc 	.word	0x0800a4dc
 8007fcc:	0800a4e0 	.word	0x0800a4e0
 8007fd0:	0800a4e4 	.word	0x0800a4e4
 8007fd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fda:	4553      	cmp	r3, sl
 8007fdc:	bfa8      	it	ge
 8007fde:	4653      	movge	r3, sl
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	4699      	mov	r9, r3
 8007fe4:	dc36      	bgt.n	8008054 <_printf_float+0x360>
 8007fe6:	f04f 0b00 	mov.w	fp, #0
 8007fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fee:	f104 021a 	add.w	r2, r4, #26
 8007ff2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ff4:	9306      	str	r3, [sp, #24]
 8007ff6:	eba3 0309 	sub.w	r3, r3, r9
 8007ffa:	455b      	cmp	r3, fp
 8007ffc:	dc31      	bgt.n	8008062 <_printf_float+0x36e>
 8007ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008000:	459a      	cmp	sl, r3
 8008002:	dc3a      	bgt.n	800807a <_printf_float+0x386>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	07da      	lsls	r2, r3, #31
 8008008:	d437      	bmi.n	800807a <_printf_float+0x386>
 800800a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800c:	ebaa 0903 	sub.w	r9, sl, r3
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	ebaa 0303 	sub.w	r3, sl, r3
 8008016:	4599      	cmp	r9, r3
 8008018:	bfa8      	it	ge
 800801a:	4699      	movge	r9, r3
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	dc33      	bgt.n	800808a <_printf_float+0x396>
 8008022:	f04f 0800 	mov.w	r8, #0
 8008026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802a:	f104 0b1a 	add.w	fp, r4, #26
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	ebaa 0303 	sub.w	r3, sl, r3
 8008034:	eba3 0309 	sub.w	r3, r3, r9
 8008038:	4543      	cmp	r3, r8
 800803a:	f77f af79 	ble.w	8007f30 <_printf_float+0x23c>
 800803e:	2301      	movs	r3, #1
 8008040:	465a      	mov	r2, fp
 8008042:	4631      	mov	r1, r6
 8008044:	4628      	mov	r0, r5
 8008046:	47b8      	blx	r7
 8008048:	3001      	adds	r0, #1
 800804a:	f43f aeae 	beq.w	8007daa <_printf_float+0xb6>
 800804e:	f108 0801 	add.w	r8, r8, #1
 8008052:	e7ec      	b.n	800802e <_printf_float+0x33a>
 8008054:	4642      	mov	r2, r8
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	d1c2      	bne.n	8007fe6 <_printf_float+0x2f2>
 8008060:	e6a3      	b.n	8007daa <_printf_float+0xb6>
 8008062:	2301      	movs	r3, #1
 8008064:	4631      	mov	r1, r6
 8008066:	4628      	mov	r0, r5
 8008068:	9206      	str	r2, [sp, #24]
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f ae9c 	beq.w	8007daa <_printf_float+0xb6>
 8008072:	9a06      	ldr	r2, [sp, #24]
 8008074:	f10b 0b01 	add.w	fp, fp, #1
 8008078:	e7bb      	b.n	8007ff2 <_printf_float+0x2fe>
 800807a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	d1c0      	bne.n	800800a <_printf_float+0x316>
 8008088:	e68f      	b.n	8007daa <_printf_float+0xb6>
 800808a:	9a06      	ldr	r2, [sp, #24]
 800808c:	464b      	mov	r3, r9
 800808e:	4442      	add	r2, r8
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	d1c3      	bne.n	8008022 <_printf_float+0x32e>
 800809a:	e686      	b.n	8007daa <_printf_float+0xb6>
 800809c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080a0:	f1ba 0f01 	cmp.w	sl, #1
 80080a4:	dc01      	bgt.n	80080aa <_printf_float+0x3b6>
 80080a6:	07db      	lsls	r3, r3, #31
 80080a8:	d536      	bpl.n	8008118 <_printf_float+0x424>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4642      	mov	r2, r8
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae78 	beq.w	8007daa <_printf_float+0xb6>
 80080ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f ae70 	beq.w	8007daa <_printf_float+0xb6>
 80080ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080ce:	2200      	movs	r2, #0
 80080d0:	2300      	movs	r3, #0
 80080d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80080d6:	f7f8 fd1f 	bl	8000b18 <__aeabi_dcmpeq>
 80080da:	b9c0      	cbnz	r0, 800810e <_printf_float+0x41a>
 80080dc:	4653      	mov	r3, sl
 80080de:	f108 0201 	add.w	r2, r8, #1
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	d10c      	bne.n	8008106 <_printf_float+0x412>
 80080ec:	e65d      	b.n	8007daa <_printf_float+0xb6>
 80080ee:	2301      	movs	r3, #1
 80080f0:	465a      	mov	r2, fp
 80080f2:	4631      	mov	r1, r6
 80080f4:	4628      	mov	r0, r5
 80080f6:	47b8      	blx	r7
 80080f8:	3001      	adds	r0, #1
 80080fa:	f43f ae56 	beq.w	8007daa <_printf_float+0xb6>
 80080fe:	f108 0801 	add.w	r8, r8, #1
 8008102:	45d0      	cmp	r8, sl
 8008104:	dbf3      	blt.n	80080ee <_printf_float+0x3fa>
 8008106:	464b      	mov	r3, r9
 8008108:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800810c:	e6df      	b.n	8007ece <_printf_float+0x1da>
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	f104 0b1a 	add.w	fp, r4, #26
 8008116:	e7f4      	b.n	8008102 <_printf_float+0x40e>
 8008118:	2301      	movs	r3, #1
 800811a:	4642      	mov	r2, r8
 800811c:	e7e1      	b.n	80080e2 <_printf_float+0x3ee>
 800811e:	2301      	movs	r3, #1
 8008120:	464a      	mov	r2, r9
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae3e 	beq.w	8007daa <_printf_float+0xb6>
 800812e:	f108 0801 	add.w	r8, r8, #1
 8008132:	68e3      	ldr	r3, [r4, #12]
 8008134:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008136:	1a5b      	subs	r3, r3, r1
 8008138:	4543      	cmp	r3, r8
 800813a:	dcf0      	bgt.n	800811e <_printf_float+0x42a>
 800813c:	e6fc      	b.n	8007f38 <_printf_float+0x244>
 800813e:	f04f 0800 	mov.w	r8, #0
 8008142:	f104 0919 	add.w	r9, r4, #25
 8008146:	e7f4      	b.n	8008132 <_printf_float+0x43e>

08008148 <_printf_common>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	4616      	mov	r6, r2
 800814e:	4698      	mov	r8, r3
 8008150:	688a      	ldr	r2, [r1, #8]
 8008152:	690b      	ldr	r3, [r1, #16]
 8008154:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008158:	4293      	cmp	r3, r2
 800815a:	bfb8      	it	lt
 800815c:	4613      	movlt	r3, r2
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008164:	4607      	mov	r7, r0
 8008166:	460c      	mov	r4, r1
 8008168:	b10a      	cbz	r2, 800816e <_printf_common+0x26>
 800816a:	3301      	adds	r3, #1
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	0699      	lsls	r1, r3, #26
 8008172:	bf42      	ittt	mi
 8008174:	6833      	ldrmi	r3, [r6, #0]
 8008176:	3302      	addmi	r3, #2
 8008178:	6033      	strmi	r3, [r6, #0]
 800817a:	6825      	ldr	r5, [r4, #0]
 800817c:	f015 0506 	ands.w	r5, r5, #6
 8008180:	d106      	bne.n	8008190 <_printf_common+0x48>
 8008182:	f104 0a19 	add.w	sl, r4, #25
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	6832      	ldr	r2, [r6, #0]
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	42ab      	cmp	r3, r5
 800818e:	dc26      	bgt.n	80081de <_printf_common+0x96>
 8008190:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	3b00      	subs	r3, #0
 8008198:	bf18      	it	ne
 800819a:	2301      	movne	r3, #1
 800819c:	0692      	lsls	r2, r2, #26
 800819e:	d42b      	bmi.n	80081f8 <_printf_common+0xb0>
 80081a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081a4:	4641      	mov	r1, r8
 80081a6:	4638      	mov	r0, r7
 80081a8:	47c8      	blx	r9
 80081aa:	3001      	adds	r0, #1
 80081ac:	d01e      	beq.n	80081ec <_printf_common+0xa4>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	6922      	ldr	r2, [r4, #16]
 80081b2:	f003 0306 	and.w	r3, r3, #6
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	bf02      	ittt	eq
 80081ba:	68e5      	ldreq	r5, [r4, #12]
 80081bc:	6833      	ldreq	r3, [r6, #0]
 80081be:	1aed      	subeq	r5, r5, r3
 80081c0:	68a3      	ldr	r3, [r4, #8]
 80081c2:	bf0c      	ite	eq
 80081c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081c8:	2500      	movne	r5, #0
 80081ca:	4293      	cmp	r3, r2
 80081cc:	bfc4      	itt	gt
 80081ce:	1a9b      	subgt	r3, r3, r2
 80081d0:	18ed      	addgt	r5, r5, r3
 80081d2:	2600      	movs	r6, #0
 80081d4:	341a      	adds	r4, #26
 80081d6:	42b5      	cmp	r5, r6
 80081d8:	d11a      	bne.n	8008210 <_printf_common+0xc8>
 80081da:	2000      	movs	r0, #0
 80081dc:	e008      	b.n	80081f0 <_printf_common+0xa8>
 80081de:	2301      	movs	r3, #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	4641      	mov	r1, r8
 80081e4:	4638      	mov	r0, r7
 80081e6:	47c8      	blx	r9
 80081e8:	3001      	adds	r0, #1
 80081ea:	d103      	bne.n	80081f4 <_printf_common+0xac>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f4:	3501      	adds	r5, #1
 80081f6:	e7c6      	b.n	8008186 <_printf_common+0x3e>
 80081f8:	18e1      	adds	r1, r4, r3
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	2030      	movs	r0, #48	@ 0x30
 80081fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008202:	4422      	add	r2, r4
 8008204:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008208:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800820c:	3302      	adds	r3, #2
 800820e:	e7c7      	b.n	80081a0 <_printf_common+0x58>
 8008210:	2301      	movs	r3, #1
 8008212:	4622      	mov	r2, r4
 8008214:	4641      	mov	r1, r8
 8008216:	4638      	mov	r0, r7
 8008218:	47c8      	blx	r9
 800821a:	3001      	adds	r0, #1
 800821c:	d0e6      	beq.n	80081ec <_printf_common+0xa4>
 800821e:	3601      	adds	r6, #1
 8008220:	e7d9      	b.n	80081d6 <_printf_common+0x8e>
	...

08008224 <_printf_i>:
 8008224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	7e0f      	ldrb	r7, [r1, #24]
 800822a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800822c:	2f78      	cmp	r7, #120	@ 0x78
 800822e:	4691      	mov	r9, r2
 8008230:	4680      	mov	r8, r0
 8008232:	460c      	mov	r4, r1
 8008234:	469a      	mov	sl, r3
 8008236:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800823a:	d807      	bhi.n	800824c <_printf_i+0x28>
 800823c:	2f62      	cmp	r7, #98	@ 0x62
 800823e:	d80a      	bhi.n	8008256 <_printf_i+0x32>
 8008240:	2f00      	cmp	r7, #0
 8008242:	f000 80d2 	beq.w	80083ea <_printf_i+0x1c6>
 8008246:	2f58      	cmp	r7, #88	@ 0x58
 8008248:	f000 80b9 	beq.w	80083be <_printf_i+0x19a>
 800824c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008250:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008254:	e03a      	b.n	80082cc <_printf_i+0xa8>
 8008256:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800825a:	2b15      	cmp	r3, #21
 800825c:	d8f6      	bhi.n	800824c <_printf_i+0x28>
 800825e:	a101      	add	r1, pc, #4	@ (adr r1, 8008264 <_printf_i+0x40>)
 8008260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008264:	080082bd 	.word	0x080082bd
 8008268:	080082d1 	.word	0x080082d1
 800826c:	0800824d 	.word	0x0800824d
 8008270:	0800824d 	.word	0x0800824d
 8008274:	0800824d 	.word	0x0800824d
 8008278:	0800824d 	.word	0x0800824d
 800827c:	080082d1 	.word	0x080082d1
 8008280:	0800824d 	.word	0x0800824d
 8008284:	0800824d 	.word	0x0800824d
 8008288:	0800824d 	.word	0x0800824d
 800828c:	0800824d 	.word	0x0800824d
 8008290:	080083d1 	.word	0x080083d1
 8008294:	080082fb 	.word	0x080082fb
 8008298:	0800838b 	.word	0x0800838b
 800829c:	0800824d 	.word	0x0800824d
 80082a0:	0800824d 	.word	0x0800824d
 80082a4:	080083f3 	.word	0x080083f3
 80082a8:	0800824d 	.word	0x0800824d
 80082ac:	080082fb 	.word	0x080082fb
 80082b0:	0800824d 	.word	0x0800824d
 80082b4:	0800824d 	.word	0x0800824d
 80082b8:	08008393 	.word	0x08008393
 80082bc:	6833      	ldr	r3, [r6, #0]
 80082be:	1d1a      	adds	r2, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6032      	str	r2, [r6, #0]
 80082c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082cc:	2301      	movs	r3, #1
 80082ce:	e09d      	b.n	800840c <_printf_i+0x1e8>
 80082d0:	6833      	ldr	r3, [r6, #0]
 80082d2:	6820      	ldr	r0, [r4, #0]
 80082d4:	1d19      	adds	r1, r3, #4
 80082d6:	6031      	str	r1, [r6, #0]
 80082d8:	0606      	lsls	r6, r0, #24
 80082da:	d501      	bpl.n	80082e0 <_printf_i+0xbc>
 80082dc:	681d      	ldr	r5, [r3, #0]
 80082de:	e003      	b.n	80082e8 <_printf_i+0xc4>
 80082e0:	0645      	lsls	r5, r0, #25
 80082e2:	d5fb      	bpl.n	80082dc <_printf_i+0xb8>
 80082e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xd0>
 80082ec:	232d      	movs	r3, #45	@ 0x2d
 80082ee:	426d      	negs	r5, r5
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f4:	4859      	ldr	r0, [pc, #356]	@ (800845c <_printf_i+0x238>)
 80082f6:	230a      	movs	r3, #10
 80082f8:	e011      	b.n	800831e <_printf_i+0xfa>
 80082fa:	6821      	ldr	r1, [r4, #0]
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	0608      	lsls	r0, r1, #24
 8008300:	f853 5b04 	ldr.w	r5, [r3], #4
 8008304:	d402      	bmi.n	800830c <_printf_i+0xe8>
 8008306:	0649      	lsls	r1, r1, #25
 8008308:	bf48      	it	mi
 800830a:	b2ad      	uxthmi	r5, r5
 800830c:	2f6f      	cmp	r7, #111	@ 0x6f
 800830e:	4853      	ldr	r0, [pc, #332]	@ (800845c <_printf_i+0x238>)
 8008310:	6033      	str	r3, [r6, #0]
 8008312:	bf14      	ite	ne
 8008314:	230a      	movne	r3, #10
 8008316:	2308      	moveq	r3, #8
 8008318:	2100      	movs	r1, #0
 800831a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800831e:	6866      	ldr	r6, [r4, #4]
 8008320:	60a6      	str	r6, [r4, #8]
 8008322:	2e00      	cmp	r6, #0
 8008324:	bfa2      	ittt	ge
 8008326:	6821      	ldrge	r1, [r4, #0]
 8008328:	f021 0104 	bicge.w	r1, r1, #4
 800832c:	6021      	strge	r1, [r4, #0]
 800832e:	b90d      	cbnz	r5, 8008334 <_printf_i+0x110>
 8008330:	2e00      	cmp	r6, #0
 8008332:	d04b      	beq.n	80083cc <_printf_i+0x1a8>
 8008334:	4616      	mov	r6, r2
 8008336:	fbb5 f1f3 	udiv	r1, r5, r3
 800833a:	fb03 5711 	mls	r7, r3, r1, r5
 800833e:	5dc7      	ldrb	r7, [r0, r7]
 8008340:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008344:	462f      	mov	r7, r5
 8008346:	42bb      	cmp	r3, r7
 8008348:	460d      	mov	r5, r1
 800834a:	d9f4      	bls.n	8008336 <_printf_i+0x112>
 800834c:	2b08      	cmp	r3, #8
 800834e:	d10b      	bne.n	8008368 <_printf_i+0x144>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07df      	lsls	r7, r3, #31
 8008354:	d508      	bpl.n	8008368 <_printf_i+0x144>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	6861      	ldr	r1, [r4, #4]
 800835a:	4299      	cmp	r1, r3
 800835c:	bfde      	ittt	le
 800835e:	2330      	movle	r3, #48	@ 0x30
 8008360:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008364:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008368:	1b92      	subs	r2, r2, r6
 800836a:	6122      	str	r2, [r4, #16]
 800836c:	f8cd a000 	str.w	sl, [sp]
 8008370:	464b      	mov	r3, r9
 8008372:	aa03      	add	r2, sp, #12
 8008374:	4621      	mov	r1, r4
 8008376:	4640      	mov	r0, r8
 8008378:	f7ff fee6 	bl	8008148 <_printf_common>
 800837c:	3001      	adds	r0, #1
 800837e:	d14a      	bne.n	8008416 <_printf_i+0x1f2>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008384:	b004      	add	sp, #16
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	f043 0320 	orr.w	r3, r3, #32
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	4833      	ldr	r0, [pc, #204]	@ (8008460 <_printf_i+0x23c>)
 8008394:	2778      	movs	r7, #120	@ 0x78
 8008396:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	6831      	ldr	r1, [r6, #0]
 800839e:	061f      	lsls	r7, r3, #24
 80083a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0x188>
 80083a6:	065f      	lsls	r7, r3, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	6031      	str	r1, [r6, #0]
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	bf44      	itt	mi
 80083b2:	f043 0320 	orrmi.w	r3, r3, #32
 80083b6:	6023      	strmi	r3, [r4, #0]
 80083b8:	b11d      	cbz	r5, 80083c2 <_printf_i+0x19e>
 80083ba:	2310      	movs	r3, #16
 80083bc:	e7ac      	b.n	8008318 <_printf_i+0xf4>
 80083be:	4827      	ldr	r0, [pc, #156]	@ (800845c <_printf_i+0x238>)
 80083c0:	e7e9      	b.n	8008396 <_printf_i+0x172>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	f023 0320 	bic.w	r3, r3, #32
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	e7f6      	b.n	80083ba <_printf_i+0x196>
 80083cc:	4616      	mov	r6, r2
 80083ce:	e7bd      	b.n	800834c <_printf_i+0x128>
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	6825      	ldr	r5, [r4, #0]
 80083d4:	6961      	ldr	r1, [r4, #20]
 80083d6:	1d18      	adds	r0, r3, #4
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	062e      	lsls	r6, r5, #24
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	d501      	bpl.n	80083e4 <_printf_i+0x1c0>
 80083e0:	6019      	str	r1, [r3, #0]
 80083e2:	e002      	b.n	80083ea <_printf_i+0x1c6>
 80083e4:	0668      	lsls	r0, r5, #25
 80083e6:	d5fb      	bpl.n	80083e0 <_printf_i+0x1bc>
 80083e8:	8019      	strh	r1, [r3, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	6123      	str	r3, [r4, #16]
 80083ee:	4616      	mov	r6, r2
 80083f0:	e7bc      	b.n	800836c <_printf_i+0x148>
 80083f2:	6833      	ldr	r3, [r6, #0]
 80083f4:	1d1a      	adds	r2, r3, #4
 80083f6:	6032      	str	r2, [r6, #0]
 80083f8:	681e      	ldr	r6, [r3, #0]
 80083fa:	6862      	ldr	r2, [r4, #4]
 80083fc:	2100      	movs	r1, #0
 80083fe:	4630      	mov	r0, r6
 8008400:	f7f7 ff0e 	bl	8000220 <memchr>
 8008404:	b108      	cbz	r0, 800840a <_printf_i+0x1e6>
 8008406:	1b80      	subs	r0, r0, r6
 8008408:	6060      	str	r0, [r4, #4]
 800840a:	6863      	ldr	r3, [r4, #4]
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	2300      	movs	r3, #0
 8008410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008414:	e7aa      	b.n	800836c <_printf_i+0x148>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	4632      	mov	r2, r6
 800841a:	4649      	mov	r1, r9
 800841c:	4640      	mov	r0, r8
 800841e:	47d0      	blx	sl
 8008420:	3001      	adds	r0, #1
 8008422:	d0ad      	beq.n	8008380 <_printf_i+0x15c>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	079b      	lsls	r3, r3, #30
 8008428:	d413      	bmi.n	8008452 <_printf_i+0x22e>
 800842a:	68e0      	ldr	r0, [r4, #12]
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	4298      	cmp	r0, r3
 8008430:	bfb8      	it	lt
 8008432:	4618      	movlt	r0, r3
 8008434:	e7a6      	b.n	8008384 <_printf_i+0x160>
 8008436:	2301      	movs	r3, #1
 8008438:	4632      	mov	r2, r6
 800843a:	4649      	mov	r1, r9
 800843c:	4640      	mov	r0, r8
 800843e:	47d0      	blx	sl
 8008440:	3001      	adds	r0, #1
 8008442:	d09d      	beq.n	8008380 <_printf_i+0x15c>
 8008444:	3501      	adds	r5, #1
 8008446:	68e3      	ldr	r3, [r4, #12]
 8008448:	9903      	ldr	r1, [sp, #12]
 800844a:	1a5b      	subs	r3, r3, r1
 800844c:	42ab      	cmp	r3, r5
 800844e:	dcf2      	bgt.n	8008436 <_printf_i+0x212>
 8008450:	e7eb      	b.n	800842a <_printf_i+0x206>
 8008452:	2500      	movs	r5, #0
 8008454:	f104 0619 	add.w	r6, r4, #25
 8008458:	e7f5      	b.n	8008446 <_printf_i+0x222>
 800845a:	bf00      	nop
 800845c:	0800a4e6 	.word	0x0800a4e6
 8008460:	0800a4f7 	.word	0x0800a4f7

08008464 <std>:
 8008464:	2300      	movs	r3, #0
 8008466:	b510      	push	{r4, lr}
 8008468:	4604      	mov	r4, r0
 800846a:	e9c0 3300 	strd	r3, r3, [r0]
 800846e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008472:	6083      	str	r3, [r0, #8]
 8008474:	8181      	strh	r1, [r0, #12]
 8008476:	6643      	str	r3, [r0, #100]	@ 0x64
 8008478:	81c2      	strh	r2, [r0, #14]
 800847a:	6183      	str	r3, [r0, #24]
 800847c:	4619      	mov	r1, r3
 800847e:	2208      	movs	r2, #8
 8008480:	305c      	adds	r0, #92	@ 0x5c
 8008482:	f000 f9f9 	bl	8008878 <memset>
 8008486:	4b0d      	ldr	r3, [pc, #52]	@ (80084bc <std+0x58>)
 8008488:	6263      	str	r3, [r4, #36]	@ 0x24
 800848a:	4b0d      	ldr	r3, [pc, #52]	@ (80084c0 <std+0x5c>)
 800848c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <std+0x60>)
 8008490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <std+0x64>)
 8008494:	6323      	str	r3, [r4, #48]	@ 0x30
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <std+0x68>)
 8008498:	6224      	str	r4, [r4, #32]
 800849a:	429c      	cmp	r4, r3
 800849c:	d006      	beq.n	80084ac <std+0x48>
 800849e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084a2:	4294      	cmp	r4, r2
 80084a4:	d002      	beq.n	80084ac <std+0x48>
 80084a6:	33d0      	adds	r3, #208	@ 0xd0
 80084a8:	429c      	cmp	r4, r3
 80084aa:	d105      	bne.n	80084b8 <std+0x54>
 80084ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b4:	f000 ba6c 	b.w	8008990 <__retarget_lock_init_recursive>
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	bf00      	nop
 80084bc:	080086c9 	.word	0x080086c9
 80084c0:	080086eb 	.word	0x080086eb
 80084c4:	08008723 	.word	0x08008723
 80084c8:	08008747 	.word	0x08008747
 80084cc:	2000061c 	.word	0x2000061c

080084d0 <stdio_exit_handler>:
 80084d0:	4a02      	ldr	r2, [pc, #8]	@ (80084dc <stdio_exit_handler+0xc>)
 80084d2:	4903      	ldr	r1, [pc, #12]	@ (80084e0 <stdio_exit_handler+0x10>)
 80084d4:	4803      	ldr	r0, [pc, #12]	@ (80084e4 <stdio_exit_handler+0x14>)
 80084d6:	f000 b869 	b.w	80085ac <_fwalk_sglue>
 80084da:	bf00      	nop
 80084dc:	2000000c 	.word	0x2000000c
 80084e0:	0800a175 	.word	0x0800a175
 80084e4:	2000001c 	.word	0x2000001c

080084e8 <cleanup_stdio>:
 80084e8:	6841      	ldr	r1, [r0, #4]
 80084ea:	4b0c      	ldr	r3, [pc, #48]	@ (800851c <cleanup_stdio+0x34>)
 80084ec:	4299      	cmp	r1, r3
 80084ee:	b510      	push	{r4, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	d001      	beq.n	80084f8 <cleanup_stdio+0x10>
 80084f4:	f001 fe3e 	bl	800a174 <_fflush_r>
 80084f8:	68a1      	ldr	r1, [r4, #8]
 80084fa:	4b09      	ldr	r3, [pc, #36]	@ (8008520 <cleanup_stdio+0x38>)
 80084fc:	4299      	cmp	r1, r3
 80084fe:	d002      	beq.n	8008506 <cleanup_stdio+0x1e>
 8008500:	4620      	mov	r0, r4
 8008502:	f001 fe37 	bl	800a174 <_fflush_r>
 8008506:	68e1      	ldr	r1, [r4, #12]
 8008508:	4b06      	ldr	r3, [pc, #24]	@ (8008524 <cleanup_stdio+0x3c>)
 800850a:	4299      	cmp	r1, r3
 800850c:	d004      	beq.n	8008518 <cleanup_stdio+0x30>
 800850e:	4620      	mov	r0, r4
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f001 be2e 	b.w	800a174 <_fflush_r>
 8008518:	bd10      	pop	{r4, pc}
 800851a:	bf00      	nop
 800851c:	2000061c 	.word	0x2000061c
 8008520:	20000684 	.word	0x20000684
 8008524:	200006ec 	.word	0x200006ec

08008528 <global_stdio_init.part.0>:
 8008528:	b510      	push	{r4, lr}
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <global_stdio_init.part.0+0x30>)
 800852c:	4c0b      	ldr	r4, [pc, #44]	@ (800855c <global_stdio_init.part.0+0x34>)
 800852e:	4a0c      	ldr	r2, [pc, #48]	@ (8008560 <global_stdio_init.part.0+0x38>)
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	4620      	mov	r0, r4
 8008534:	2200      	movs	r2, #0
 8008536:	2104      	movs	r1, #4
 8008538:	f7ff ff94 	bl	8008464 <std>
 800853c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008540:	2201      	movs	r2, #1
 8008542:	2109      	movs	r1, #9
 8008544:	f7ff ff8e 	bl	8008464 <std>
 8008548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800854c:	2202      	movs	r2, #2
 800854e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008552:	2112      	movs	r1, #18
 8008554:	f7ff bf86 	b.w	8008464 <std>
 8008558:	20000754 	.word	0x20000754
 800855c:	2000061c 	.word	0x2000061c
 8008560:	080084d1 	.word	0x080084d1

08008564 <__sfp_lock_acquire>:
 8008564:	4801      	ldr	r0, [pc, #4]	@ (800856c <__sfp_lock_acquire+0x8>)
 8008566:	f000 ba14 	b.w	8008992 <__retarget_lock_acquire_recursive>
 800856a:	bf00      	nop
 800856c:	2000075d 	.word	0x2000075d

08008570 <__sfp_lock_release>:
 8008570:	4801      	ldr	r0, [pc, #4]	@ (8008578 <__sfp_lock_release+0x8>)
 8008572:	f000 ba0f 	b.w	8008994 <__retarget_lock_release_recursive>
 8008576:	bf00      	nop
 8008578:	2000075d 	.word	0x2000075d

0800857c <__sinit>:
 800857c:	b510      	push	{r4, lr}
 800857e:	4604      	mov	r4, r0
 8008580:	f7ff fff0 	bl	8008564 <__sfp_lock_acquire>
 8008584:	6a23      	ldr	r3, [r4, #32]
 8008586:	b11b      	cbz	r3, 8008590 <__sinit+0x14>
 8008588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858c:	f7ff bff0 	b.w	8008570 <__sfp_lock_release>
 8008590:	4b04      	ldr	r3, [pc, #16]	@ (80085a4 <__sinit+0x28>)
 8008592:	6223      	str	r3, [r4, #32]
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <__sinit+0x2c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f5      	bne.n	8008588 <__sinit+0xc>
 800859c:	f7ff ffc4 	bl	8008528 <global_stdio_init.part.0>
 80085a0:	e7f2      	b.n	8008588 <__sinit+0xc>
 80085a2:	bf00      	nop
 80085a4:	080084e9 	.word	0x080084e9
 80085a8:	20000754 	.word	0x20000754

080085ac <_fwalk_sglue>:
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	4607      	mov	r7, r0
 80085b2:	4688      	mov	r8, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	2600      	movs	r6, #0
 80085b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085bc:	f1b9 0901 	subs.w	r9, r9, #1
 80085c0:	d505      	bpl.n	80085ce <_fwalk_sglue+0x22>
 80085c2:	6824      	ldr	r4, [r4, #0]
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	d1f7      	bne.n	80085b8 <_fwalk_sglue+0xc>
 80085c8:	4630      	mov	r0, r6
 80085ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d907      	bls.n	80085e4 <_fwalk_sglue+0x38>
 80085d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085d8:	3301      	adds	r3, #1
 80085da:	d003      	beq.n	80085e4 <_fwalk_sglue+0x38>
 80085dc:	4629      	mov	r1, r5
 80085de:	4638      	mov	r0, r7
 80085e0:	47c0      	blx	r8
 80085e2:	4306      	orrs	r6, r0
 80085e4:	3568      	adds	r5, #104	@ 0x68
 80085e6:	e7e9      	b.n	80085bc <_fwalk_sglue+0x10>

080085e8 <iprintf>:
 80085e8:	b40f      	push	{r0, r1, r2, r3}
 80085ea:	b507      	push	{r0, r1, r2, lr}
 80085ec:	4906      	ldr	r1, [pc, #24]	@ (8008608 <iprintf+0x20>)
 80085ee:	ab04      	add	r3, sp, #16
 80085f0:	6808      	ldr	r0, [r1, #0]
 80085f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f6:	6881      	ldr	r1, [r0, #8]
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	f001 fc1f 	bl	8009e3c <_vfiprintf_r>
 80085fe:	b003      	add	sp, #12
 8008600:	f85d eb04 	ldr.w	lr, [sp], #4
 8008604:	b004      	add	sp, #16
 8008606:	4770      	bx	lr
 8008608:	20000018 	.word	0x20000018

0800860c <_puts_r>:
 800860c:	6a03      	ldr	r3, [r0, #32]
 800860e:	b570      	push	{r4, r5, r6, lr}
 8008610:	6884      	ldr	r4, [r0, #8]
 8008612:	4605      	mov	r5, r0
 8008614:	460e      	mov	r6, r1
 8008616:	b90b      	cbnz	r3, 800861c <_puts_r+0x10>
 8008618:	f7ff ffb0 	bl	800857c <__sinit>
 800861c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800861e:	07db      	lsls	r3, r3, #31
 8008620:	d405      	bmi.n	800862e <_puts_r+0x22>
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	0598      	lsls	r0, r3, #22
 8008626:	d402      	bmi.n	800862e <_puts_r+0x22>
 8008628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800862a:	f000 f9b2 	bl	8008992 <__retarget_lock_acquire_recursive>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	0719      	lsls	r1, r3, #28
 8008632:	d502      	bpl.n	800863a <_puts_r+0x2e>
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d135      	bne.n	80086a6 <_puts_r+0x9a>
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f000 f8c5 	bl	80087cc <__swsetup_r>
 8008642:	b380      	cbz	r0, 80086a6 <_puts_r+0x9a>
 8008644:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800864a:	07da      	lsls	r2, r3, #31
 800864c:	d405      	bmi.n	800865a <_puts_r+0x4e>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	059b      	lsls	r3, r3, #22
 8008652:	d402      	bmi.n	800865a <_puts_r+0x4e>
 8008654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008656:	f000 f99d 	bl	8008994 <__retarget_lock_release_recursive>
 800865a:	4628      	mov	r0, r5
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	2b00      	cmp	r3, #0
 8008660:	da04      	bge.n	800866c <_puts_r+0x60>
 8008662:	69a2      	ldr	r2, [r4, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	dc17      	bgt.n	8008698 <_puts_r+0x8c>
 8008668:	290a      	cmp	r1, #10
 800866a:	d015      	beq.n	8008698 <_puts_r+0x8c>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	7019      	strb	r1, [r3, #0]
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800867a:	3b01      	subs	r3, #1
 800867c:	60a3      	str	r3, [r4, #8]
 800867e:	2900      	cmp	r1, #0
 8008680:	d1ed      	bne.n	800865e <_puts_r+0x52>
 8008682:	2b00      	cmp	r3, #0
 8008684:	da11      	bge.n	80086aa <_puts_r+0x9e>
 8008686:	4622      	mov	r2, r4
 8008688:	210a      	movs	r1, #10
 800868a:	4628      	mov	r0, r5
 800868c:	f000 f85f 	bl	800874e <__swbuf_r>
 8008690:	3001      	adds	r0, #1
 8008692:	d0d7      	beq.n	8008644 <_puts_r+0x38>
 8008694:	250a      	movs	r5, #10
 8008696:	e7d7      	b.n	8008648 <_puts_r+0x3c>
 8008698:	4622      	mov	r2, r4
 800869a:	4628      	mov	r0, r5
 800869c:	f000 f857 	bl	800874e <__swbuf_r>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1e7      	bne.n	8008674 <_puts_r+0x68>
 80086a4:	e7ce      	b.n	8008644 <_puts_r+0x38>
 80086a6:	3e01      	subs	r6, #1
 80086a8:	e7e4      	b.n	8008674 <_puts_r+0x68>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	220a      	movs	r2, #10
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	e7ee      	b.n	8008694 <_puts_r+0x88>
	...

080086b8 <puts>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	@ (80086c4 <puts+0xc>)
 80086ba:	4601      	mov	r1, r0
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f7ff bfa5 	b.w	800860c <_puts_r>
 80086c2:	bf00      	nop
 80086c4:	20000018 	.word	0x20000018

080086c8 <__sread>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	460c      	mov	r4, r1
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	f000 f900 	bl	80088d4 <_read_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	bfab      	itete	ge
 80086d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086da:	89a3      	ldrhlt	r3, [r4, #12]
 80086dc:	181b      	addge	r3, r3, r0
 80086de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086e2:	bfac      	ite	ge
 80086e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086e6:	81a3      	strhlt	r3, [r4, #12]
 80086e8:	bd10      	pop	{r4, pc}

080086ea <__swrite>:
 80086ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ee:	461f      	mov	r7, r3
 80086f0:	898b      	ldrh	r3, [r1, #12]
 80086f2:	05db      	lsls	r3, r3, #23
 80086f4:	4605      	mov	r5, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	4616      	mov	r6, r2
 80086fa:	d505      	bpl.n	8008708 <__swrite+0x1e>
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	2302      	movs	r3, #2
 8008702:	2200      	movs	r2, #0
 8008704:	f000 f8d4 	bl	80088b0 <_lseek_r>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	4632      	mov	r2, r6
 8008716:	463b      	mov	r3, r7
 8008718:	4628      	mov	r0, r5
 800871a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871e:	f000 b8fb 	b.w	8008918 <_write_r>

08008722 <__sseek>:
 8008722:	b510      	push	{r4, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872a:	f000 f8c1 	bl	80088b0 <_lseek_r>
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	bf15      	itete	ne
 8008734:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800873a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800873e:	81a3      	strheq	r3, [r4, #12]
 8008740:	bf18      	it	ne
 8008742:	81a3      	strhne	r3, [r4, #12]
 8008744:	bd10      	pop	{r4, pc}

08008746 <__sclose>:
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 b8a1 	b.w	8008890 <_close_r>

0800874e <__swbuf_r>:
 800874e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008750:	460e      	mov	r6, r1
 8008752:	4614      	mov	r4, r2
 8008754:	4605      	mov	r5, r0
 8008756:	b118      	cbz	r0, 8008760 <__swbuf_r+0x12>
 8008758:	6a03      	ldr	r3, [r0, #32]
 800875a:	b90b      	cbnz	r3, 8008760 <__swbuf_r+0x12>
 800875c:	f7ff ff0e 	bl	800857c <__sinit>
 8008760:	69a3      	ldr	r3, [r4, #24]
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	071a      	lsls	r2, r3, #28
 8008768:	d501      	bpl.n	800876e <__swbuf_r+0x20>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	b943      	cbnz	r3, 8008780 <__swbuf_r+0x32>
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f000 f82b 	bl	80087cc <__swsetup_r>
 8008776:	b118      	cbz	r0, 8008780 <__swbuf_r+0x32>
 8008778:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800877c:	4638      	mov	r0, r7
 800877e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	6922      	ldr	r2, [r4, #16]
 8008784:	1a98      	subs	r0, r3, r2
 8008786:	6963      	ldr	r3, [r4, #20]
 8008788:	b2f6      	uxtb	r6, r6
 800878a:	4283      	cmp	r3, r0
 800878c:	4637      	mov	r7, r6
 800878e:	dc05      	bgt.n	800879c <__swbuf_r+0x4e>
 8008790:	4621      	mov	r1, r4
 8008792:	4628      	mov	r0, r5
 8008794:	f001 fcee 	bl	800a174 <_fflush_r>
 8008798:	2800      	cmp	r0, #0
 800879a:	d1ed      	bne.n	8008778 <__swbuf_r+0x2a>
 800879c:	68a3      	ldr	r3, [r4, #8]
 800879e:	3b01      	subs	r3, #1
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	1c5a      	adds	r2, r3, #1
 80087a6:	6022      	str	r2, [r4, #0]
 80087a8:	701e      	strb	r6, [r3, #0]
 80087aa:	6962      	ldr	r2, [r4, #20]
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d004      	beq.n	80087bc <__swbuf_r+0x6e>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	07db      	lsls	r3, r3, #31
 80087b6:	d5e1      	bpl.n	800877c <__swbuf_r+0x2e>
 80087b8:	2e0a      	cmp	r6, #10
 80087ba:	d1df      	bne.n	800877c <__swbuf_r+0x2e>
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f001 fcd8 	bl	800a174 <_fflush_r>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d0d9      	beq.n	800877c <__swbuf_r+0x2e>
 80087c8:	e7d6      	b.n	8008778 <__swbuf_r+0x2a>
	...

080087cc <__swsetup_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4b29      	ldr	r3, [pc, #164]	@ (8008874 <__swsetup_r+0xa8>)
 80087d0:	4605      	mov	r5, r0
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	460c      	mov	r4, r1
 80087d6:	b118      	cbz	r0, 80087e0 <__swsetup_r+0x14>
 80087d8:	6a03      	ldr	r3, [r0, #32]
 80087da:	b90b      	cbnz	r3, 80087e0 <__swsetup_r+0x14>
 80087dc:	f7ff fece 	bl	800857c <__sinit>
 80087e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e4:	0719      	lsls	r1, r3, #28
 80087e6:	d422      	bmi.n	800882e <__swsetup_r+0x62>
 80087e8:	06da      	lsls	r2, r3, #27
 80087ea:	d407      	bmi.n	80087fc <__swsetup_r+0x30>
 80087ec:	2209      	movs	r2, #9
 80087ee:	602a      	str	r2, [r5, #0]
 80087f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087fa:	e033      	b.n	8008864 <__swsetup_r+0x98>
 80087fc:	0758      	lsls	r0, r3, #29
 80087fe:	d512      	bpl.n	8008826 <__swsetup_r+0x5a>
 8008800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008802:	b141      	cbz	r1, 8008816 <__swsetup_r+0x4a>
 8008804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008808:	4299      	cmp	r1, r3
 800880a:	d002      	beq.n	8008812 <__swsetup_r+0x46>
 800880c:	4628      	mov	r0, r5
 800880e:	f000 ff1f 	bl	8009650 <_free_r>
 8008812:	2300      	movs	r3, #0
 8008814:	6363      	str	r3, [r4, #52]	@ 0x34
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	2300      	movs	r3, #0
 8008820:	6063      	str	r3, [r4, #4]
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f043 0308 	orr.w	r3, r3, #8
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	b94b      	cbnz	r3, 8008846 <__swsetup_r+0x7a>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883c:	d003      	beq.n	8008846 <__swsetup_r+0x7a>
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f001 fce5 	bl	800a210 <__smakebuf_r>
 8008846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884a:	f013 0201 	ands.w	r2, r3, #1
 800884e:	d00a      	beq.n	8008866 <__swsetup_r+0x9a>
 8008850:	2200      	movs	r2, #0
 8008852:	60a2      	str	r2, [r4, #8]
 8008854:	6962      	ldr	r2, [r4, #20]
 8008856:	4252      	negs	r2, r2
 8008858:	61a2      	str	r2, [r4, #24]
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	b942      	cbnz	r2, 8008870 <__swsetup_r+0xa4>
 800885e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008862:	d1c5      	bne.n	80087f0 <__swsetup_r+0x24>
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	0799      	lsls	r1, r3, #30
 8008868:	bf58      	it	pl
 800886a:	6962      	ldrpl	r2, [r4, #20]
 800886c:	60a2      	str	r2, [r4, #8]
 800886e:	e7f4      	b.n	800885a <__swsetup_r+0x8e>
 8008870:	2000      	movs	r0, #0
 8008872:	e7f7      	b.n	8008864 <__swsetup_r+0x98>
 8008874:	20000018 	.word	0x20000018

08008878 <memset>:
 8008878:	4402      	add	r2, r0
 800887a:	4603      	mov	r3, r0
 800887c:	4293      	cmp	r3, r2
 800887e:	d100      	bne.n	8008882 <memset+0xa>
 8008880:	4770      	bx	lr
 8008882:	f803 1b01 	strb.w	r1, [r3], #1
 8008886:	e7f9      	b.n	800887c <memset+0x4>

08008888 <_localeconv_r>:
 8008888:	4800      	ldr	r0, [pc, #0]	@ (800888c <_localeconv_r+0x4>)
 800888a:	4770      	bx	lr
 800888c:	20000158 	.word	0x20000158

08008890 <_close_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4d06      	ldr	r5, [pc, #24]	@ (80088ac <_close_r+0x1c>)
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7f9 f9a6 	bl	8001bec <_close>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_close_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_close_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000758 	.word	0x20000758

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	@ (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f9 f9bb 	bl	8001c3a <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000758 	.word	0x20000758

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	@ (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f9 f949 	bl	8001b7a <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	20000758 	.word	0x20000758

080088f8 <_sbrk_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d06      	ldr	r5, [pc, #24]	@ (8008914 <_sbrk_r+0x1c>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f9 f9a6 	bl	8001c54 <_sbrk>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_sbrk_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_sbrk_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000758 	.word	0x20000758

08008918 <_write_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d07      	ldr	r5, [pc, #28]	@ (8008938 <_write_r+0x20>)
 800891c:	4604      	mov	r4, r0
 800891e:	4608      	mov	r0, r1
 8008920:	4611      	mov	r1, r2
 8008922:	2200      	movs	r2, #0
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f7f9 f944 	bl	8001bb4 <_write>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_write_r+0x1e>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_write_r+0x1e>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000758 	.word	0x20000758

0800893c <__errno>:
 800893c:	4b01      	ldr	r3, [pc, #4]	@ (8008944 <__errno+0x8>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000018 	.word	0x20000018

08008948 <__libc_init_array>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4d0d      	ldr	r5, [pc, #52]	@ (8008980 <__libc_init_array+0x38>)
 800894c:	4c0d      	ldr	r4, [pc, #52]	@ (8008984 <__libc_init_array+0x3c>)
 800894e:	1b64      	subs	r4, r4, r5
 8008950:	10a4      	asrs	r4, r4, #2
 8008952:	2600      	movs	r6, #0
 8008954:	42a6      	cmp	r6, r4
 8008956:	d109      	bne.n	800896c <__libc_init_array+0x24>
 8008958:	4d0b      	ldr	r5, [pc, #44]	@ (8008988 <__libc_init_array+0x40>)
 800895a:	4c0c      	ldr	r4, [pc, #48]	@ (800898c <__libc_init_array+0x44>)
 800895c:	f001 fd66 	bl	800a42c <_init>
 8008960:	1b64      	subs	r4, r4, r5
 8008962:	10a4      	asrs	r4, r4, #2
 8008964:	2600      	movs	r6, #0
 8008966:	42a6      	cmp	r6, r4
 8008968:	d105      	bne.n	8008976 <__libc_init_array+0x2e>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008970:	4798      	blx	r3
 8008972:	3601      	adds	r6, #1
 8008974:	e7ee      	b.n	8008954 <__libc_init_array+0xc>
 8008976:	f855 3b04 	ldr.w	r3, [r5], #4
 800897a:	4798      	blx	r3
 800897c:	3601      	adds	r6, #1
 800897e:	e7f2      	b.n	8008966 <__libc_init_array+0x1e>
 8008980:	0800a850 	.word	0x0800a850
 8008984:	0800a850 	.word	0x0800a850
 8008988:	0800a850 	.word	0x0800a850
 800898c:	0800a854 	.word	0x0800a854

08008990 <__retarget_lock_init_recursive>:
 8008990:	4770      	bx	lr

08008992 <__retarget_lock_acquire_recursive>:
 8008992:	4770      	bx	lr

08008994 <__retarget_lock_release_recursive>:
 8008994:	4770      	bx	lr

08008996 <memcpy>:
 8008996:	440a      	add	r2, r1
 8008998:	4291      	cmp	r1, r2
 800899a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800899e:	d100      	bne.n	80089a2 <memcpy+0xc>
 80089a0:	4770      	bx	lr
 80089a2:	b510      	push	{r4, lr}
 80089a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ac:	4291      	cmp	r1, r2
 80089ae:	d1f9      	bne.n	80089a4 <memcpy+0xe>
 80089b0:	bd10      	pop	{r4, pc}

080089b2 <quorem>:
 80089b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b6:	6903      	ldr	r3, [r0, #16]
 80089b8:	690c      	ldr	r4, [r1, #16]
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	4607      	mov	r7, r0
 80089be:	db7e      	blt.n	8008abe <quorem+0x10c>
 80089c0:	3c01      	subs	r4, #1
 80089c2:	f101 0814 	add.w	r8, r1, #20
 80089c6:	00a3      	lsls	r3, r4, #2
 80089c8:	f100 0514 	add.w	r5, r0, #20
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089dc:	3301      	adds	r3, #1
 80089de:	429a      	cmp	r2, r3
 80089e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089e8:	d32e      	bcc.n	8008a48 <quorem+0x96>
 80089ea:	f04f 0a00 	mov.w	sl, #0
 80089ee:	46c4      	mov	ip, r8
 80089f0:	46ae      	mov	lr, r5
 80089f2:	46d3      	mov	fp, sl
 80089f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089f8:	b298      	uxth	r0, r3
 80089fa:	fb06 a000 	mla	r0, r6, r0, sl
 80089fe:	0c02      	lsrs	r2, r0, #16
 8008a00:	0c1b      	lsrs	r3, r3, #16
 8008a02:	fb06 2303 	mla	r3, r6, r3, r2
 8008a06:	f8de 2000 	ldr.w	r2, [lr]
 8008a0a:	b280      	uxth	r0, r0
 8008a0c:	b292      	uxth	r2, r2
 8008a0e:	1a12      	subs	r2, r2, r0
 8008a10:	445a      	add	r2, fp
 8008a12:	f8de 0000 	ldr.w	r0, [lr]
 8008a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a24:	b292      	uxth	r2, r2
 8008a26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a2a:	45e1      	cmp	r9, ip
 8008a2c:	f84e 2b04 	str.w	r2, [lr], #4
 8008a30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a34:	d2de      	bcs.n	80089f4 <quorem+0x42>
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	58eb      	ldr	r3, [r5, r3]
 8008a3a:	b92b      	cbnz	r3, 8008a48 <quorem+0x96>
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	3b04      	subs	r3, #4
 8008a40:	429d      	cmp	r5, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	d32f      	bcc.n	8008aa6 <quorem+0xf4>
 8008a46:	613c      	str	r4, [r7, #16]
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f001 f8c5 	bl	8009bd8 <__mcmp>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	db25      	blt.n	8008a9e <quorem+0xec>
 8008a52:	4629      	mov	r1, r5
 8008a54:	2000      	movs	r0, #0
 8008a56:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a5a:	f8d1 c000 	ldr.w	ip, [r1]
 8008a5e:	fa1f fe82 	uxth.w	lr, r2
 8008a62:	fa1f f38c 	uxth.w	r3, ip
 8008a66:	eba3 030e 	sub.w	r3, r3, lr
 8008a6a:	4403      	add	r3, r0
 8008a6c:	0c12      	lsrs	r2, r2, #16
 8008a6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a7c:	45c1      	cmp	r9, r8
 8008a7e:	f841 3b04 	str.w	r3, [r1], #4
 8008a82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a86:	d2e6      	bcs.n	8008a56 <quorem+0xa4>
 8008a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a90:	b922      	cbnz	r2, 8008a9c <quorem+0xea>
 8008a92:	3b04      	subs	r3, #4
 8008a94:	429d      	cmp	r5, r3
 8008a96:	461a      	mov	r2, r3
 8008a98:	d30b      	bcc.n	8008ab2 <quorem+0x100>
 8008a9a:	613c      	str	r4, [r7, #16]
 8008a9c:	3601      	adds	r6, #1
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	b003      	add	sp, #12
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d1cb      	bne.n	8008a46 <quorem+0x94>
 8008aae:	3c01      	subs	r4, #1
 8008ab0:	e7c6      	b.n	8008a40 <quorem+0x8e>
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	d1ef      	bne.n	8008a9a <quorem+0xe8>
 8008aba:	3c01      	subs	r4, #1
 8008abc:	e7ea      	b.n	8008a94 <quorem+0xe2>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e7ee      	b.n	8008aa0 <quorem+0xee>
 8008ac2:	0000      	movs	r0, r0
 8008ac4:	0000      	movs	r0, r0
	...

08008ac8 <_dtoa_r>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	69c7      	ldr	r7, [r0, #28]
 8008ace:	b099      	sub	sp, #100	@ 0x64
 8008ad0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ad4:	ec55 4b10 	vmov	r4, r5, d0
 8008ad8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008ada:	9109      	str	r1, [sp, #36]	@ 0x24
 8008adc:	4683      	mov	fp, r0
 8008ade:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ae2:	b97f      	cbnz	r7, 8008b04 <_dtoa_r+0x3c>
 8008ae4:	2010      	movs	r0, #16
 8008ae6:	f7fe ffaf 	bl	8007a48 <malloc>
 8008aea:	4602      	mov	r2, r0
 8008aec:	f8cb 001c 	str.w	r0, [fp, #28]
 8008af0:	b920      	cbnz	r0, 8008afc <_dtoa_r+0x34>
 8008af2:	4ba7      	ldr	r3, [pc, #668]	@ (8008d90 <_dtoa_r+0x2c8>)
 8008af4:	21ef      	movs	r1, #239	@ 0xef
 8008af6:	48a7      	ldr	r0, [pc, #668]	@ (8008d94 <_dtoa_r+0x2cc>)
 8008af8:	f001 fbe8 	bl	800a2cc <__assert_func>
 8008afc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b00:	6007      	str	r7, [r0, #0]
 8008b02:	60c7      	str	r7, [r0, #12]
 8008b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b08:	6819      	ldr	r1, [r3, #0]
 8008b0a:	b159      	cbz	r1, 8008b24 <_dtoa_r+0x5c>
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	604a      	str	r2, [r1, #4]
 8008b10:	2301      	movs	r3, #1
 8008b12:	4093      	lsls	r3, r2
 8008b14:	608b      	str	r3, [r1, #8]
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 fe24 	bl	8009764 <_Bfree>
 8008b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	1e2b      	subs	r3, r5, #0
 8008b26:	bfb9      	ittee	lt
 8008b28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b2c:	9303      	strlt	r3, [sp, #12]
 8008b2e:	2300      	movge	r3, #0
 8008b30:	6033      	strge	r3, [r6, #0]
 8008b32:	9f03      	ldr	r7, [sp, #12]
 8008b34:	4b98      	ldr	r3, [pc, #608]	@ (8008d98 <_dtoa_r+0x2d0>)
 8008b36:	bfbc      	itt	lt
 8008b38:	2201      	movlt	r2, #1
 8008b3a:	6032      	strlt	r2, [r6, #0]
 8008b3c:	43bb      	bics	r3, r7
 8008b3e:	d112      	bne.n	8008b66 <_dtoa_r+0x9e>
 8008b40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b4c:	4323      	orrs	r3, r4
 8008b4e:	f000 854d 	beq.w	80095ec <_dtoa_r+0xb24>
 8008b52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008dac <_dtoa_r+0x2e4>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 854f 	beq.w	80095fc <_dtoa_r+0xb34>
 8008b5e:	f10a 0303 	add.w	r3, sl, #3
 8008b62:	f000 bd49 	b.w	80095f8 <_dtoa_r+0xb30>
 8008b66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	ec51 0b17 	vmov	r0, r1, d7
 8008b70:	2300      	movs	r3, #0
 8008b72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008b76:	f7f7 ffcf 	bl	8000b18 <__aeabi_dcmpeq>
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	b158      	cbz	r0, 8008b96 <_dtoa_r+0xce>
 8008b7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b80:	2301      	movs	r3, #1
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b86:	b113      	cbz	r3, 8008b8e <_dtoa_r+0xc6>
 8008b88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b8a:	4b84      	ldr	r3, [pc, #528]	@ (8008d9c <_dtoa_r+0x2d4>)
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008db0 <_dtoa_r+0x2e8>
 8008b92:	f000 bd33 	b.w	80095fc <_dtoa_r+0xb34>
 8008b96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b9a:	aa16      	add	r2, sp, #88	@ 0x58
 8008b9c:	a917      	add	r1, sp, #92	@ 0x5c
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f001 f8ca 	bl	8009d38 <__d2b>
 8008ba4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ba8:	4681      	mov	r9, r0
 8008baa:	2e00      	cmp	r6, #0
 8008bac:	d077      	beq.n	8008c9e <_dtoa_r+0x1d6>
 8008bae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008bc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008bc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008bc8:	4619      	mov	r1, r3
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4b74      	ldr	r3, [pc, #464]	@ (8008da0 <_dtoa_r+0x2d8>)
 8008bce:	f7f7 fb83 	bl	80002d8 <__aeabi_dsub>
 8008bd2:	a369      	add	r3, pc, #420	@ (adr r3, 8008d78 <_dtoa_r+0x2b0>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fd36 	bl	8000648 <__aeabi_dmul>
 8008bdc:	a368      	add	r3, pc, #416	@ (adr r3, 8008d80 <_dtoa_r+0x2b8>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f7f7 fb7b 	bl	80002dc <__adddf3>
 8008be6:	4604      	mov	r4, r0
 8008be8:	4630      	mov	r0, r6
 8008bea:	460d      	mov	r5, r1
 8008bec:	f7f7 fcc2 	bl	8000574 <__aeabi_i2d>
 8008bf0:	a365      	add	r3, pc, #404	@ (adr r3, 8008d88 <_dtoa_r+0x2c0>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fd27 	bl	8000648 <__aeabi_dmul>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4629      	mov	r1, r5
 8008c02:	f7f7 fb6b 	bl	80002dc <__adddf3>
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	f7f7 ffcd 	bl	8000ba8 <__aeabi_d2iz>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4607      	mov	r7, r0
 8008c12:	2300      	movs	r3, #0
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 ff88 	bl	8000b2c <__aeabi_dcmplt>
 8008c1c:	b140      	cbz	r0, 8008c30 <_dtoa_r+0x168>
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f7f7 fca8 	bl	8000574 <__aeabi_i2d>
 8008c24:	4622      	mov	r2, r4
 8008c26:	462b      	mov	r3, r5
 8008c28:	f7f7 ff76 	bl	8000b18 <__aeabi_dcmpeq>
 8008c2c:	b900      	cbnz	r0, 8008c30 <_dtoa_r+0x168>
 8008c2e:	3f01      	subs	r7, #1
 8008c30:	2f16      	cmp	r7, #22
 8008c32:	d851      	bhi.n	8008cd8 <_dtoa_r+0x210>
 8008c34:	4b5b      	ldr	r3, [pc, #364]	@ (8008da4 <_dtoa_r+0x2dc>)
 8008c36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c42:	f7f7 ff73 	bl	8000b2c <__aeabi_dcmplt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d048      	beq.n	8008cdc <_dtoa_r+0x214>
 8008c4a:	3f01      	subs	r7, #1
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c52:	1b9b      	subs	r3, r3, r6
 8008c54:	1e5a      	subs	r2, r3, #1
 8008c56:	bf44      	itt	mi
 8008c58:	f1c3 0801 	rsbmi	r8, r3, #1
 8008c5c:	2300      	movmi	r3, #0
 8008c5e:	9208      	str	r2, [sp, #32]
 8008c60:	bf54      	ite	pl
 8008c62:	f04f 0800 	movpl.w	r8, #0
 8008c66:	9308      	strmi	r3, [sp, #32]
 8008c68:	2f00      	cmp	r7, #0
 8008c6a:	db39      	blt.n	8008ce0 <_dtoa_r+0x218>
 8008c6c:	9b08      	ldr	r3, [sp, #32]
 8008c6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008c70:	443b      	add	r3, r7
 8008c72:	9308      	str	r3, [sp, #32]
 8008c74:	2300      	movs	r3, #0
 8008c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d864      	bhi.n	8008d48 <_dtoa_r+0x280>
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	bfc4      	itt	gt
 8008c82:	3b04      	subgt	r3, #4
 8008c84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	f1a3 0302 	sub.w	r3, r3, #2
 8008c8c:	bfcc      	ite	gt
 8008c8e:	2400      	movgt	r4, #0
 8008c90:	2401      	movle	r4, #1
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d863      	bhi.n	8008d5e <_dtoa_r+0x296>
 8008c96:	e8df f003 	tbb	[pc, r3]
 8008c9a:	372a      	.short	0x372a
 8008c9c:	5535      	.short	0x5535
 8008c9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008ca2:	441e      	add	r6, r3
 8008ca4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	bfc1      	itttt	gt
 8008cac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008cb0:	409f      	lslgt	r7, r3
 8008cb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008cb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008cba:	bfd6      	itet	le
 8008cbc:	f1c3 0320 	rsble	r3, r3, #32
 8008cc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008cc4:	fa04 f003 	lslle.w	r0, r4, r3
 8008cc8:	f7f7 fc44 	bl	8000554 <__aeabi_ui2d>
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008cd2:	3e01      	subs	r6, #1
 8008cd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008cd6:	e777      	b.n	8008bc8 <_dtoa_r+0x100>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e7b8      	b.n	8008c4e <_dtoa_r+0x186>
 8008cdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008cde:	e7b7      	b.n	8008c50 <_dtoa_r+0x188>
 8008ce0:	427b      	negs	r3, r7
 8008ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	eba8 0807 	sub.w	r8, r8, r7
 8008cea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cec:	e7c4      	b.n	8008c78 <_dtoa_r+0x1b0>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dc35      	bgt.n	8008d64 <_dtoa_r+0x29c>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	9307      	str	r3, [sp, #28]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d02:	e00b      	b.n	8008d1c <_dtoa_r+0x254>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e7f3      	b.n	8008cf0 <_dtoa_r+0x228>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	bfb8      	it	lt
 8008d1a:	2301      	movlt	r3, #1
 8008d1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d20:	2100      	movs	r1, #0
 8008d22:	2204      	movs	r2, #4
 8008d24:	f102 0514 	add.w	r5, r2, #20
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	d91f      	bls.n	8008d6c <_dtoa_r+0x2a4>
 8008d2c:	6041      	str	r1, [r0, #4]
 8008d2e:	4658      	mov	r0, fp
 8008d30:	f000 fcd8 	bl	80096e4 <_Balloc>
 8008d34:	4682      	mov	sl, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d13c      	bne.n	8008db4 <_dtoa_r+0x2ec>
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008da8 <_dtoa_r+0x2e0>)
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d42:	e6d8      	b.n	8008af6 <_dtoa_r+0x2e>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e7e0      	b.n	8008d0a <_dtoa_r+0x242>
 8008d48:	2401      	movs	r4, #1
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	9307      	str	r3, [sp, #28]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	2312      	movs	r3, #18
 8008d5c:	e7d0      	b.n	8008d00 <_dtoa_r+0x238>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d62:	e7f5      	b.n	8008d50 <_dtoa_r+0x288>
 8008d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	9307      	str	r3, [sp, #28]
 8008d6a:	e7d7      	b.n	8008d1c <_dtoa_r+0x254>
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	0052      	lsls	r2, r2, #1
 8008d70:	e7d8      	b.n	8008d24 <_dtoa_r+0x25c>
 8008d72:	bf00      	nop
 8008d74:	f3af 8000 	nop.w
 8008d78:	636f4361 	.word	0x636f4361
 8008d7c:	3fd287a7 	.word	0x3fd287a7
 8008d80:	8b60c8b3 	.word	0x8b60c8b3
 8008d84:	3fc68a28 	.word	0x3fc68a28
 8008d88:	509f79fb 	.word	0x509f79fb
 8008d8c:	3fd34413 	.word	0x3fd34413
 8008d90:	0800a515 	.word	0x0800a515
 8008d94:	0800a52c 	.word	0x0800a52c
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	0800a4e5 	.word	0x0800a4e5
 8008da0:	3ff80000 	.word	0x3ff80000
 8008da4:	0800a628 	.word	0x0800a628
 8008da8:	0800a584 	.word	0x0800a584
 8008dac:	0800a511 	.word	0x0800a511
 8008db0:	0800a4e4 	.word	0x0800a4e4
 8008db4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008db8:	6018      	str	r0, [r3, #0]
 8008dba:	9b07      	ldr	r3, [sp, #28]
 8008dbc:	2b0e      	cmp	r3, #14
 8008dbe:	f200 80a4 	bhi.w	8008f0a <_dtoa_r+0x442>
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	f000 80a1 	beq.w	8008f0a <_dtoa_r+0x442>
 8008dc8:	2f00      	cmp	r7, #0
 8008dca:	dd33      	ble.n	8008e34 <_dtoa_r+0x36c>
 8008dcc:	4bad      	ldr	r3, [pc, #692]	@ (8009084 <_dtoa_r+0x5bc>)
 8008dce:	f007 020f 	and.w	r2, r7, #15
 8008dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dd6:	ed93 7b00 	vldr	d7, [r3]
 8008dda:	05f8      	lsls	r0, r7, #23
 8008ddc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008de0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008de4:	d516      	bpl.n	8008e14 <_dtoa_r+0x34c>
 8008de6:	4ba8      	ldr	r3, [pc, #672]	@ (8009088 <_dtoa_r+0x5c0>)
 8008de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008df0:	f7f7 fd54 	bl	800089c <__aeabi_ddiv>
 8008df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df8:	f004 040f 	and.w	r4, r4, #15
 8008dfc:	2603      	movs	r6, #3
 8008dfe:	4da2      	ldr	r5, [pc, #648]	@ (8009088 <_dtoa_r+0x5c0>)
 8008e00:	b954      	cbnz	r4, 8008e18 <_dtoa_r+0x350>
 8008e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0a:	f7f7 fd47 	bl	800089c <__aeabi_ddiv>
 8008e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e12:	e028      	b.n	8008e66 <_dtoa_r+0x39e>
 8008e14:	2602      	movs	r6, #2
 8008e16:	e7f2      	b.n	8008dfe <_dtoa_r+0x336>
 8008e18:	07e1      	lsls	r1, r4, #31
 8008e1a:	d508      	bpl.n	8008e2e <_dtoa_r+0x366>
 8008e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e24:	f7f7 fc10 	bl	8000648 <__aeabi_dmul>
 8008e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	1064      	asrs	r4, r4, #1
 8008e30:	3508      	adds	r5, #8
 8008e32:	e7e5      	b.n	8008e00 <_dtoa_r+0x338>
 8008e34:	f000 80d2 	beq.w	8008fdc <_dtoa_r+0x514>
 8008e38:	427c      	negs	r4, r7
 8008e3a:	4b92      	ldr	r3, [pc, #584]	@ (8009084 <_dtoa_r+0x5bc>)
 8008e3c:	4d92      	ldr	r5, [pc, #584]	@ (8009088 <_dtoa_r+0x5c0>)
 8008e3e:	f004 020f 	and.w	r2, r4, #15
 8008e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e4e:	f7f7 fbfb 	bl	8000648 <__aeabi_dmul>
 8008e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e56:	1124      	asrs	r4, r4, #4
 8008e58:	2300      	movs	r3, #0
 8008e5a:	2602      	movs	r6, #2
 8008e5c:	2c00      	cmp	r4, #0
 8008e5e:	f040 80b2 	bne.w	8008fc6 <_dtoa_r+0x4fe>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1d3      	bne.n	8008e0e <_dtoa_r+0x346>
 8008e66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 80b7 	beq.w	8008fe0 <_dtoa_r+0x518>
 8008e72:	4b86      	ldr	r3, [pc, #536]	@ (800908c <_dtoa_r+0x5c4>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fe57 	bl	8000b2c <__aeabi_dcmplt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f000 80ae 	beq.w	8008fe0 <_dtoa_r+0x518>
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 80aa 	beq.w	8008fe0 <_dtoa_r+0x518>
 8008e8c:	9b00      	ldr	r3, [sp, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dd37      	ble.n	8008f02 <_dtoa_r+0x43a>
 8008e92:	1e7b      	subs	r3, r7, #1
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	4620      	mov	r0, r4
 8008e98:	4b7d      	ldr	r3, [pc, #500]	@ (8009090 <_dtoa_r+0x5c8>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	f7f7 fbd3 	bl	8000648 <__aeabi_dmul>
 8008ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea6:	9c00      	ldr	r4, [sp, #0]
 8008ea8:	3601      	adds	r6, #1
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7f7 fb62 	bl	8000574 <__aeabi_i2d>
 8008eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb4:	f7f7 fbc8 	bl	8000648 <__aeabi_dmul>
 8008eb8:	4b76      	ldr	r3, [pc, #472]	@ (8009094 <_dtoa_r+0x5cc>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f7f7 fa0e 	bl	80002dc <__adddf3>
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ec6:	2c00      	cmp	r4, #0
 8008ec8:	f040 808d 	bne.w	8008fe6 <_dtoa_r+0x51e>
 8008ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed0:	4b71      	ldr	r3, [pc, #452]	@ (8009098 <_dtoa_r+0x5d0>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f7f7 fa00 	bl	80002d8 <__aeabi_dsub>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4633      	mov	r3, r6
 8008ee4:	f7f7 fe40 	bl	8000b68 <__aeabi_dcmpgt>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f040 828b 	bne.w	8009404 <_dtoa_r+0x93c>
 8008eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ef8:	f7f7 fe18 	bl	8000b2c <__aeabi_dcmplt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f040 8128 	bne.w	8009152 <_dtoa_r+0x68a>
 8008f02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f2c0 815a 	blt.w	80091c6 <_dtoa_r+0x6fe>
 8008f12:	2f0e      	cmp	r7, #14
 8008f14:	f300 8157 	bgt.w	80091c6 <_dtoa_r+0x6fe>
 8008f18:	4b5a      	ldr	r3, [pc, #360]	@ (8009084 <_dtoa_r+0x5bc>)
 8008f1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f1e:	ed93 7b00 	vldr	d7, [r3]
 8008f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	ed8d 7b00 	vstr	d7, [sp]
 8008f2a:	da03      	bge.n	8008f34 <_dtoa_r+0x46c>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f340 8101 	ble.w	8009136 <_dtoa_r+0x66e>
 8008f34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f38:	4656      	mov	r6, sl
 8008f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 fcab 	bl	800089c <__aeabi_ddiv>
 8008f46:	f7f7 fe2f 	bl	8000ba8 <__aeabi_d2iz>
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	f7f7 fb12 	bl	8000574 <__aeabi_i2d>
 8008f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f54:	f7f7 fb78 	bl	8000648 <__aeabi_dmul>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	4629      	mov	r1, r5
 8008f60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f64:	f7f7 f9b8 	bl	80002d8 <__aeabi_dsub>
 8008f68:	f806 4b01 	strb.w	r4, [r6], #1
 8008f6c:	9d07      	ldr	r5, [sp, #28]
 8008f6e:	eba6 040a 	sub.w	r4, r6, sl
 8008f72:	42a5      	cmp	r5, r4
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	f040 8117 	bne.w	80091aa <_dtoa_r+0x6e2>
 8008f7c:	f7f7 f9ae 	bl	80002dc <__adddf3>
 8008f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f84:	4604      	mov	r4, r0
 8008f86:	460d      	mov	r5, r1
 8008f88:	f7f7 fdee 	bl	8000b68 <__aeabi_dcmpgt>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f040 80f9 	bne.w	8009184 <_dtoa_r+0x6bc>
 8008f92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f96:	4620      	mov	r0, r4
 8008f98:	4629      	mov	r1, r5
 8008f9a:	f7f7 fdbd 	bl	8000b18 <__aeabi_dcmpeq>
 8008f9e:	b118      	cbz	r0, 8008fa8 <_dtoa_r+0x4e0>
 8008fa0:	f018 0f01 	tst.w	r8, #1
 8008fa4:	f040 80ee 	bne.w	8009184 <_dtoa_r+0x6bc>
 8008fa8:	4649      	mov	r1, r9
 8008faa:	4658      	mov	r0, fp
 8008fac:	f000 fbda 	bl	8009764 <_Bfree>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	7033      	strb	r3, [r6, #0]
 8008fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fb6:	3701      	adds	r7, #1
 8008fb8:	601f      	str	r7, [r3, #0]
 8008fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 831d 	beq.w	80095fc <_dtoa_r+0xb34>
 8008fc2:	601e      	str	r6, [r3, #0]
 8008fc4:	e31a      	b.n	80095fc <_dtoa_r+0xb34>
 8008fc6:	07e2      	lsls	r2, r4, #31
 8008fc8:	d505      	bpl.n	8008fd6 <_dtoa_r+0x50e>
 8008fca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fce:	f7f7 fb3b 	bl	8000648 <__aeabi_dmul>
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	1064      	asrs	r4, r4, #1
 8008fd8:	3508      	adds	r5, #8
 8008fda:	e73f      	b.n	8008e5c <_dtoa_r+0x394>
 8008fdc:	2602      	movs	r6, #2
 8008fde:	e742      	b.n	8008e66 <_dtoa_r+0x39e>
 8008fe0:	9c07      	ldr	r4, [sp, #28]
 8008fe2:	9704      	str	r7, [sp, #16]
 8008fe4:	e761      	b.n	8008eaa <_dtoa_r+0x3e2>
 8008fe6:	4b27      	ldr	r3, [pc, #156]	@ (8009084 <_dtoa_r+0x5bc>)
 8008fe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008fea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ff2:	4454      	add	r4, sl
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	d053      	beq.n	80090a0 <_dtoa_r+0x5d8>
 8008ff8:	4928      	ldr	r1, [pc, #160]	@ (800909c <_dtoa_r+0x5d4>)
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f7f7 fc4e 	bl	800089c <__aeabi_ddiv>
 8009000:	4633      	mov	r3, r6
 8009002:	462a      	mov	r2, r5
 8009004:	f7f7 f968 	bl	80002d8 <__aeabi_dsub>
 8009008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800900c:	4656      	mov	r6, sl
 800900e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009012:	f7f7 fdc9 	bl	8000ba8 <__aeabi_d2iz>
 8009016:	4605      	mov	r5, r0
 8009018:	f7f7 faac 	bl	8000574 <__aeabi_i2d>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009024:	f7f7 f958 	bl	80002d8 <__aeabi_dsub>
 8009028:	3530      	adds	r5, #48	@ 0x30
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009032:	f806 5b01 	strb.w	r5, [r6], #1
 8009036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800903a:	f7f7 fd77 	bl	8000b2c <__aeabi_dcmplt>
 800903e:	2800      	cmp	r0, #0
 8009040:	d171      	bne.n	8009126 <_dtoa_r+0x65e>
 8009042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009046:	4911      	ldr	r1, [pc, #68]	@ (800908c <_dtoa_r+0x5c4>)
 8009048:	2000      	movs	r0, #0
 800904a:	f7f7 f945 	bl	80002d8 <__aeabi_dsub>
 800904e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009052:	f7f7 fd6b 	bl	8000b2c <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	f040 8095 	bne.w	8009186 <_dtoa_r+0x6be>
 800905c:	42a6      	cmp	r6, r4
 800905e:	f43f af50 	beq.w	8008f02 <_dtoa_r+0x43a>
 8009062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009066:	4b0a      	ldr	r3, [pc, #40]	@ (8009090 <_dtoa_r+0x5c8>)
 8009068:	2200      	movs	r2, #0
 800906a:	f7f7 faed 	bl	8000648 <__aeabi_dmul>
 800906e:	4b08      	ldr	r3, [pc, #32]	@ (8009090 <_dtoa_r+0x5c8>)
 8009070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009074:	2200      	movs	r2, #0
 8009076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800907a:	f7f7 fae5 	bl	8000648 <__aeabi_dmul>
 800907e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009082:	e7c4      	b.n	800900e <_dtoa_r+0x546>
 8009084:	0800a628 	.word	0x0800a628
 8009088:	0800a600 	.word	0x0800a600
 800908c:	3ff00000 	.word	0x3ff00000
 8009090:	40240000 	.word	0x40240000
 8009094:	401c0000 	.word	0x401c0000
 8009098:	40140000 	.word	0x40140000
 800909c:	3fe00000 	.word	0x3fe00000
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	f7f7 fad0 	bl	8000648 <__aeabi_dmul>
 80090a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80090ae:	4656      	mov	r6, sl
 80090b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b4:	f7f7 fd78 	bl	8000ba8 <__aeabi_d2iz>
 80090b8:	4605      	mov	r5, r0
 80090ba:	f7f7 fa5b 	bl	8000574 <__aeabi_i2d>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c6:	f7f7 f907 	bl	80002d8 <__aeabi_dsub>
 80090ca:	3530      	adds	r5, #48	@ 0x30
 80090cc:	f806 5b01 	strb.w	r5, [r6], #1
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	42a6      	cmp	r6, r4
 80090d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	d124      	bne.n	800912a <_dtoa_r+0x662>
 80090e0:	4bac      	ldr	r3, [pc, #688]	@ (8009394 <_dtoa_r+0x8cc>)
 80090e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090e6:	f7f7 f8f9 	bl	80002dc <__adddf3>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090f2:	f7f7 fd39 	bl	8000b68 <__aeabi_dcmpgt>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d145      	bne.n	8009186 <_dtoa_r+0x6be>
 80090fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090fe:	49a5      	ldr	r1, [pc, #660]	@ (8009394 <_dtoa_r+0x8cc>)
 8009100:	2000      	movs	r0, #0
 8009102:	f7f7 f8e9 	bl	80002d8 <__aeabi_dsub>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800910e:	f7f7 fd0d 	bl	8000b2c <__aeabi_dcmplt>
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f aef5 	beq.w	8008f02 <_dtoa_r+0x43a>
 8009118:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800911a:	1e73      	subs	r3, r6, #1
 800911c:	9315      	str	r3, [sp, #84]	@ 0x54
 800911e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009122:	2b30      	cmp	r3, #48	@ 0x30
 8009124:	d0f8      	beq.n	8009118 <_dtoa_r+0x650>
 8009126:	9f04      	ldr	r7, [sp, #16]
 8009128:	e73e      	b.n	8008fa8 <_dtoa_r+0x4e0>
 800912a:	4b9b      	ldr	r3, [pc, #620]	@ (8009398 <_dtoa_r+0x8d0>)
 800912c:	f7f7 fa8c 	bl	8000648 <__aeabi_dmul>
 8009130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009134:	e7bc      	b.n	80090b0 <_dtoa_r+0x5e8>
 8009136:	d10c      	bne.n	8009152 <_dtoa_r+0x68a>
 8009138:	4b98      	ldr	r3, [pc, #608]	@ (800939c <_dtoa_r+0x8d4>)
 800913a:	2200      	movs	r2, #0
 800913c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009140:	f7f7 fa82 	bl	8000648 <__aeabi_dmul>
 8009144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009148:	f7f7 fd04 	bl	8000b54 <__aeabi_dcmpge>
 800914c:	2800      	cmp	r0, #0
 800914e:	f000 8157 	beq.w	8009400 <_dtoa_r+0x938>
 8009152:	2400      	movs	r4, #0
 8009154:	4625      	mov	r5, r4
 8009156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009158:	43db      	mvns	r3, r3
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	4656      	mov	r6, sl
 800915e:	2700      	movs	r7, #0
 8009160:	4621      	mov	r1, r4
 8009162:	4658      	mov	r0, fp
 8009164:	f000 fafe 	bl	8009764 <_Bfree>
 8009168:	2d00      	cmp	r5, #0
 800916a:	d0dc      	beq.n	8009126 <_dtoa_r+0x65e>
 800916c:	b12f      	cbz	r7, 800917a <_dtoa_r+0x6b2>
 800916e:	42af      	cmp	r7, r5
 8009170:	d003      	beq.n	800917a <_dtoa_r+0x6b2>
 8009172:	4639      	mov	r1, r7
 8009174:	4658      	mov	r0, fp
 8009176:	f000 faf5 	bl	8009764 <_Bfree>
 800917a:	4629      	mov	r1, r5
 800917c:	4658      	mov	r0, fp
 800917e:	f000 faf1 	bl	8009764 <_Bfree>
 8009182:	e7d0      	b.n	8009126 <_dtoa_r+0x65e>
 8009184:	9704      	str	r7, [sp, #16]
 8009186:	4633      	mov	r3, r6
 8009188:	461e      	mov	r6, r3
 800918a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800918e:	2a39      	cmp	r2, #57	@ 0x39
 8009190:	d107      	bne.n	80091a2 <_dtoa_r+0x6da>
 8009192:	459a      	cmp	sl, r3
 8009194:	d1f8      	bne.n	8009188 <_dtoa_r+0x6c0>
 8009196:	9a04      	ldr	r2, [sp, #16]
 8009198:	3201      	adds	r2, #1
 800919a:	9204      	str	r2, [sp, #16]
 800919c:	2230      	movs	r2, #48	@ 0x30
 800919e:	f88a 2000 	strb.w	r2, [sl]
 80091a2:	781a      	ldrb	r2, [r3, #0]
 80091a4:	3201      	adds	r2, #1
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	e7bd      	b.n	8009126 <_dtoa_r+0x65e>
 80091aa:	4b7b      	ldr	r3, [pc, #492]	@ (8009398 <_dtoa_r+0x8d0>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	f7f7 fa4b 	bl	8000648 <__aeabi_dmul>
 80091b2:	2200      	movs	r2, #0
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	f7f7 fcad 	bl	8000b18 <__aeabi_dcmpeq>
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f aebb 	beq.w	8008f3a <_dtoa_r+0x472>
 80091c4:	e6f0      	b.n	8008fa8 <_dtoa_r+0x4e0>
 80091c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	f000 80db 	beq.w	8009384 <_dtoa_r+0x8bc>
 80091ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091d0:	2a01      	cmp	r2, #1
 80091d2:	f300 80bf 	bgt.w	8009354 <_dtoa_r+0x88c>
 80091d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80091d8:	2a00      	cmp	r2, #0
 80091da:	f000 80b7 	beq.w	800934c <_dtoa_r+0x884>
 80091de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80091e4:	4646      	mov	r6, r8
 80091e6:	9a08      	ldr	r2, [sp, #32]
 80091e8:	2101      	movs	r1, #1
 80091ea:	441a      	add	r2, r3
 80091ec:	4658      	mov	r0, fp
 80091ee:	4498      	add	r8, r3
 80091f0:	9208      	str	r2, [sp, #32]
 80091f2:	f000 fb6b 	bl	80098cc <__i2b>
 80091f6:	4605      	mov	r5, r0
 80091f8:	b15e      	cbz	r6, 8009212 <_dtoa_r+0x74a>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dd08      	ble.n	8009212 <_dtoa_r+0x74a>
 8009200:	42b3      	cmp	r3, r6
 8009202:	9a08      	ldr	r2, [sp, #32]
 8009204:	bfa8      	it	ge
 8009206:	4633      	movge	r3, r6
 8009208:	eba8 0803 	sub.w	r8, r8, r3
 800920c:	1af6      	subs	r6, r6, r3
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	9308      	str	r3, [sp, #32]
 8009212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009214:	b1f3      	cbz	r3, 8009254 <_dtoa_r+0x78c>
 8009216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 80b7 	beq.w	800938c <_dtoa_r+0x8c4>
 800921e:	b18c      	cbz	r4, 8009244 <_dtoa_r+0x77c>
 8009220:	4629      	mov	r1, r5
 8009222:	4622      	mov	r2, r4
 8009224:	4658      	mov	r0, fp
 8009226:	f000 fc11 	bl	8009a4c <__pow5mult>
 800922a:	464a      	mov	r2, r9
 800922c:	4601      	mov	r1, r0
 800922e:	4605      	mov	r5, r0
 8009230:	4658      	mov	r0, fp
 8009232:	f000 fb61 	bl	80098f8 <__multiply>
 8009236:	4649      	mov	r1, r9
 8009238:	9004      	str	r0, [sp, #16]
 800923a:	4658      	mov	r0, fp
 800923c:	f000 fa92 	bl	8009764 <_Bfree>
 8009240:	9b04      	ldr	r3, [sp, #16]
 8009242:	4699      	mov	r9, r3
 8009244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009246:	1b1a      	subs	r2, r3, r4
 8009248:	d004      	beq.n	8009254 <_dtoa_r+0x78c>
 800924a:	4649      	mov	r1, r9
 800924c:	4658      	mov	r0, fp
 800924e:	f000 fbfd 	bl	8009a4c <__pow5mult>
 8009252:	4681      	mov	r9, r0
 8009254:	2101      	movs	r1, #1
 8009256:	4658      	mov	r0, fp
 8009258:	f000 fb38 	bl	80098cc <__i2b>
 800925c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800925e:	4604      	mov	r4, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 81cf 	beq.w	8009604 <_dtoa_r+0xb3c>
 8009266:	461a      	mov	r2, r3
 8009268:	4601      	mov	r1, r0
 800926a:	4658      	mov	r0, fp
 800926c:	f000 fbee 	bl	8009a4c <__pow5mult>
 8009270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009272:	2b01      	cmp	r3, #1
 8009274:	4604      	mov	r4, r0
 8009276:	f300 8095 	bgt.w	80093a4 <_dtoa_r+0x8dc>
 800927a:	9b02      	ldr	r3, [sp, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8087 	bne.w	8009390 <_dtoa_r+0x8c8>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009288:	2b00      	cmp	r3, #0
 800928a:	f040 8089 	bne.w	80093a0 <_dtoa_r+0x8d8>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009294:	0d1b      	lsrs	r3, r3, #20
 8009296:	051b      	lsls	r3, r3, #20
 8009298:	b12b      	cbz	r3, 80092a6 <_dtoa_r+0x7de>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	3301      	adds	r3, #1
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	f108 0801 	add.w	r8, r8, #1
 80092a4:	2301      	movs	r3, #1
 80092a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80092a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 81b0 	beq.w	8009610 <_dtoa_r+0xb48>
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092b6:	6918      	ldr	r0, [r3, #16]
 80092b8:	f000 fabc 	bl	8009834 <__hi0bits>
 80092bc:	f1c0 0020 	rsb	r0, r0, #32
 80092c0:	9b08      	ldr	r3, [sp, #32]
 80092c2:	4418      	add	r0, r3
 80092c4:	f010 001f 	ands.w	r0, r0, #31
 80092c8:	d077      	beq.n	80093ba <_dtoa_r+0x8f2>
 80092ca:	f1c0 0320 	rsb	r3, r0, #32
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	dd6b      	ble.n	80093aa <_dtoa_r+0x8e2>
 80092d2:	9b08      	ldr	r3, [sp, #32]
 80092d4:	f1c0 001c 	rsb	r0, r0, #28
 80092d8:	4403      	add	r3, r0
 80092da:	4480      	add	r8, r0
 80092dc:	4406      	add	r6, r0
 80092de:	9308      	str	r3, [sp, #32]
 80092e0:	f1b8 0f00 	cmp.w	r8, #0
 80092e4:	dd05      	ble.n	80092f2 <_dtoa_r+0x82a>
 80092e6:	4649      	mov	r1, r9
 80092e8:	4642      	mov	r2, r8
 80092ea:	4658      	mov	r0, fp
 80092ec:	f000 fc08 	bl	8009b00 <__lshift>
 80092f0:	4681      	mov	r9, r0
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd05      	ble.n	8009304 <_dtoa_r+0x83c>
 80092f8:	4621      	mov	r1, r4
 80092fa:	461a      	mov	r2, r3
 80092fc:	4658      	mov	r0, fp
 80092fe:	f000 fbff 	bl	8009b00 <__lshift>
 8009302:	4604      	mov	r4, r0
 8009304:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009306:	2b00      	cmp	r3, #0
 8009308:	d059      	beq.n	80093be <_dtoa_r+0x8f6>
 800930a:	4621      	mov	r1, r4
 800930c:	4648      	mov	r0, r9
 800930e:	f000 fc63 	bl	8009bd8 <__mcmp>
 8009312:	2800      	cmp	r0, #0
 8009314:	da53      	bge.n	80093be <_dtoa_r+0x8f6>
 8009316:	1e7b      	subs	r3, r7, #1
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	4649      	mov	r1, r9
 800931c:	2300      	movs	r3, #0
 800931e:	220a      	movs	r2, #10
 8009320:	4658      	mov	r0, fp
 8009322:	f000 fa41 	bl	80097a8 <__multadd>
 8009326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009328:	4681      	mov	r9, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8172 	beq.w	8009614 <_dtoa_r+0xb4c>
 8009330:	2300      	movs	r3, #0
 8009332:	4629      	mov	r1, r5
 8009334:	220a      	movs	r2, #10
 8009336:	4658      	mov	r0, fp
 8009338:	f000 fa36 	bl	80097a8 <__multadd>
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	4605      	mov	r5, r0
 8009342:	dc67      	bgt.n	8009414 <_dtoa_r+0x94c>
 8009344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009346:	2b02      	cmp	r3, #2
 8009348:	dc41      	bgt.n	80093ce <_dtoa_r+0x906>
 800934a:	e063      	b.n	8009414 <_dtoa_r+0x94c>
 800934c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800934e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009352:	e746      	b.n	80091e2 <_dtoa_r+0x71a>
 8009354:	9b07      	ldr	r3, [sp, #28]
 8009356:	1e5c      	subs	r4, r3, #1
 8009358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935a:	42a3      	cmp	r3, r4
 800935c:	bfbf      	itttt	lt
 800935e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009360:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009362:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009364:	1ae3      	sublt	r3, r4, r3
 8009366:	bfb4      	ite	lt
 8009368:	18d2      	addlt	r2, r2, r3
 800936a:	1b1c      	subge	r4, r3, r4
 800936c:	9b07      	ldr	r3, [sp, #28]
 800936e:	bfbc      	itt	lt
 8009370:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009372:	2400      	movlt	r4, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	bfb5      	itete	lt
 8009378:	eba8 0603 	sublt.w	r6, r8, r3
 800937c:	9b07      	ldrge	r3, [sp, #28]
 800937e:	2300      	movlt	r3, #0
 8009380:	4646      	movge	r6, r8
 8009382:	e730      	b.n	80091e6 <_dtoa_r+0x71e>
 8009384:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009386:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009388:	4646      	mov	r6, r8
 800938a:	e735      	b.n	80091f8 <_dtoa_r+0x730>
 800938c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800938e:	e75c      	b.n	800924a <_dtoa_r+0x782>
 8009390:	2300      	movs	r3, #0
 8009392:	e788      	b.n	80092a6 <_dtoa_r+0x7de>
 8009394:	3fe00000 	.word	0x3fe00000
 8009398:	40240000 	.word	0x40240000
 800939c:	40140000 	.word	0x40140000
 80093a0:	9b02      	ldr	r3, [sp, #8]
 80093a2:	e780      	b.n	80092a6 <_dtoa_r+0x7de>
 80093a4:	2300      	movs	r3, #0
 80093a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a8:	e782      	b.n	80092b0 <_dtoa_r+0x7e8>
 80093aa:	d099      	beq.n	80092e0 <_dtoa_r+0x818>
 80093ac:	9a08      	ldr	r2, [sp, #32]
 80093ae:	331c      	adds	r3, #28
 80093b0:	441a      	add	r2, r3
 80093b2:	4498      	add	r8, r3
 80093b4:	441e      	add	r6, r3
 80093b6:	9208      	str	r2, [sp, #32]
 80093b8:	e792      	b.n	80092e0 <_dtoa_r+0x818>
 80093ba:	4603      	mov	r3, r0
 80093bc:	e7f6      	b.n	80093ac <_dtoa_r+0x8e4>
 80093be:	9b07      	ldr	r3, [sp, #28]
 80093c0:	9704      	str	r7, [sp, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dc20      	bgt.n	8009408 <_dtoa_r+0x940>
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	dd1e      	ble.n	800940c <_dtoa_r+0x944>
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f47f aec0 	bne.w	8009156 <_dtoa_r+0x68e>
 80093d6:	4621      	mov	r1, r4
 80093d8:	2205      	movs	r2, #5
 80093da:	4658      	mov	r0, fp
 80093dc:	f000 f9e4 	bl	80097a8 <__multadd>
 80093e0:	4601      	mov	r1, r0
 80093e2:	4604      	mov	r4, r0
 80093e4:	4648      	mov	r0, r9
 80093e6:	f000 fbf7 	bl	8009bd8 <__mcmp>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f77f aeb3 	ble.w	8009156 <_dtoa_r+0x68e>
 80093f0:	4656      	mov	r6, sl
 80093f2:	2331      	movs	r3, #49	@ 0x31
 80093f4:	f806 3b01 	strb.w	r3, [r6], #1
 80093f8:	9b04      	ldr	r3, [sp, #16]
 80093fa:	3301      	adds	r3, #1
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	e6ae      	b.n	800915e <_dtoa_r+0x696>
 8009400:	9c07      	ldr	r4, [sp, #28]
 8009402:	9704      	str	r7, [sp, #16]
 8009404:	4625      	mov	r5, r4
 8009406:	e7f3      	b.n	80093f0 <_dtoa_r+0x928>
 8009408:	9b07      	ldr	r3, [sp, #28]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8104 	beq.w	800961c <_dtoa_r+0xb54>
 8009414:	2e00      	cmp	r6, #0
 8009416:	dd05      	ble.n	8009424 <_dtoa_r+0x95c>
 8009418:	4629      	mov	r1, r5
 800941a:	4632      	mov	r2, r6
 800941c:	4658      	mov	r0, fp
 800941e:	f000 fb6f 	bl	8009b00 <__lshift>
 8009422:	4605      	mov	r5, r0
 8009424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d05a      	beq.n	80094e0 <_dtoa_r+0xa18>
 800942a:	6869      	ldr	r1, [r5, #4]
 800942c:	4658      	mov	r0, fp
 800942e:	f000 f959 	bl	80096e4 <_Balloc>
 8009432:	4606      	mov	r6, r0
 8009434:	b928      	cbnz	r0, 8009442 <_dtoa_r+0x97a>
 8009436:	4b84      	ldr	r3, [pc, #528]	@ (8009648 <_dtoa_r+0xb80>)
 8009438:	4602      	mov	r2, r0
 800943a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800943e:	f7ff bb5a 	b.w	8008af6 <_dtoa_r+0x2e>
 8009442:	692a      	ldr	r2, [r5, #16]
 8009444:	3202      	adds	r2, #2
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	f105 010c 	add.w	r1, r5, #12
 800944c:	300c      	adds	r0, #12
 800944e:	f7ff faa2 	bl	8008996 <memcpy>
 8009452:	2201      	movs	r2, #1
 8009454:	4631      	mov	r1, r6
 8009456:	4658      	mov	r0, fp
 8009458:	f000 fb52 	bl	8009b00 <__lshift>
 800945c:	f10a 0301 	add.w	r3, sl, #1
 8009460:	9307      	str	r3, [sp, #28]
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	4453      	add	r3, sl
 8009466:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009468:	9b02      	ldr	r3, [sp, #8]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	462f      	mov	r7, r5
 8009470:	930a      	str	r3, [sp, #40]	@ 0x28
 8009472:	4605      	mov	r5, r0
 8009474:	9b07      	ldr	r3, [sp, #28]
 8009476:	4621      	mov	r1, r4
 8009478:	3b01      	subs	r3, #1
 800947a:	4648      	mov	r0, r9
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	f7ff fa98 	bl	80089b2 <quorem>
 8009482:	4639      	mov	r1, r7
 8009484:	9002      	str	r0, [sp, #8]
 8009486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800948a:	4648      	mov	r0, r9
 800948c:	f000 fba4 	bl	8009bd8 <__mcmp>
 8009490:	462a      	mov	r2, r5
 8009492:	9008      	str	r0, [sp, #32]
 8009494:	4621      	mov	r1, r4
 8009496:	4658      	mov	r0, fp
 8009498:	f000 fbba 	bl	8009c10 <__mdiff>
 800949c:	68c2      	ldr	r2, [r0, #12]
 800949e:	4606      	mov	r6, r0
 80094a0:	bb02      	cbnz	r2, 80094e4 <_dtoa_r+0xa1c>
 80094a2:	4601      	mov	r1, r0
 80094a4:	4648      	mov	r0, r9
 80094a6:	f000 fb97 	bl	8009bd8 <__mcmp>
 80094aa:	4602      	mov	r2, r0
 80094ac:	4631      	mov	r1, r6
 80094ae:	4658      	mov	r0, fp
 80094b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80094b2:	f000 f957 	bl	8009764 <_Bfree>
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094ba:	9e07      	ldr	r6, [sp, #28]
 80094bc:	ea43 0102 	orr.w	r1, r3, r2
 80094c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c2:	4319      	orrs	r1, r3
 80094c4:	d110      	bne.n	80094e8 <_dtoa_r+0xa20>
 80094c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094ca:	d029      	beq.n	8009520 <_dtoa_r+0xa58>
 80094cc:	9b08      	ldr	r3, [sp, #32]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	dd02      	ble.n	80094d8 <_dtoa_r+0xa10>
 80094d2:	9b02      	ldr	r3, [sp, #8]
 80094d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80094d8:	9b00      	ldr	r3, [sp, #0]
 80094da:	f883 8000 	strb.w	r8, [r3]
 80094de:	e63f      	b.n	8009160 <_dtoa_r+0x698>
 80094e0:	4628      	mov	r0, r5
 80094e2:	e7bb      	b.n	800945c <_dtoa_r+0x994>
 80094e4:	2201      	movs	r2, #1
 80094e6:	e7e1      	b.n	80094ac <_dtoa_r+0x9e4>
 80094e8:	9b08      	ldr	r3, [sp, #32]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db04      	blt.n	80094f8 <_dtoa_r+0xa30>
 80094ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094f0:	430b      	orrs	r3, r1
 80094f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094f4:	430b      	orrs	r3, r1
 80094f6:	d120      	bne.n	800953a <_dtoa_r+0xa72>
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	dded      	ble.n	80094d8 <_dtoa_r+0xa10>
 80094fc:	4649      	mov	r1, r9
 80094fe:	2201      	movs	r2, #1
 8009500:	4658      	mov	r0, fp
 8009502:	f000 fafd 	bl	8009b00 <__lshift>
 8009506:	4621      	mov	r1, r4
 8009508:	4681      	mov	r9, r0
 800950a:	f000 fb65 	bl	8009bd8 <__mcmp>
 800950e:	2800      	cmp	r0, #0
 8009510:	dc03      	bgt.n	800951a <_dtoa_r+0xa52>
 8009512:	d1e1      	bne.n	80094d8 <_dtoa_r+0xa10>
 8009514:	f018 0f01 	tst.w	r8, #1
 8009518:	d0de      	beq.n	80094d8 <_dtoa_r+0xa10>
 800951a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800951e:	d1d8      	bne.n	80094d2 <_dtoa_r+0xa0a>
 8009520:	9a00      	ldr	r2, [sp, #0]
 8009522:	2339      	movs	r3, #57	@ 0x39
 8009524:	7013      	strb	r3, [r2, #0]
 8009526:	4633      	mov	r3, r6
 8009528:	461e      	mov	r6, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009530:	2a39      	cmp	r2, #57	@ 0x39
 8009532:	d052      	beq.n	80095da <_dtoa_r+0xb12>
 8009534:	3201      	adds	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	e612      	b.n	8009160 <_dtoa_r+0x698>
 800953a:	2a00      	cmp	r2, #0
 800953c:	dd07      	ble.n	800954e <_dtoa_r+0xa86>
 800953e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009542:	d0ed      	beq.n	8009520 <_dtoa_r+0xa58>
 8009544:	9a00      	ldr	r2, [sp, #0]
 8009546:	f108 0301 	add.w	r3, r8, #1
 800954a:	7013      	strb	r3, [r2, #0]
 800954c:	e608      	b.n	8009160 <_dtoa_r+0x698>
 800954e:	9b07      	ldr	r3, [sp, #28]
 8009550:	9a07      	ldr	r2, [sp, #28]
 8009552:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009558:	4293      	cmp	r3, r2
 800955a:	d028      	beq.n	80095ae <_dtoa_r+0xae6>
 800955c:	4649      	mov	r1, r9
 800955e:	2300      	movs	r3, #0
 8009560:	220a      	movs	r2, #10
 8009562:	4658      	mov	r0, fp
 8009564:	f000 f920 	bl	80097a8 <__multadd>
 8009568:	42af      	cmp	r7, r5
 800956a:	4681      	mov	r9, r0
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	f04f 020a 	mov.w	r2, #10
 8009574:	4639      	mov	r1, r7
 8009576:	4658      	mov	r0, fp
 8009578:	d107      	bne.n	800958a <_dtoa_r+0xac2>
 800957a:	f000 f915 	bl	80097a8 <__multadd>
 800957e:	4607      	mov	r7, r0
 8009580:	4605      	mov	r5, r0
 8009582:	9b07      	ldr	r3, [sp, #28]
 8009584:	3301      	adds	r3, #1
 8009586:	9307      	str	r3, [sp, #28]
 8009588:	e774      	b.n	8009474 <_dtoa_r+0x9ac>
 800958a:	f000 f90d 	bl	80097a8 <__multadd>
 800958e:	4629      	mov	r1, r5
 8009590:	4607      	mov	r7, r0
 8009592:	2300      	movs	r3, #0
 8009594:	220a      	movs	r2, #10
 8009596:	4658      	mov	r0, fp
 8009598:	f000 f906 	bl	80097a8 <__multadd>
 800959c:	4605      	mov	r5, r0
 800959e:	e7f0      	b.n	8009582 <_dtoa_r+0xaba>
 80095a0:	9b00      	ldr	r3, [sp, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfcc      	ite	gt
 80095a6:	461e      	movgt	r6, r3
 80095a8:	2601      	movle	r6, #1
 80095aa:	4456      	add	r6, sl
 80095ac:	2700      	movs	r7, #0
 80095ae:	4649      	mov	r1, r9
 80095b0:	2201      	movs	r2, #1
 80095b2:	4658      	mov	r0, fp
 80095b4:	f000 faa4 	bl	8009b00 <__lshift>
 80095b8:	4621      	mov	r1, r4
 80095ba:	4681      	mov	r9, r0
 80095bc:	f000 fb0c 	bl	8009bd8 <__mcmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	dcb0      	bgt.n	8009526 <_dtoa_r+0xa5e>
 80095c4:	d102      	bne.n	80095cc <_dtoa_r+0xb04>
 80095c6:	f018 0f01 	tst.w	r8, #1
 80095ca:	d1ac      	bne.n	8009526 <_dtoa_r+0xa5e>
 80095cc:	4633      	mov	r3, r6
 80095ce:	461e      	mov	r6, r3
 80095d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d4:	2a30      	cmp	r2, #48	@ 0x30
 80095d6:	d0fa      	beq.n	80095ce <_dtoa_r+0xb06>
 80095d8:	e5c2      	b.n	8009160 <_dtoa_r+0x698>
 80095da:	459a      	cmp	sl, r3
 80095dc:	d1a4      	bne.n	8009528 <_dtoa_r+0xa60>
 80095de:	9b04      	ldr	r3, [sp, #16]
 80095e0:	3301      	adds	r3, #1
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	2331      	movs	r3, #49	@ 0x31
 80095e6:	f88a 3000 	strb.w	r3, [sl]
 80095ea:	e5b9      	b.n	8009160 <_dtoa_r+0x698>
 80095ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800964c <_dtoa_r+0xb84>
 80095f2:	b11b      	cbz	r3, 80095fc <_dtoa_r+0xb34>
 80095f4:	f10a 0308 	add.w	r3, sl, #8
 80095f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	4650      	mov	r0, sl
 80095fe:	b019      	add	sp, #100	@ 0x64
 8009600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009606:	2b01      	cmp	r3, #1
 8009608:	f77f ae37 	ble.w	800927a <_dtoa_r+0x7b2>
 800960c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800960e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009610:	2001      	movs	r0, #1
 8009612:	e655      	b.n	80092c0 <_dtoa_r+0x7f8>
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f77f aed6 	ble.w	80093c8 <_dtoa_r+0x900>
 800961c:	4656      	mov	r6, sl
 800961e:	4621      	mov	r1, r4
 8009620:	4648      	mov	r0, r9
 8009622:	f7ff f9c6 	bl	80089b2 <quorem>
 8009626:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800962a:	f806 8b01 	strb.w	r8, [r6], #1
 800962e:	9b00      	ldr	r3, [sp, #0]
 8009630:	eba6 020a 	sub.w	r2, r6, sl
 8009634:	4293      	cmp	r3, r2
 8009636:	ddb3      	ble.n	80095a0 <_dtoa_r+0xad8>
 8009638:	4649      	mov	r1, r9
 800963a:	2300      	movs	r3, #0
 800963c:	220a      	movs	r2, #10
 800963e:	4658      	mov	r0, fp
 8009640:	f000 f8b2 	bl	80097a8 <__multadd>
 8009644:	4681      	mov	r9, r0
 8009646:	e7ea      	b.n	800961e <_dtoa_r+0xb56>
 8009648:	0800a584 	.word	0x0800a584
 800964c:	0800a508 	.word	0x0800a508

08009650 <_free_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4605      	mov	r5, r0
 8009654:	2900      	cmp	r1, #0
 8009656:	d041      	beq.n	80096dc <_free_r+0x8c>
 8009658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965c:	1f0c      	subs	r4, r1, #4
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfb8      	it	lt
 8009662:	18e4      	addlt	r4, r4, r3
 8009664:	f7fe fa9a 	bl	8007b9c <__malloc_lock>
 8009668:	4a1d      	ldr	r2, [pc, #116]	@ (80096e0 <_free_r+0x90>)
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	b933      	cbnz	r3, 800967c <_free_r+0x2c>
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	6014      	str	r4, [r2, #0]
 8009672:	4628      	mov	r0, r5
 8009674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009678:	f7fe ba96 	b.w	8007ba8 <__malloc_unlock>
 800967c:	42a3      	cmp	r3, r4
 800967e:	d908      	bls.n	8009692 <_free_r+0x42>
 8009680:	6820      	ldr	r0, [r4, #0]
 8009682:	1821      	adds	r1, r4, r0
 8009684:	428b      	cmp	r3, r1
 8009686:	bf01      	itttt	eq
 8009688:	6819      	ldreq	r1, [r3, #0]
 800968a:	685b      	ldreq	r3, [r3, #4]
 800968c:	1809      	addeq	r1, r1, r0
 800968e:	6021      	streq	r1, [r4, #0]
 8009690:	e7ed      	b.n	800966e <_free_r+0x1e>
 8009692:	461a      	mov	r2, r3
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	b10b      	cbz	r3, 800969c <_free_r+0x4c>
 8009698:	42a3      	cmp	r3, r4
 800969a:	d9fa      	bls.n	8009692 <_free_r+0x42>
 800969c:	6811      	ldr	r1, [r2, #0]
 800969e:	1850      	adds	r0, r2, r1
 80096a0:	42a0      	cmp	r0, r4
 80096a2:	d10b      	bne.n	80096bc <_free_r+0x6c>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	4401      	add	r1, r0
 80096a8:	1850      	adds	r0, r2, r1
 80096aa:	4283      	cmp	r3, r0
 80096ac:	6011      	str	r1, [r2, #0]
 80096ae:	d1e0      	bne.n	8009672 <_free_r+0x22>
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	6053      	str	r3, [r2, #4]
 80096b6:	4408      	add	r0, r1
 80096b8:	6010      	str	r0, [r2, #0]
 80096ba:	e7da      	b.n	8009672 <_free_r+0x22>
 80096bc:	d902      	bls.n	80096c4 <_free_r+0x74>
 80096be:	230c      	movs	r3, #12
 80096c0:	602b      	str	r3, [r5, #0]
 80096c2:	e7d6      	b.n	8009672 <_free_r+0x22>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	1821      	adds	r1, r4, r0
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf04      	itt	eq
 80096cc:	6819      	ldreq	r1, [r3, #0]
 80096ce:	685b      	ldreq	r3, [r3, #4]
 80096d0:	6063      	str	r3, [r4, #4]
 80096d2:	bf04      	itt	eq
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	6054      	str	r4, [r2, #4]
 80096da:	e7ca      	b.n	8009672 <_free_r+0x22>
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	20000618 	.word	0x20000618

080096e4 <_Balloc>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	69c6      	ldr	r6, [r0, #28]
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	b976      	cbnz	r6, 800970c <_Balloc+0x28>
 80096ee:	2010      	movs	r0, #16
 80096f0:	f7fe f9aa 	bl	8007a48 <malloc>
 80096f4:	4602      	mov	r2, r0
 80096f6:	61e0      	str	r0, [r4, #28]
 80096f8:	b920      	cbnz	r0, 8009704 <_Balloc+0x20>
 80096fa:	4b18      	ldr	r3, [pc, #96]	@ (800975c <_Balloc+0x78>)
 80096fc:	4818      	ldr	r0, [pc, #96]	@ (8009760 <_Balloc+0x7c>)
 80096fe:	216b      	movs	r1, #107	@ 0x6b
 8009700:	f000 fde4 	bl	800a2cc <__assert_func>
 8009704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009708:	6006      	str	r6, [r0, #0]
 800970a:	60c6      	str	r6, [r0, #12]
 800970c:	69e6      	ldr	r6, [r4, #28]
 800970e:	68f3      	ldr	r3, [r6, #12]
 8009710:	b183      	cbz	r3, 8009734 <_Balloc+0x50>
 8009712:	69e3      	ldr	r3, [r4, #28]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800971a:	b9b8      	cbnz	r0, 800974c <_Balloc+0x68>
 800971c:	2101      	movs	r1, #1
 800971e:	fa01 f605 	lsl.w	r6, r1, r5
 8009722:	1d72      	adds	r2, r6, #5
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	4620      	mov	r0, r4
 8009728:	f000 fdee 	bl	800a308 <_calloc_r>
 800972c:	b160      	cbz	r0, 8009748 <_Balloc+0x64>
 800972e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009732:	e00e      	b.n	8009752 <_Balloc+0x6e>
 8009734:	2221      	movs	r2, #33	@ 0x21
 8009736:	2104      	movs	r1, #4
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fde5 	bl	800a308 <_calloc_r>
 800973e:	69e3      	ldr	r3, [r4, #28]
 8009740:	60f0      	str	r0, [r6, #12]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e4      	bne.n	8009712 <_Balloc+0x2e>
 8009748:	2000      	movs	r0, #0
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009752:	2300      	movs	r3, #0
 8009754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009758:	e7f7      	b.n	800974a <_Balloc+0x66>
 800975a:	bf00      	nop
 800975c:	0800a515 	.word	0x0800a515
 8009760:	0800a595 	.word	0x0800a595

08009764 <_Bfree>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	69c6      	ldr	r6, [r0, #28]
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b976      	cbnz	r6, 800978c <_Bfree+0x28>
 800976e:	2010      	movs	r0, #16
 8009770:	f7fe f96a 	bl	8007a48 <malloc>
 8009774:	4602      	mov	r2, r0
 8009776:	61e8      	str	r0, [r5, #28]
 8009778:	b920      	cbnz	r0, 8009784 <_Bfree+0x20>
 800977a:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <_Bfree+0x3c>)
 800977c:	4809      	ldr	r0, [pc, #36]	@ (80097a4 <_Bfree+0x40>)
 800977e:	218f      	movs	r1, #143	@ 0x8f
 8009780:	f000 fda4 	bl	800a2cc <__assert_func>
 8009784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009788:	6006      	str	r6, [r0, #0]
 800978a:	60c6      	str	r6, [r0, #12]
 800978c:	b13c      	cbz	r4, 800979e <_Bfree+0x3a>
 800978e:	69eb      	ldr	r3, [r5, #28]
 8009790:	6862      	ldr	r2, [r4, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009798:	6021      	str	r1, [r4, #0]
 800979a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	0800a515 	.word	0x0800a515
 80097a4:	0800a595 	.word	0x0800a595

080097a8 <__multadd>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	690d      	ldr	r5, [r1, #16]
 80097ae:	4607      	mov	r7, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	461e      	mov	r6, r3
 80097b4:	f101 0c14 	add.w	ip, r1, #20
 80097b8:	2000      	movs	r0, #0
 80097ba:	f8dc 3000 	ldr.w	r3, [ip]
 80097be:	b299      	uxth	r1, r3
 80097c0:	fb02 6101 	mla	r1, r2, r1, r6
 80097c4:	0c1e      	lsrs	r6, r3, #16
 80097c6:	0c0b      	lsrs	r3, r1, #16
 80097c8:	fb02 3306 	mla	r3, r2, r6, r3
 80097cc:	b289      	uxth	r1, r1
 80097ce:	3001      	adds	r0, #1
 80097d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d4:	4285      	cmp	r5, r0
 80097d6:	f84c 1b04 	str.w	r1, [ip], #4
 80097da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097de:	dcec      	bgt.n	80097ba <__multadd+0x12>
 80097e0:	b30e      	cbz	r6, 8009826 <__multadd+0x7e>
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dc19      	bgt.n	800981c <__multadd+0x74>
 80097e8:	6861      	ldr	r1, [r4, #4]
 80097ea:	4638      	mov	r0, r7
 80097ec:	3101      	adds	r1, #1
 80097ee:	f7ff ff79 	bl	80096e4 <_Balloc>
 80097f2:	4680      	mov	r8, r0
 80097f4:	b928      	cbnz	r0, 8009802 <__multadd+0x5a>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <__multadd+0x84>)
 80097fa:	480d      	ldr	r0, [pc, #52]	@ (8009830 <__multadd+0x88>)
 80097fc:	21ba      	movs	r1, #186	@ 0xba
 80097fe:	f000 fd65 	bl	800a2cc <__assert_func>
 8009802:	6922      	ldr	r2, [r4, #16]
 8009804:	3202      	adds	r2, #2
 8009806:	f104 010c 	add.w	r1, r4, #12
 800980a:	0092      	lsls	r2, r2, #2
 800980c:	300c      	adds	r0, #12
 800980e:	f7ff f8c2 	bl	8008996 <memcpy>
 8009812:	4621      	mov	r1, r4
 8009814:	4638      	mov	r0, r7
 8009816:	f7ff ffa5 	bl	8009764 <_Bfree>
 800981a:	4644      	mov	r4, r8
 800981c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009820:	3501      	adds	r5, #1
 8009822:	615e      	str	r6, [r3, #20]
 8009824:	6125      	str	r5, [r4, #16]
 8009826:	4620      	mov	r0, r4
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	0800a584 	.word	0x0800a584
 8009830:	0800a595 	.word	0x0800a595

08009834 <__hi0bits>:
 8009834:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009838:	4603      	mov	r3, r0
 800983a:	bf36      	itet	cc
 800983c:	0403      	lslcc	r3, r0, #16
 800983e:	2000      	movcs	r0, #0
 8009840:	2010      	movcc	r0, #16
 8009842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009846:	bf3c      	itt	cc
 8009848:	021b      	lslcc	r3, r3, #8
 800984a:	3008      	addcc	r0, #8
 800984c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009850:	bf3c      	itt	cc
 8009852:	011b      	lslcc	r3, r3, #4
 8009854:	3004      	addcc	r0, #4
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800985a:	bf3c      	itt	cc
 800985c:	009b      	lslcc	r3, r3, #2
 800985e:	3002      	addcc	r0, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	db05      	blt.n	8009870 <__hi0bits+0x3c>
 8009864:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009868:	f100 0001 	add.w	r0, r0, #1
 800986c:	bf08      	it	eq
 800986e:	2020      	moveq	r0, #32
 8009870:	4770      	bx	lr

08009872 <__lo0bits>:
 8009872:	6803      	ldr	r3, [r0, #0]
 8009874:	4602      	mov	r2, r0
 8009876:	f013 0007 	ands.w	r0, r3, #7
 800987a:	d00b      	beq.n	8009894 <__lo0bits+0x22>
 800987c:	07d9      	lsls	r1, r3, #31
 800987e:	d421      	bmi.n	80098c4 <__lo0bits+0x52>
 8009880:	0798      	lsls	r0, r3, #30
 8009882:	bf49      	itett	mi
 8009884:	085b      	lsrmi	r3, r3, #1
 8009886:	089b      	lsrpl	r3, r3, #2
 8009888:	2001      	movmi	r0, #1
 800988a:	6013      	strmi	r3, [r2, #0]
 800988c:	bf5c      	itt	pl
 800988e:	6013      	strpl	r3, [r2, #0]
 8009890:	2002      	movpl	r0, #2
 8009892:	4770      	bx	lr
 8009894:	b299      	uxth	r1, r3
 8009896:	b909      	cbnz	r1, 800989c <__lo0bits+0x2a>
 8009898:	0c1b      	lsrs	r3, r3, #16
 800989a:	2010      	movs	r0, #16
 800989c:	b2d9      	uxtb	r1, r3
 800989e:	b909      	cbnz	r1, 80098a4 <__lo0bits+0x32>
 80098a0:	3008      	adds	r0, #8
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	0719      	lsls	r1, r3, #28
 80098a6:	bf04      	itt	eq
 80098a8:	091b      	lsreq	r3, r3, #4
 80098aa:	3004      	addeq	r0, #4
 80098ac:	0799      	lsls	r1, r3, #30
 80098ae:	bf04      	itt	eq
 80098b0:	089b      	lsreq	r3, r3, #2
 80098b2:	3002      	addeq	r0, #2
 80098b4:	07d9      	lsls	r1, r3, #31
 80098b6:	d403      	bmi.n	80098c0 <__lo0bits+0x4e>
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	f100 0001 	add.w	r0, r0, #1
 80098be:	d003      	beq.n	80098c8 <__lo0bits+0x56>
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	4770      	bx	lr
 80098c4:	2000      	movs	r0, #0
 80098c6:	4770      	bx	lr
 80098c8:	2020      	movs	r0, #32
 80098ca:	4770      	bx	lr

080098cc <__i2b>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	460c      	mov	r4, r1
 80098d0:	2101      	movs	r1, #1
 80098d2:	f7ff ff07 	bl	80096e4 <_Balloc>
 80098d6:	4602      	mov	r2, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <__i2b+0x1a>
 80098da:	4b05      	ldr	r3, [pc, #20]	@ (80098f0 <__i2b+0x24>)
 80098dc:	4805      	ldr	r0, [pc, #20]	@ (80098f4 <__i2b+0x28>)
 80098de:	f240 1145 	movw	r1, #325	@ 0x145
 80098e2:	f000 fcf3 	bl	800a2cc <__assert_func>
 80098e6:	2301      	movs	r3, #1
 80098e8:	6144      	str	r4, [r0, #20]
 80098ea:	6103      	str	r3, [r0, #16]
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	bf00      	nop
 80098f0:	0800a584 	.word	0x0800a584
 80098f4:	0800a595 	.word	0x0800a595

080098f8 <__multiply>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4614      	mov	r4, r2
 80098fe:	690a      	ldr	r2, [r1, #16]
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	429a      	cmp	r2, r3
 8009904:	bfa8      	it	ge
 8009906:	4623      	movge	r3, r4
 8009908:	460f      	mov	r7, r1
 800990a:	bfa4      	itt	ge
 800990c:	460c      	movge	r4, r1
 800990e:	461f      	movge	r7, r3
 8009910:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009914:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009918:	68a3      	ldr	r3, [r4, #8]
 800991a:	6861      	ldr	r1, [r4, #4]
 800991c:	eb0a 0609 	add.w	r6, sl, r9
 8009920:	42b3      	cmp	r3, r6
 8009922:	b085      	sub	sp, #20
 8009924:	bfb8      	it	lt
 8009926:	3101      	addlt	r1, #1
 8009928:	f7ff fedc 	bl	80096e4 <_Balloc>
 800992c:	b930      	cbnz	r0, 800993c <__multiply+0x44>
 800992e:	4602      	mov	r2, r0
 8009930:	4b44      	ldr	r3, [pc, #272]	@ (8009a44 <__multiply+0x14c>)
 8009932:	4845      	ldr	r0, [pc, #276]	@ (8009a48 <__multiply+0x150>)
 8009934:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009938:	f000 fcc8 	bl	800a2cc <__assert_func>
 800993c:	f100 0514 	add.w	r5, r0, #20
 8009940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009944:	462b      	mov	r3, r5
 8009946:	2200      	movs	r2, #0
 8009948:	4543      	cmp	r3, r8
 800994a:	d321      	bcc.n	8009990 <__multiply+0x98>
 800994c:	f107 0114 	add.w	r1, r7, #20
 8009950:	f104 0214 	add.w	r2, r4, #20
 8009954:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009958:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	1b13      	subs	r3, r2, r4
 8009960:	3b15      	subs	r3, #21
 8009962:	f023 0303 	bic.w	r3, r3, #3
 8009966:	3304      	adds	r3, #4
 8009968:	f104 0715 	add.w	r7, r4, #21
 800996c:	42ba      	cmp	r2, r7
 800996e:	bf38      	it	cc
 8009970:	2304      	movcc	r3, #4
 8009972:	9301      	str	r3, [sp, #4]
 8009974:	9b02      	ldr	r3, [sp, #8]
 8009976:	9103      	str	r1, [sp, #12]
 8009978:	428b      	cmp	r3, r1
 800997a:	d80c      	bhi.n	8009996 <__multiply+0x9e>
 800997c:	2e00      	cmp	r6, #0
 800997e:	dd03      	ble.n	8009988 <__multiply+0x90>
 8009980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009984:	2b00      	cmp	r3, #0
 8009986:	d05b      	beq.n	8009a40 <__multiply+0x148>
 8009988:	6106      	str	r6, [r0, #16]
 800998a:	b005      	add	sp, #20
 800998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009990:	f843 2b04 	str.w	r2, [r3], #4
 8009994:	e7d8      	b.n	8009948 <__multiply+0x50>
 8009996:	f8b1 a000 	ldrh.w	sl, [r1]
 800999a:	f1ba 0f00 	cmp.w	sl, #0
 800999e:	d024      	beq.n	80099ea <__multiply+0xf2>
 80099a0:	f104 0e14 	add.w	lr, r4, #20
 80099a4:	46a9      	mov	r9, r5
 80099a6:	f04f 0c00 	mov.w	ip, #0
 80099aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099ae:	f8d9 3000 	ldr.w	r3, [r9]
 80099b2:	fa1f fb87 	uxth.w	fp, r7
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80099bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80099c0:	f8d9 7000 	ldr.w	r7, [r9]
 80099c4:	4463      	add	r3, ip
 80099c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80099ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80099ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099d8:	4572      	cmp	r2, lr
 80099da:	f849 3b04 	str.w	r3, [r9], #4
 80099de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80099e2:	d8e2      	bhi.n	80099aa <__multiply+0xb2>
 80099e4:	9b01      	ldr	r3, [sp, #4]
 80099e6:	f845 c003 	str.w	ip, [r5, r3]
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099f0:	3104      	adds	r1, #4
 80099f2:	f1b9 0f00 	cmp.w	r9, #0
 80099f6:	d021      	beq.n	8009a3c <__multiply+0x144>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	f104 0c14 	add.w	ip, r4, #20
 80099fe:	46ae      	mov	lr, r5
 8009a00:	f04f 0a00 	mov.w	sl, #0
 8009a04:	f8bc b000 	ldrh.w	fp, [ip]
 8009a08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009a0c:	fb09 770b 	mla	r7, r9, fp, r7
 8009a10:	4457      	add	r7, sl
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009a18:	f84e 3b04 	str.w	r3, [lr], #4
 8009a1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a24:	f8be 3000 	ldrh.w	r3, [lr]
 8009a28:	fb09 330a 	mla	r3, r9, sl, r3
 8009a2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009a30:	4562      	cmp	r2, ip
 8009a32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a36:	d8e5      	bhi.n	8009a04 <__multiply+0x10c>
 8009a38:	9f01      	ldr	r7, [sp, #4]
 8009a3a:	51eb      	str	r3, [r5, r7]
 8009a3c:	3504      	adds	r5, #4
 8009a3e:	e799      	b.n	8009974 <__multiply+0x7c>
 8009a40:	3e01      	subs	r6, #1
 8009a42:	e79b      	b.n	800997c <__multiply+0x84>
 8009a44:	0800a584 	.word	0x0800a584
 8009a48:	0800a595 	.word	0x0800a595

08009a4c <__pow5mult>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	4615      	mov	r5, r2
 8009a52:	f012 0203 	ands.w	r2, r2, #3
 8009a56:	4607      	mov	r7, r0
 8009a58:	460e      	mov	r6, r1
 8009a5a:	d007      	beq.n	8009a6c <__pow5mult+0x20>
 8009a5c:	4c25      	ldr	r4, [pc, #148]	@ (8009af4 <__pow5mult+0xa8>)
 8009a5e:	3a01      	subs	r2, #1
 8009a60:	2300      	movs	r3, #0
 8009a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a66:	f7ff fe9f 	bl	80097a8 <__multadd>
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	10ad      	asrs	r5, r5, #2
 8009a6e:	d03d      	beq.n	8009aec <__pow5mult+0xa0>
 8009a70:	69fc      	ldr	r4, [r7, #28]
 8009a72:	b97c      	cbnz	r4, 8009a94 <__pow5mult+0x48>
 8009a74:	2010      	movs	r0, #16
 8009a76:	f7fd ffe7 	bl	8007a48 <malloc>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	61f8      	str	r0, [r7, #28]
 8009a7e:	b928      	cbnz	r0, 8009a8c <__pow5mult+0x40>
 8009a80:	4b1d      	ldr	r3, [pc, #116]	@ (8009af8 <__pow5mult+0xac>)
 8009a82:	481e      	ldr	r0, [pc, #120]	@ (8009afc <__pow5mult+0xb0>)
 8009a84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a88:	f000 fc20 	bl	800a2cc <__assert_func>
 8009a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a90:	6004      	str	r4, [r0, #0]
 8009a92:	60c4      	str	r4, [r0, #12]
 8009a94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a9c:	b94c      	cbnz	r4, 8009ab2 <__pow5mult+0x66>
 8009a9e:	f240 2171 	movw	r1, #625	@ 0x271
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f7ff ff12 	bl	80098cc <__i2b>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aae:	4604      	mov	r4, r0
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	07eb      	lsls	r3, r5, #31
 8009ab8:	d50a      	bpl.n	8009ad0 <__pow5mult+0x84>
 8009aba:	4631      	mov	r1, r6
 8009abc:	4622      	mov	r2, r4
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f7ff ff1a 	bl	80098f8 <__multiply>
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff fe4b 	bl	8009764 <_Bfree>
 8009ace:	4646      	mov	r6, r8
 8009ad0:	106d      	asrs	r5, r5, #1
 8009ad2:	d00b      	beq.n	8009aec <__pow5mult+0xa0>
 8009ad4:	6820      	ldr	r0, [r4, #0]
 8009ad6:	b938      	cbnz	r0, 8009ae8 <__pow5mult+0x9c>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4621      	mov	r1, r4
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ff0b 	bl	80098f8 <__multiply>
 8009ae2:	6020      	str	r0, [r4, #0]
 8009ae4:	f8c0 9000 	str.w	r9, [r0]
 8009ae8:	4604      	mov	r4, r0
 8009aea:	e7e4      	b.n	8009ab6 <__pow5mult+0x6a>
 8009aec:	4630      	mov	r0, r6
 8009aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af2:	bf00      	nop
 8009af4:	0800a5f0 	.word	0x0800a5f0
 8009af8:	0800a515 	.word	0x0800a515
 8009afc:	0800a595 	.word	0x0800a595

08009b00 <__lshift>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	460c      	mov	r4, r1
 8009b06:	6849      	ldr	r1, [r1, #4]
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	4607      	mov	r7, r0
 8009b12:	4691      	mov	r9, r2
 8009b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b18:	f108 0601 	add.w	r6, r8, #1
 8009b1c:	42b3      	cmp	r3, r6
 8009b1e:	db0b      	blt.n	8009b38 <__lshift+0x38>
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff fddf 	bl	80096e4 <_Balloc>
 8009b26:	4605      	mov	r5, r0
 8009b28:	b948      	cbnz	r0, 8009b3e <__lshift+0x3e>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	4b28      	ldr	r3, [pc, #160]	@ (8009bd0 <__lshift+0xd0>)
 8009b2e:	4829      	ldr	r0, [pc, #164]	@ (8009bd4 <__lshift+0xd4>)
 8009b30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b34:	f000 fbca 	bl	800a2cc <__assert_func>
 8009b38:	3101      	adds	r1, #1
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	e7ee      	b.n	8009b1c <__lshift+0x1c>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f100 0114 	add.w	r1, r0, #20
 8009b44:	f100 0210 	add.w	r2, r0, #16
 8009b48:	4618      	mov	r0, r3
 8009b4a:	4553      	cmp	r3, sl
 8009b4c:	db33      	blt.n	8009bb6 <__lshift+0xb6>
 8009b4e:	6920      	ldr	r0, [r4, #16]
 8009b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b54:	f104 0314 	add.w	r3, r4, #20
 8009b58:	f019 091f 	ands.w	r9, r9, #31
 8009b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b64:	d02b      	beq.n	8009bbe <__lshift+0xbe>
 8009b66:	f1c9 0e20 	rsb	lr, r9, #32
 8009b6a:	468a      	mov	sl, r1
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	fa00 f009 	lsl.w	r0, r0, r9
 8009b74:	4310      	orrs	r0, r2
 8009b76:	f84a 0b04 	str.w	r0, [sl], #4
 8009b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7e:	459c      	cmp	ip, r3
 8009b80:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b84:	d8f3      	bhi.n	8009b6e <__lshift+0x6e>
 8009b86:	ebac 0304 	sub.w	r3, ip, r4
 8009b8a:	3b15      	subs	r3, #21
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	3304      	adds	r3, #4
 8009b92:	f104 0015 	add.w	r0, r4, #21
 8009b96:	4584      	cmp	ip, r0
 8009b98:	bf38      	it	cc
 8009b9a:	2304      	movcc	r3, #4
 8009b9c:	50ca      	str	r2, [r1, r3]
 8009b9e:	b10a      	cbz	r2, 8009ba4 <__lshift+0xa4>
 8009ba0:	f108 0602 	add.w	r6, r8, #2
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	612e      	str	r6, [r5, #16]
 8009baa:	4621      	mov	r1, r4
 8009bac:	f7ff fdda 	bl	8009764 <_Bfree>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bba:	3301      	adds	r3, #1
 8009bbc:	e7c5      	b.n	8009b4a <__lshift+0x4a>
 8009bbe:	3904      	subs	r1, #4
 8009bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bc8:	459c      	cmp	ip, r3
 8009bca:	d8f9      	bhi.n	8009bc0 <__lshift+0xc0>
 8009bcc:	e7ea      	b.n	8009ba4 <__lshift+0xa4>
 8009bce:	bf00      	nop
 8009bd0:	0800a584 	.word	0x0800a584
 8009bd4:	0800a595 	.word	0x0800a595

08009bd8 <__mcmp>:
 8009bd8:	690a      	ldr	r2, [r1, #16]
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6900      	ldr	r0, [r0, #16]
 8009bde:	1a80      	subs	r0, r0, r2
 8009be0:	b530      	push	{r4, r5, lr}
 8009be2:	d10e      	bne.n	8009c02 <__mcmp+0x2a>
 8009be4:	3314      	adds	r3, #20
 8009be6:	3114      	adds	r1, #20
 8009be8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009bec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009bf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bf8:	4295      	cmp	r5, r2
 8009bfa:	d003      	beq.n	8009c04 <__mcmp+0x2c>
 8009bfc:	d205      	bcs.n	8009c0a <__mcmp+0x32>
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c02:	bd30      	pop	{r4, r5, pc}
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d3f3      	bcc.n	8009bf0 <__mcmp+0x18>
 8009c08:	e7fb      	b.n	8009c02 <__mcmp+0x2a>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e7f9      	b.n	8009c02 <__mcmp+0x2a>
	...

08009c10 <__mdiff>:
 8009c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	4689      	mov	r9, r1
 8009c16:	4606      	mov	r6, r0
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4648      	mov	r0, r9
 8009c1c:	4614      	mov	r4, r2
 8009c1e:	f7ff ffdb 	bl	8009bd8 <__mcmp>
 8009c22:	1e05      	subs	r5, r0, #0
 8009c24:	d112      	bne.n	8009c4c <__mdiff+0x3c>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff fd5b 	bl	80096e4 <_Balloc>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	b928      	cbnz	r0, 8009c3e <__mdiff+0x2e>
 8009c32:	4b3f      	ldr	r3, [pc, #252]	@ (8009d30 <__mdiff+0x120>)
 8009c34:	f240 2137 	movw	r1, #567	@ 0x237
 8009c38:	483e      	ldr	r0, [pc, #248]	@ (8009d34 <__mdiff+0x124>)
 8009c3a:	f000 fb47 	bl	800a2cc <__assert_func>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c44:	4610      	mov	r0, r2
 8009c46:	b003      	add	sp, #12
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	bfbc      	itt	lt
 8009c4e:	464b      	movlt	r3, r9
 8009c50:	46a1      	movlt	r9, r4
 8009c52:	4630      	mov	r0, r6
 8009c54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c58:	bfba      	itte	lt
 8009c5a:	461c      	movlt	r4, r3
 8009c5c:	2501      	movlt	r5, #1
 8009c5e:	2500      	movge	r5, #0
 8009c60:	f7ff fd40 	bl	80096e4 <_Balloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	b918      	cbnz	r0, 8009c70 <__mdiff+0x60>
 8009c68:	4b31      	ldr	r3, [pc, #196]	@ (8009d30 <__mdiff+0x120>)
 8009c6a:	f240 2145 	movw	r1, #581	@ 0x245
 8009c6e:	e7e3      	b.n	8009c38 <__mdiff+0x28>
 8009c70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c74:	6926      	ldr	r6, [r4, #16]
 8009c76:	60c5      	str	r5, [r0, #12]
 8009c78:	f109 0310 	add.w	r3, r9, #16
 8009c7c:	f109 0514 	add.w	r5, r9, #20
 8009c80:	f104 0e14 	add.w	lr, r4, #20
 8009c84:	f100 0b14 	add.w	fp, r0, #20
 8009c88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	46d9      	mov	r9, fp
 8009c94:	f04f 0c00 	mov.w	ip, #0
 8009c98:	9b01      	ldr	r3, [sp, #4]
 8009c9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	fa1f f38a 	uxth.w	r3, sl
 8009ca8:	4619      	mov	r1, r3
 8009caa:	b283      	uxth	r3, r0
 8009cac:	1acb      	subs	r3, r1, r3
 8009cae:	0c00      	lsrs	r0, r0, #16
 8009cb0:	4463      	add	r3, ip
 8009cb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009cb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009cc0:	4576      	cmp	r6, lr
 8009cc2:	f849 3b04 	str.w	r3, [r9], #4
 8009cc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cca:	d8e5      	bhi.n	8009c98 <__mdiff+0x88>
 8009ccc:	1b33      	subs	r3, r6, r4
 8009cce:	3b15      	subs	r3, #21
 8009cd0:	f023 0303 	bic.w	r3, r3, #3
 8009cd4:	3415      	adds	r4, #21
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	bf38      	it	cc
 8009cdc:	2304      	movcc	r3, #4
 8009cde:	441d      	add	r5, r3
 8009ce0:	445b      	add	r3, fp
 8009ce2:	461e      	mov	r6, r3
 8009ce4:	462c      	mov	r4, r5
 8009ce6:	4544      	cmp	r4, r8
 8009ce8:	d30e      	bcc.n	8009d08 <__mdiff+0xf8>
 8009cea:	f108 0103 	add.w	r1, r8, #3
 8009cee:	1b49      	subs	r1, r1, r5
 8009cf0:	f021 0103 	bic.w	r1, r1, #3
 8009cf4:	3d03      	subs	r5, #3
 8009cf6:	45a8      	cmp	r8, r5
 8009cf8:	bf38      	it	cc
 8009cfa:	2100      	movcc	r1, #0
 8009cfc:	440b      	add	r3, r1
 8009cfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d02:	b191      	cbz	r1, 8009d2a <__mdiff+0x11a>
 8009d04:	6117      	str	r7, [r2, #16]
 8009d06:	e79d      	b.n	8009c44 <__mdiff+0x34>
 8009d08:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d0c:	46e6      	mov	lr, ip
 8009d0e:	0c08      	lsrs	r0, r1, #16
 8009d10:	fa1c fc81 	uxtah	ip, ip, r1
 8009d14:	4471      	add	r1, lr
 8009d16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d1a:	b289      	uxth	r1, r1
 8009d1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d20:	f846 1b04 	str.w	r1, [r6], #4
 8009d24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d28:	e7dd      	b.n	8009ce6 <__mdiff+0xd6>
 8009d2a:	3f01      	subs	r7, #1
 8009d2c:	e7e7      	b.n	8009cfe <__mdiff+0xee>
 8009d2e:	bf00      	nop
 8009d30:	0800a584 	.word	0x0800a584
 8009d34:	0800a595 	.word	0x0800a595

08009d38 <__d2b>:
 8009d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	460f      	mov	r7, r1
 8009d3e:	2101      	movs	r1, #1
 8009d40:	ec59 8b10 	vmov	r8, r9, d0
 8009d44:	4616      	mov	r6, r2
 8009d46:	f7ff fccd 	bl	80096e4 <_Balloc>
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	b930      	cbnz	r0, 8009d5c <__d2b+0x24>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	4b23      	ldr	r3, [pc, #140]	@ (8009de0 <__d2b+0xa8>)
 8009d52:	4824      	ldr	r0, [pc, #144]	@ (8009de4 <__d2b+0xac>)
 8009d54:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d58:	f000 fab8 	bl	800a2cc <__assert_func>
 8009d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d64:	b10d      	cbz	r5, 8009d6a <__d2b+0x32>
 8009d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8009d70:	d023      	beq.n	8009dba <__d2b+0x82>
 8009d72:	4668      	mov	r0, sp
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	f7ff fd7c 	bl	8009872 <__lo0bits>
 8009d7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d7e:	b1d0      	cbz	r0, 8009db6 <__d2b+0x7e>
 8009d80:	f1c0 0320 	rsb	r3, r0, #32
 8009d84:	fa02 f303 	lsl.w	r3, r2, r3
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	40c2      	lsrs	r2, r0
 8009d8c:	6163      	str	r3, [r4, #20]
 8009d8e:	9201      	str	r2, [sp, #4]
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	61a3      	str	r3, [r4, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bf0c      	ite	eq
 8009d98:	2201      	moveq	r2, #1
 8009d9a:	2202      	movne	r2, #2
 8009d9c:	6122      	str	r2, [r4, #16]
 8009d9e:	b1a5      	cbz	r5, 8009dca <__d2b+0x92>
 8009da0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009da4:	4405      	add	r5, r0
 8009da6:	603d      	str	r5, [r7, #0]
 8009da8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dac:	6030      	str	r0, [r6, #0]
 8009dae:	4620      	mov	r0, r4
 8009db0:	b003      	add	sp, #12
 8009db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009db6:	6161      	str	r1, [r4, #20]
 8009db8:	e7ea      	b.n	8009d90 <__d2b+0x58>
 8009dba:	a801      	add	r0, sp, #4
 8009dbc:	f7ff fd59 	bl	8009872 <__lo0bits>
 8009dc0:	9b01      	ldr	r3, [sp, #4]
 8009dc2:	6163      	str	r3, [r4, #20]
 8009dc4:	3020      	adds	r0, #32
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	e7e8      	b.n	8009d9c <__d2b+0x64>
 8009dca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dd2:	6038      	str	r0, [r7, #0]
 8009dd4:	6918      	ldr	r0, [r3, #16]
 8009dd6:	f7ff fd2d 	bl	8009834 <__hi0bits>
 8009dda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dde:	e7e5      	b.n	8009dac <__d2b+0x74>
 8009de0:	0800a584 	.word	0x0800a584
 8009de4:	0800a595 	.word	0x0800a595

08009de8 <__sfputc_r>:
 8009de8:	6893      	ldr	r3, [r2, #8]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	b410      	push	{r4}
 8009df0:	6093      	str	r3, [r2, #8]
 8009df2:	da08      	bge.n	8009e06 <__sfputc_r+0x1e>
 8009df4:	6994      	ldr	r4, [r2, #24]
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	db01      	blt.n	8009dfe <__sfputc_r+0x16>
 8009dfa:	290a      	cmp	r1, #10
 8009dfc:	d103      	bne.n	8009e06 <__sfputc_r+0x1e>
 8009dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e02:	f7fe bca4 	b.w	800874e <__swbuf_r>
 8009e06:	6813      	ldr	r3, [r2, #0]
 8009e08:	1c58      	adds	r0, r3, #1
 8009e0a:	6010      	str	r0, [r2, #0]
 8009e0c:	7019      	strb	r1, [r3, #0]
 8009e0e:	4608      	mov	r0, r1
 8009e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <__sfputs_r>:
 8009e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	18d5      	adds	r5, r2, r3
 8009e20:	42ac      	cmp	r4, r5
 8009e22:	d101      	bne.n	8009e28 <__sfputs_r+0x12>
 8009e24:	2000      	movs	r0, #0
 8009e26:	e007      	b.n	8009e38 <__sfputs_r+0x22>
 8009e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2c:	463a      	mov	r2, r7
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7ff ffda 	bl	8009de8 <__sfputc_r>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d1f3      	bne.n	8009e20 <__sfputs_r+0xa>
 8009e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e3c <_vfiprintf_r>:
 8009e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e40:	460d      	mov	r5, r1
 8009e42:	b09d      	sub	sp, #116	@ 0x74
 8009e44:	4614      	mov	r4, r2
 8009e46:	4698      	mov	r8, r3
 8009e48:	4606      	mov	r6, r0
 8009e4a:	b118      	cbz	r0, 8009e54 <_vfiprintf_r+0x18>
 8009e4c:	6a03      	ldr	r3, [r0, #32]
 8009e4e:	b90b      	cbnz	r3, 8009e54 <_vfiprintf_r+0x18>
 8009e50:	f7fe fb94 	bl	800857c <__sinit>
 8009e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e56:	07d9      	lsls	r1, r3, #31
 8009e58:	d405      	bmi.n	8009e66 <_vfiprintf_r+0x2a>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	059a      	lsls	r2, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_vfiprintf_r+0x2a>
 8009e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e62:	f7fe fd96 	bl	8008992 <__retarget_lock_acquire_recursive>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	071b      	lsls	r3, r3, #28
 8009e6a:	d501      	bpl.n	8009e70 <_vfiprintf_r+0x34>
 8009e6c:	692b      	ldr	r3, [r5, #16]
 8009e6e:	b99b      	cbnz	r3, 8009e98 <_vfiprintf_r+0x5c>
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7fe fcaa 	bl	80087cc <__swsetup_r>
 8009e78:	b170      	cbz	r0, 8009e98 <_vfiprintf_r+0x5c>
 8009e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e7c:	07dc      	lsls	r4, r3, #31
 8009e7e:	d504      	bpl.n	8009e8a <_vfiprintf_r+0x4e>
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e84:	b01d      	add	sp, #116	@ 0x74
 8009e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8a:	89ab      	ldrh	r3, [r5, #12]
 8009e8c:	0598      	lsls	r0, r3, #22
 8009e8e:	d4f7      	bmi.n	8009e80 <_vfiprintf_r+0x44>
 8009e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e92:	f7fe fd7f 	bl	8008994 <__retarget_lock_release_recursive>
 8009e96:	e7f3      	b.n	8009e80 <_vfiprintf_r+0x44>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e9c:	2320      	movs	r3, #32
 8009e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea6:	2330      	movs	r3, #48	@ 0x30
 8009ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a058 <_vfiprintf_r+0x21c>
 8009eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009eb0:	f04f 0901 	mov.w	r9, #1
 8009eb4:	4623      	mov	r3, r4
 8009eb6:	469a      	mov	sl, r3
 8009eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ebc:	b10a      	cbz	r2, 8009ec2 <_vfiprintf_r+0x86>
 8009ebe:	2a25      	cmp	r2, #37	@ 0x25
 8009ec0:	d1f9      	bne.n	8009eb6 <_vfiprintf_r+0x7a>
 8009ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec6:	d00b      	beq.n	8009ee0 <_vfiprintf_r+0xa4>
 8009ec8:	465b      	mov	r3, fp
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4629      	mov	r1, r5
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f7ff ffa1 	bl	8009e16 <__sfputs_r>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	f000 80a7 	beq.w	800a028 <_vfiprintf_r+0x1ec>
 8009eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009edc:	445a      	add	r2, fp
 8009ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 809f 	beq.w	800a028 <_vfiprintf_r+0x1ec>
 8009eea:	2300      	movs	r3, #0
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef4:	f10a 0a01 	add.w	sl, sl, #1
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	9307      	str	r3, [sp, #28]
 8009efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f02:	4654      	mov	r4, sl
 8009f04:	2205      	movs	r2, #5
 8009f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0a:	4853      	ldr	r0, [pc, #332]	@ (800a058 <_vfiprintf_r+0x21c>)
 8009f0c:	f7f6 f988 	bl	8000220 <memchr>
 8009f10:	9a04      	ldr	r2, [sp, #16]
 8009f12:	b9d8      	cbnz	r0, 8009f4c <_vfiprintf_r+0x110>
 8009f14:	06d1      	lsls	r1, r2, #27
 8009f16:	bf44      	itt	mi
 8009f18:	2320      	movmi	r3, #32
 8009f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f1e:	0713      	lsls	r3, r2, #28
 8009f20:	bf44      	itt	mi
 8009f22:	232b      	movmi	r3, #43	@ 0x2b
 8009f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f28:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f2e:	d015      	beq.n	8009f5c <_vfiprintf_r+0x120>
 8009f30:	9a07      	ldr	r2, [sp, #28]
 8009f32:	4654      	mov	r4, sl
 8009f34:	2000      	movs	r0, #0
 8009f36:	f04f 0c0a 	mov.w	ip, #10
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f40:	3b30      	subs	r3, #48	@ 0x30
 8009f42:	2b09      	cmp	r3, #9
 8009f44:	d94b      	bls.n	8009fde <_vfiprintf_r+0x1a2>
 8009f46:	b1b0      	cbz	r0, 8009f76 <_vfiprintf_r+0x13a>
 8009f48:	9207      	str	r2, [sp, #28]
 8009f4a:	e014      	b.n	8009f76 <_vfiprintf_r+0x13a>
 8009f4c:	eba0 0308 	sub.w	r3, r0, r8
 8009f50:	fa09 f303 	lsl.w	r3, r9, r3
 8009f54:	4313      	orrs	r3, r2
 8009f56:	9304      	str	r3, [sp, #16]
 8009f58:	46a2      	mov	sl, r4
 8009f5a:	e7d2      	b.n	8009f02 <_vfiprintf_r+0xc6>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	1d19      	adds	r1, r3, #4
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	9103      	str	r1, [sp, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	bfbb      	ittet	lt
 8009f68:	425b      	neglt	r3, r3
 8009f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f6e:	9307      	strge	r3, [sp, #28]
 8009f70:	9307      	strlt	r3, [sp, #28]
 8009f72:	bfb8      	it	lt
 8009f74:	9204      	strlt	r2, [sp, #16]
 8009f76:	7823      	ldrb	r3, [r4, #0]
 8009f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f7a:	d10a      	bne.n	8009f92 <_vfiprintf_r+0x156>
 8009f7c:	7863      	ldrb	r3, [r4, #1]
 8009f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f80:	d132      	bne.n	8009fe8 <_vfiprintf_r+0x1ac>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	1d1a      	adds	r2, r3, #4
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	9203      	str	r2, [sp, #12]
 8009f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f8e:	3402      	adds	r4, #2
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a068 <_vfiprintf_r+0x22c>
 8009f96:	7821      	ldrb	r1, [r4, #0]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f7f6 f940 	bl	8000220 <memchr>
 8009fa0:	b138      	cbz	r0, 8009fb2 <_vfiprintf_r+0x176>
 8009fa2:	9b04      	ldr	r3, [sp, #16]
 8009fa4:	eba0 000a 	sub.w	r0, r0, sl
 8009fa8:	2240      	movs	r2, #64	@ 0x40
 8009faa:	4082      	lsls	r2, r0
 8009fac:	4313      	orrs	r3, r2
 8009fae:	3401      	adds	r4, #1
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb6:	4829      	ldr	r0, [pc, #164]	@ (800a05c <_vfiprintf_r+0x220>)
 8009fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fbc:	2206      	movs	r2, #6
 8009fbe:	f7f6 f92f 	bl	8000220 <memchr>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d03f      	beq.n	800a046 <_vfiprintf_r+0x20a>
 8009fc6:	4b26      	ldr	r3, [pc, #152]	@ (800a060 <_vfiprintf_r+0x224>)
 8009fc8:	bb1b      	cbnz	r3, 800a012 <_vfiprintf_r+0x1d6>
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	f023 0307 	bic.w	r3, r3, #7
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	9303      	str	r3, [sp, #12]
 8009fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd8:	443b      	add	r3, r7
 8009fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fdc:	e76a      	b.n	8009eb4 <_vfiprintf_r+0x78>
 8009fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	e7a8      	b.n	8009f3a <_vfiprintf_r+0xfe>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	3401      	adds	r4, #1
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	f04f 0c0a 	mov.w	ip, #10
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffa:	3a30      	subs	r2, #48	@ 0x30
 8009ffc:	2a09      	cmp	r2, #9
 8009ffe:	d903      	bls.n	800a008 <_vfiprintf_r+0x1cc>
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0c6      	beq.n	8009f92 <_vfiprintf_r+0x156>
 800a004:	9105      	str	r1, [sp, #20]
 800a006:	e7c4      	b.n	8009f92 <_vfiprintf_r+0x156>
 800a008:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00c:	4604      	mov	r4, r0
 800a00e:	2301      	movs	r3, #1
 800a010:	e7f0      	b.n	8009ff4 <_vfiprintf_r+0x1b8>
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	462a      	mov	r2, r5
 800a018:	4b12      	ldr	r3, [pc, #72]	@ (800a064 <_vfiprintf_r+0x228>)
 800a01a:	a904      	add	r1, sp, #16
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7fd fe69 	bl	8007cf4 <_printf_float>
 800a022:	4607      	mov	r7, r0
 800a024:	1c78      	adds	r0, r7, #1
 800a026:	d1d6      	bne.n	8009fd6 <_vfiprintf_r+0x19a>
 800a028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a02a:	07d9      	lsls	r1, r3, #31
 800a02c:	d405      	bmi.n	800a03a <_vfiprintf_r+0x1fe>
 800a02e:	89ab      	ldrh	r3, [r5, #12]
 800a030:	059a      	lsls	r2, r3, #22
 800a032:	d402      	bmi.n	800a03a <_vfiprintf_r+0x1fe>
 800a034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a036:	f7fe fcad 	bl	8008994 <__retarget_lock_release_recursive>
 800a03a:	89ab      	ldrh	r3, [r5, #12]
 800a03c:	065b      	lsls	r3, r3, #25
 800a03e:	f53f af1f 	bmi.w	8009e80 <_vfiprintf_r+0x44>
 800a042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a044:	e71e      	b.n	8009e84 <_vfiprintf_r+0x48>
 800a046:	ab03      	add	r3, sp, #12
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	462a      	mov	r2, r5
 800a04c:	4b05      	ldr	r3, [pc, #20]	@ (800a064 <_vfiprintf_r+0x228>)
 800a04e:	a904      	add	r1, sp, #16
 800a050:	4630      	mov	r0, r6
 800a052:	f7fe f8e7 	bl	8008224 <_printf_i>
 800a056:	e7e4      	b.n	800a022 <_vfiprintf_r+0x1e6>
 800a058:	0800a6f0 	.word	0x0800a6f0
 800a05c:	0800a6fa 	.word	0x0800a6fa
 800a060:	08007cf5 	.word	0x08007cf5
 800a064:	08009e17 	.word	0x08009e17
 800a068:	0800a6f6 	.word	0x0800a6f6

0800a06c <__sflush_r>:
 800a06c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	0716      	lsls	r6, r2, #28
 800a076:	4605      	mov	r5, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	d454      	bmi.n	800a126 <__sflush_r+0xba>
 800a07c:	684b      	ldr	r3, [r1, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc02      	bgt.n	800a088 <__sflush_r+0x1c>
 800a082:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a084:	2b00      	cmp	r3, #0
 800a086:	dd48      	ble.n	800a11a <__sflush_r+0xae>
 800a088:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d045      	beq.n	800a11a <__sflush_r+0xae>
 800a08e:	2300      	movs	r3, #0
 800a090:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a094:	682f      	ldr	r7, [r5, #0]
 800a096:	6a21      	ldr	r1, [r4, #32]
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	d030      	beq.n	800a0fe <__sflush_r+0x92>
 800a09c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	0759      	lsls	r1, r3, #29
 800a0a2:	d505      	bpl.n	800a0b0 <__sflush_r+0x44>
 800a0a4:	6863      	ldr	r3, [r4, #4]
 800a0a6:	1ad2      	subs	r2, r2, r3
 800a0a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0aa:	b10b      	cbz	r3, 800a0b0 <__sflush_r+0x44>
 800a0ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0ae:	1ad2      	subs	r2, r2, r3
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0b4:	6a21      	ldr	r1, [r4, #32]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b0      	blx	r6
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	d106      	bne.n	800a0ce <__sflush_r+0x62>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	291d      	cmp	r1, #29
 800a0c4:	d82b      	bhi.n	800a11e <__sflush_r+0xb2>
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a170 <__sflush_r+0x104>)
 800a0c8:	410a      	asrs	r2, r1
 800a0ca:	07d6      	lsls	r6, r2, #31
 800a0cc:	d427      	bmi.n	800a11e <__sflush_r+0xb2>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6062      	str	r2, [r4, #4]
 800a0d2:	04d9      	lsls	r1, r3, #19
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	6022      	str	r2, [r4, #0]
 800a0d8:	d504      	bpl.n	800a0e4 <__sflush_r+0x78>
 800a0da:	1c42      	adds	r2, r0, #1
 800a0dc:	d101      	bne.n	800a0e2 <__sflush_r+0x76>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b903      	cbnz	r3, 800a0e4 <__sflush_r+0x78>
 800a0e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0e6:	602f      	str	r7, [r5, #0]
 800a0e8:	b1b9      	cbz	r1, 800a11a <__sflush_r+0xae>
 800a0ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	d002      	beq.n	800a0f8 <__sflush_r+0x8c>
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f7ff faac 	bl	8009650 <_free_r>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0fc:	e00d      	b.n	800a11a <__sflush_r+0xae>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4628      	mov	r0, r5
 800a102:	47b0      	blx	r6
 800a104:	4602      	mov	r2, r0
 800a106:	1c50      	adds	r0, r2, #1
 800a108:	d1c9      	bne.n	800a09e <__sflush_r+0x32>
 800a10a:	682b      	ldr	r3, [r5, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0c6      	beq.n	800a09e <__sflush_r+0x32>
 800a110:	2b1d      	cmp	r3, #29
 800a112:	d001      	beq.n	800a118 <__sflush_r+0xac>
 800a114:	2b16      	cmp	r3, #22
 800a116:	d11e      	bne.n	800a156 <__sflush_r+0xea>
 800a118:	602f      	str	r7, [r5, #0]
 800a11a:	2000      	movs	r0, #0
 800a11c:	e022      	b.n	800a164 <__sflush_r+0xf8>
 800a11e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a122:	b21b      	sxth	r3, r3
 800a124:	e01b      	b.n	800a15e <__sflush_r+0xf2>
 800a126:	690f      	ldr	r7, [r1, #16]
 800a128:	2f00      	cmp	r7, #0
 800a12a:	d0f6      	beq.n	800a11a <__sflush_r+0xae>
 800a12c:	0793      	lsls	r3, r2, #30
 800a12e:	680e      	ldr	r6, [r1, #0]
 800a130:	bf08      	it	eq
 800a132:	694b      	ldreq	r3, [r1, #20]
 800a134:	600f      	str	r7, [r1, #0]
 800a136:	bf18      	it	ne
 800a138:	2300      	movne	r3, #0
 800a13a:	eba6 0807 	sub.w	r8, r6, r7
 800a13e:	608b      	str	r3, [r1, #8]
 800a140:	f1b8 0f00 	cmp.w	r8, #0
 800a144:	dde9      	ble.n	800a11a <__sflush_r+0xae>
 800a146:	6a21      	ldr	r1, [r4, #32]
 800a148:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a14a:	4643      	mov	r3, r8
 800a14c:	463a      	mov	r2, r7
 800a14e:	4628      	mov	r0, r5
 800a150:	47b0      	blx	r6
 800a152:	2800      	cmp	r0, #0
 800a154:	dc08      	bgt.n	800a168 <__sflush_r+0xfc>
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	4407      	add	r7, r0
 800a16a:	eba8 0800 	sub.w	r8, r8, r0
 800a16e:	e7e7      	b.n	800a140 <__sflush_r+0xd4>
 800a170:	dfbffffe 	.word	0xdfbffffe

0800a174 <_fflush_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b913      	cbnz	r3, 800a184 <_fflush_r+0x10>
 800a17e:	2500      	movs	r5, #0
 800a180:	4628      	mov	r0, r5
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	b118      	cbz	r0, 800a18e <_fflush_r+0x1a>
 800a186:	6a03      	ldr	r3, [r0, #32]
 800a188:	b90b      	cbnz	r3, 800a18e <_fflush_r+0x1a>
 800a18a:	f7fe f9f7 	bl	800857c <__sinit>
 800a18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f3      	beq.n	800a17e <_fflush_r+0xa>
 800a196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a198:	07d0      	lsls	r0, r2, #31
 800a19a:	d404      	bmi.n	800a1a6 <_fflush_r+0x32>
 800a19c:	0599      	lsls	r1, r3, #22
 800a19e:	d402      	bmi.n	800a1a6 <_fflush_r+0x32>
 800a1a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1a2:	f7fe fbf6 	bl	8008992 <__retarget_lock_acquire_recursive>
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	f7ff ff5f 	bl	800a06c <__sflush_r>
 800a1ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1b0:	07da      	lsls	r2, r3, #31
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	d4e4      	bmi.n	800a180 <_fflush_r+0xc>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	059b      	lsls	r3, r3, #22
 800a1ba:	d4e1      	bmi.n	800a180 <_fflush_r+0xc>
 800a1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1be:	f7fe fbe9 	bl	8008994 <__retarget_lock_release_recursive>
 800a1c2:	e7dd      	b.n	800a180 <_fflush_r+0xc>

0800a1c4 <__swhatbuf_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	b096      	sub	sp, #88	@ 0x58
 800a1d0:	4615      	mov	r5, r2
 800a1d2:	461e      	mov	r6, r3
 800a1d4:	da0d      	bge.n	800a1f2 <__swhatbuf_r+0x2e>
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1dc:	f04f 0100 	mov.w	r1, #0
 800a1e0:	bf14      	ite	ne
 800a1e2:	2340      	movne	r3, #64	@ 0x40
 800a1e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	6031      	str	r1, [r6, #0]
 800a1ec:	602b      	str	r3, [r5, #0]
 800a1ee:	b016      	add	sp, #88	@ 0x58
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	466a      	mov	r2, sp
 800a1f4:	f000 f848 	bl	800a288 <_fstat_r>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	dbec      	blt.n	800a1d6 <__swhatbuf_r+0x12>
 800a1fc:	9901      	ldr	r1, [sp, #4]
 800a1fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a206:	4259      	negs	r1, r3
 800a208:	4159      	adcs	r1, r3
 800a20a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a20e:	e7eb      	b.n	800a1e8 <__swhatbuf_r+0x24>

0800a210 <__smakebuf_r>:
 800a210:	898b      	ldrh	r3, [r1, #12]
 800a212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a214:	079d      	lsls	r5, r3, #30
 800a216:	4606      	mov	r6, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	d507      	bpl.n	800a22c <__smakebuf_r+0x1c>
 800a21c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	6123      	str	r3, [r4, #16]
 800a224:	2301      	movs	r3, #1
 800a226:	6163      	str	r3, [r4, #20]
 800a228:	b003      	add	sp, #12
 800a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22c:	ab01      	add	r3, sp, #4
 800a22e:	466a      	mov	r2, sp
 800a230:	f7ff ffc8 	bl	800a1c4 <__swhatbuf_r>
 800a234:	9f00      	ldr	r7, [sp, #0]
 800a236:	4605      	mov	r5, r0
 800a238:	4639      	mov	r1, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7fd fc2e 	bl	8007a9c <_malloc_r>
 800a240:	b948      	cbnz	r0, 800a256 <__smakebuf_r+0x46>
 800a242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a246:	059a      	lsls	r2, r3, #22
 800a248:	d4ee      	bmi.n	800a228 <__smakebuf_r+0x18>
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	f043 0302 	orr.w	r3, r3, #2
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	e7e2      	b.n	800a21c <__smakebuf_r+0xc>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	6020      	str	r0, [r4, #0]
 800a25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25e:	81a3      	strh	r3, [r4, #12]
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a266:	b15b      	cbz	r3, 800a280 <__smakebuf_r+0x70>
 800a268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 f81d 	bl	800a2ac <_isatty_r>
 800a272:	b128      	cbz	r0, 800a280 <__smakebuf_r+0x70>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	431d      	orrs	r5, r3
 800a284:	81a5      	strh	r5, [r4, #12]
 800a286:	e7cf      	b.n	800a228 <__smakebuf_r+0x18>

0800a288 <_fstat_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d07      	ldr	r5, [pc, #28]	@ (800a2a8 <_fstat_r+0x20>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	4611      	mov	r1, r2
 800a294:	602b      	str	r3, [r5, #0]
 800a296:	f7f7 fcb5 	bl	8001c04 <_fstat>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d102      	bne.n	800a2a4 <_fstat_r+0x1c>
 800a29e:	682b      	ldr	r3, [r5, #0]
 800a2a0:	b103      	cbz	r3, 800a2a4 <_fstat_r+0x1c>
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	bd38      	pop	{r3, r4, r5, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000758 	.word	0x20000758

0800a2ac <_isatty_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d06      	ldr	r5, [pc, #24]	@ (800a2c8 <_isatty_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	f7f7 fcb4 	bl	8001c24 <_isatty>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_isatty_r+0x1a>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_isatty_r+0x1a>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20000758 	.word	0x20000758

0800a2cc <__assert_func>:
 800a2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ce:	4614      	mov	r4, r2
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b09      	ldr	r3, [pc, #36]	@ (800a2f8 <__assert_func+0x2c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	68d8      	ldr	r0, [r3, #12]
 800a2da:	b954      	cbnz	r4, 800a2f2 <__assert_func+0x26>
 800a2dc:	4b07      	ldr	r3, [pc, #28]	@ (800a2fc <__assert_func+0x30>)
 800a2de:	461c      	mov	r4, r3
 800a2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e4:	9100      	str	r1, [sp, #0]
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	4905      	ldr	r1, [pc, #20]	@ (800a300 <__assert_func+0x34>)
 800a2ea:	f000 f841 	bl	800a370 <fiprintf>
 800a2ee:	f000 f851 	bl	800a394 <abort>
 800a2f2:	4b04      	ldr	r3, [pc, #16]	@ (800a304 <__assert_func+0x38>)
 800a2f4:	e7f4      	b.n	800a2e0 <__assert_func+0x14>
 800a2f6:	bf00      	nop
 800a2f8:	20000018 	.word	0x20000018
 800a2fc:	0800a746 	.word	0x0800a746
 800a300:	0800a718 	.word	0x0800a718
 800a304:	0800a70b 	.word	0x0800a70b

0800a308 <_calloc_r>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	fba1 5402 	umull	r5, r4, r1, r2
 800a30e:	b93c      	cbnz	r4, 800a320 <_calloc_r+0x18>
 800a310:	4629      	mov	r1, r5
 800a312:	f7fd fbc3 	bl	8007a9c <_malloc_r>
 800a316:	4606      	mov	r6, r0
 800a318:	b928      	cbnz	r0, 800a326 <_calloc_r+0x1e>
 800a31a:	2600      	movs	r6, #0
 800a31c:	4630      	mov	r0, r6
 800a31e:	bd70      	pop	{r4, r5, r6, pc}
 800a320:	220c      	movs	r2, #12
 800a322:	6002      	str	r2, [r0, #0]
 800a324:	e7f9      	b.n	800a31a <_calloc_r+0x12>
 800a326:	462a      	mov	r2, r5
 800a328:	4621      	mov	r1, r4
 800a32a:	f7fe faa5 	bl	8008878 <memset>
 800a32e:	e7f5      	b.n	800a31c <_calloc_r+0x14>

0800a330 <__ascii_mbtowc>:
 800a330:	b082      	sub	sp, #8
 800a332:	b901      	cbnz	r1, 800a336 <__ascii_mbtowc+0x6>
 800a334:	a901      	add	r1, sp, #4
 800a336:	b142      	cbz	r2, 800a34a <__ascii_mbtowc+0x1a>
 800a338:	b14b      	cbz	r3, 800a34e <__ascii_mbtowc+0x1e>
 800a33a:	7813      	ldrb	r3, [r2, #0]
 800a33c:	600b      	str	r3, [r1, #0]
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	1e10      	subs	r0, r2, #0
 800a342:	bf18      	it	ne
 800a344:	2001      	movne	r0, #1
 800a346:	b002      	add	sp, #8
 800a348:	4770      	bx	lr
 800a34a:	4610      	mov	r0, r2
 800a34c:	e7fb      	b.n	800a346 <__ascii_mbtowc+0x16>
 800a34e:	f06f 0001 	mvn.w	r0, #1
 800a352:	e7f8      	b.n	800a346 <__ascii_mbtowc+0x16>

0800a354 <__ascii_wctomb>:
 800a354:	4603      	mov	r3, r0
 800a356:	4608      	mov	r0, r1
 800a358:	b141      	cbz	r1, 800a36c <__ascii_wctomb+0x18>
 800a35a:	2aff      	cmp	r2, #255	@ 0xff
 800a35c:	d904      	bls.n	800a368 <__ascii_wctomb+0x14>
 800a35e:	228a      	movs	r2, #138	@ 0x8a
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a366:	4770      	bx	lr
 800a368:	700a      	strb	r2, [r1, #0]
 800a36a:	2001      	movs	r0, #1
 800a36c:	4770      	bx	lr
	...

0800a370 <fiprintf>:
 800a370:	b40e      	push	{r1, r2, r3}
 800a372:	b503      	push	{r0, r1, lr}
 800a374:	4601      	mov	r1, r0
 800a376:	ab03      	add	r3, sp, #12
 800a378:	4805      	ldr	r0, [pc, #20]	@ (800a390 <fiprintf+0x20>)
 800a37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37e:	6800      	ldr	r0, [r0, #0]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f7ff fd5b 	bl	8009e3c <_vfiprintf_r>
 800a386:	b002      	add	sp, #8
 800a388:	f85d eb04 	ldr.w	lr, [sp], #4
 800a38c:	b003      	add	sp, #12
 800a38e:	4770      	bx	lr
 800a390:	20000018 	.word	0x20000018

0800a394 <abort>:
 800a394:	b508      	push	{r3, lr}
 800a396:	2006      	movs	r0, #6
 800a398:	f000 f82c 	bl	800a3f4 <raise>
 800a39c:	2001      	movs	r0, #1
 800a39e:	f7f7 fbe1 	bl	8001b64 <_exit>

0800a3a2 <_raise_r>:
 800a3a2:	291f      	cmp	r1, #31
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d904      	bls.n	800a3b6 <_raise_r+0x14>
 800a3ac:	2316      	movs	r3, #22
 800a3ae:	6003      	str	r3, [r0, #0]
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a3b8:	b112      	cbz	r2, 800a3c0 <_raise_r+0x1e>
 800a3ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3be:	b94b      	cbnz	r3, 800a3d4 <_raise_r+0x32>
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f000 f831 	bl	800a428 <_getpid_r>
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3d0:	f000 b818 	b.w	800a404 <_kill_r>
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d00a      	beq.n	800a3ee <_raise_r+0x4c>
 800a3d8:	1c59      	adds	r1, r3, #1
 800a3da:	d103      	bne.n	800a3e4 <_raise_r+0x42>
 800a3dc:	2316      	movs	r3, #22
 800a3de:	6003      	str	r3, [r0, #0]
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	e7e7      	b.n	800a3b4 <_raise_r+0x12>
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	4798      	blx	r3
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	e7e0      	b.n	800a3b4 <_raise_r+0x12>
	...

0800a3f4 <raise>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	@ (800a400 <raise+0xc>)
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	f7ff bfd2 	b.w	800a3a2 <_raise_r>
 800a3fe:	bf00      	nop
 800a400:	20000018 	.word	0x20000018

0800a404 <_kill_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d07      	ldr	r5, [pc, #28]	@ (800a424 <_kill_r+0x20>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	4611      	mov	r1, r2
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	f7f7 fb97 	bl	8001b44 <_kill>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	d102      	bne.n	800a420 <_kill_r+0x1c>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	b103      	cbz	r3, 800a420 <_kill_r+0x1c>
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	bd38      	pop	{r3, r4, r5, pc}
 800a422:	bf00      	nop
 800a424:	20000758 	.word	0x20000758

0800a428 <_getpid_r>:
 800a428:	f7f7 bb84 	b.w	8001b34 <_getpid>

0800a42c <_init>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr

0800a438 <_fini>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	bf00      	nop
 800a43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43e:	bc08      	pop	{r3}
 800a440:	469e      	mov	lr, r3
 800a442:	4770      	bx	lr
