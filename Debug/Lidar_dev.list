
Lidar_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a7c8  0800a7c8  0000b7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac18  0800ac18  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac18  0800ac18  0000bc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac20  0800ac20  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac20  0800ac20  0000bc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac24  0800ac24  0000bc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ac28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  200001d4  0800adfc  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800adfc  0000c740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d68b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c22  00000000  00000000  0002988f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b7  00000000  00000000  0002ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e84  00000000  00000000  000301cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecf3  00000000  00000000  00035053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e10d7  00000000  00000000  00053d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134e1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d0c  00000000  00000000  00134e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0013cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7ac 	.word	0x0800a7ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a7ac 	.word	0x0800a7ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f007 fcfd 	bl	8008900 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0e:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f50:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f76:	f001 fb59 	bl	800262c <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f80:	f000 fca5 	bl	80018ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000f90:	f002 f8e6 	bl	8003160 <HAL_ADCEx_MultiModeConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f9a:	f000 fc98 	bl	80018ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_ADC1_Init+0xf0>)
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000faa:	237f      	movs	r3, #127	@ 0x7f
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_ADC1_Init+0xec>)
 8000fbc:	f001 fcba 	bl	8002934 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fc6:	f000 fc82 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	@ 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001f0 	.word	0x200001f0
 8000fd8:	21800100 	.word	0x21800100

08000fdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09a      	sub	sp, #104	@ 0x68
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2244      	movs	r2, #68	@ 0x44
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fc7f 	bl	8008900 <memset>
  if(adcHandle->Instance==ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100a:	d15e      	bne.n	80010ca <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800100c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001010:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001012:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001016:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fd7b 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001028:	f000 fc51 	bl	80018ce <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800102c:	4b29      	ldr	r3, [pc, #164]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001030:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 8001032:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001038:	4b26      	ldr	r3, [pc, #152]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001050:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_ADC_MspInit+0xf8>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800105c:	2304      	movs	r3, #4
 800105e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001060:	2303      	movs	r3, #3
 8001062:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	4619      	mov	r1, r3
 800106e:	481a      	ldr	r0, [pc, #104]	@ (80010d8 <HAL_ADC_MspInit+0xfc>)
 8001070:	f002 fca4 	bl	80039bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001076:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <HAL_ADC_MspInit+0x104>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 800107c:	2205      	movs	r2, #5
 800107e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 8001094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 800109c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010ae:	480b      	ldr	r0, [pc, #44]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010b0:	f002 fa0a 	bl	80034c8 <HAL_DMA_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80010ba:	f000 fc08 	bl	80018ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80010c4:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <HAL_ADC_MspInit+0x100>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3768      	adds	r7, #104	@ 0x68
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000800 	.word	0x48000800
 80010dc:	2000025c 	.word	0x2000025c
 80010e0:	40020008 	.word	0x40020008

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_DMA_Init+0x50>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ee:	4a11      	ldr	r2, [pc, #68]	@ (8001134 <MX_DMA_Init+0x50>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_DMA_Init+0x50>)
 80010f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_DMA_Init+0x50>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001106:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <MX_DMA_Init+0x50>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6493      	str	r3, [r2, #72]	@ 0x48
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_DMA_Init+0x50>)
 8001110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	200b      	movs	r0, #11
 8001120:	f002 f99d 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001124:	200b      	movs	r0, #11
 8001126:	f002 f9b4 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <MX_GPIO_Init+0xe8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <MX_GPIO_Init+0xe8>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <MX_GPIO_Init+0xe8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <MX_GPIO_Init+0xe8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <MX_GPIO_Init+0xe8>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_GPIO_Init+0xe8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b6:	f002 fd83 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4814      	ldr	r0, [pc, #80]	@ (8001224 <MX_GPIO_Init+0xec>)
 80011d2:	f002 fbf3 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80011d6:	2308      	movs	r3, #8
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011e6:	230c      	movs	r3, #12
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f002 fbe2 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f8:	2320      	movs	r3, #32
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f002 fbd3 	bl	80039bc <HAL_GPIO_Init>

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	48000800 	.word	0x48000800

08001228 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <MX_I2C1_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	@ (80012a0 <MX_I2C1_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_I2C1_Init+0x74>)
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <MX_I2C1_Init+0x7c>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_I2C1_Init+0x74>)
 8001240:	2201      	movs	r2, #1
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_I2C1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001262:	480e      	ldr	r0, [pc, #56]	@ (800129c <MX_I2C1_Init+0x74>)
 8001264:	f002 fd44 	bl	8003cf0 <HAL_I2C_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126e:	f000 fb2e 	bl	80018ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4809      	ldr	r0, [pc, #36]	@ (800129c <MX_I2C1_Init+0x74>)
 8001276:	f002 fdd6 	bl	8003e26 <HAL_I2CEx_ConfigAnalogFilter>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001280:	f000 fb25 	bl	80018ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_I2C1_Init+0x74>)
 8001288:	f002 fe18 	bl	8003ebc <HAL_I2CEx_ConfigDigitalFilter>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001292:	f000 fb1c 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002bc 	.word	0x200002bc
 80012a0:	40005400 	.word	0x40005400
 80012a4:	40b285c2 	.word	0x40b285c2

080012a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09a      	sub	sp, #104	@ 0x68
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2244      	movs	r2, #68	@ 0x44
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 fb19 	bl	8008900 <memset>
  if(i2cHandle->Instance==I2C1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <HAL_I2C_MspInit+0xa8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d136      	bne.n	8001346 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012d8:	2340      	movs	r3, #64	@ 0x40
 80012da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fc17 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012f0:	f000 faed 	bl	80018ce <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_I2C_MspInit+0xac>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f8:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <HAL_I2C_MspInit+0xac>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_I2C_MspInit+0xac>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800130c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001310:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001312:	2312      	movs	r3, #18
 8001314:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800131e:	2304      	movs	r3, #4
 8001320:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001326:	4619      	mov	r1, r3
 8001328:	480b      	ldr	r0, [pc, #44]	@ (8001358 <HAL_I2C_MspInit+0xb0>)
 800132a:	f002 fb47 	bl	80039bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_I2C_MspInit+0xac>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_I2C_MspInit+0xac>)
 8001334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001338:	6593      	str	r3, [r2, #88]	@ 0x58
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_I2C_MspInit+0xac>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3768      	adds	r7, #104	@ 0x68
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40005400 	.word	0x40005400
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400

0800135c <lidar_init>:
static volatile uint32_t callback_count = 0;




void lidar_init(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

	while (!LidarUartFlag)
 8001360:	e008      	b.n	8001374 <lidar_init+0x18>
	{
		status = HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 8001362:	2201      	movs	r2, #1
 8001364:	4907      	ldr	r1, [pc, #28]	@ (8001384 <lidar_init+0x28>)
 8001366:	4808      	ldr	r0, [pc, #32]	@ (8001388 <lidar_init+0x2c>)
 8001368:	f004 fb76 	bl	8005a58 <HAL_UART_Receive_IT>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <lidar_init+0x30>)
 8001372:	701a      	strb	r2, [r3, #0]
	while (!LidarUartFlag)
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <lidar_init+0x34>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f2      	beq.n	8001362 <lidar_init+0x6>
	}

}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000036c 	.word	0x2000036c
 8001388:	2000055c 	.word	0x2000055c
 800138c:	20000390 	.word	0x20000390
 8001390:	20000374 	.word	0x20000374

08001394 <lidar_DataProcessing>:
	}

}

lidar_point_t lidar_DataProcessing(uint8_t lidar_data, uint8_t sample)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b08b      	sub	sp, #44	@ 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	6178      	str	r0, [r7, #20]
 800139c:	460b      	mov	r3, r1
 800139e:	74fb      	strb	r3, [r7, #19]
 80013a0:	4613      	mov	r3, r2
 80013a2:	74bb      	strb	r3, [r7, #18]
	lidar_point_t point = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]

	lidar_trame = lidar_extractDataFromTrame(lidar_data);
 80013b0:	7cfb      	ldrb	r3, [r7, #19]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4c1b      	ldr	r4, [pc, #108]	@ (8001424 <lidar_DataProcessing+0x90>)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f988 	bl	80016d0 <lidar_extractDataFromTrame>
 80013c0:	463b      	mov	r3, r7
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	point.distance = lidar_calculatingDistance(lidar_trame.Si, lidar_trame.LSN);
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <lidar_DataProcessing+0x90>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <lidar_DataProcessing+0x90>)
 80013ce:	78d2      	ldrb	r2, [r2, #3]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f8b2 	bl	800153c <lidar_calculatingDistance>
 80013d8:	eef0 7a40 	vmov.f32	s15, s0
 80013dc:	edc7 7a08 	vstr	s15, [r7, #32]
	point.angle = lidar_calculatingAngle(lidar_trame.FSA, lidar_trame.LSA, lidar_trame.LSN, point.distance);
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <lidar_DataProcessing+0x90>)
 80013e2:	889b      	ldrh	r3, [r3, #4]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <lidar_DataProcessing+0x90>)
 80013e8:	88d2      	ldrh	r2, [r2, #6]
 80013ea:	b2d1      	uxtb	r1, r2
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <lidar_DataProcessing+0x90>)
 80013ee:	78d2      	ldrb	r2, [r2, #3]
 80013f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013f4:	eeb0 0a67 	vmov.f32	s0, s15
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f815 	bl	8001428 <lidar_calculatingAngle>
 80013fe:	eef0 7a40 	vmov.f32	s15, s0
 8001402:	edc7 7a07 	vstr	s15, [r7, #28]
	//point.isCorrect = lidar_checksum(lidar_data);
	point.isCorrect = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24

	return point;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	461c      	mov	r4, r3
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	372c      	adds	r7, #44	@ 0x2c
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	20000378 	.word	0x20000378

08001428 <lidar_calculatingAngle>:

float lidar_calculatingAngle(uint8_t FSA_data, uint8_t LSA_data, int samples, float distance)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	ed87 0a01 	vstr	s0, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	460b      	mov	r3, r1
 800143a:	73bb      	strb	r3, [r7, #14]

    float angleFSA = ((uint16_t)FSA_data >> 1) / 64.0f;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144a:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001524 <lidar_calculatingAngle+0xfc>
 800144e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001452:	edc7 7a08 	vstr	s15, [r7, #32]
    float angleLSA = ((uint16_t)LSA_data >> 1) / 64.0f;
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001464:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001524 <lidar_calculatingAngle+0xfc>
 8001468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146c:	edc7 7a07 	vstr	s15, [r7, #28]

    float angle_diff = angleLSA - angleFSA;
 8001470:	ed97 7a07 	vldr	s14, [r7, #28]
 8001474:	edd7 7a08 	vldr	s15, [r7, #32]
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if(angle_diff < 0) {
 8001480:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d507      	bpl.n	800149e <lidar_calculatingAngle+0x76>
        angle_diff += 360.0f;
 800148e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001492:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001528 <lidar_calculatingAngle+0x100>
 8001496:	ee77 7a87 	vadd.f32	s15, s15, s14
 800149a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }

    float angle = angleFSA + (angle_diff / 2.0f);
 800149e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014a2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	edc7 7a06 	vstr	s15, [r7, #24]

    if(distance != 0) {
 80014b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	d028      	beq.n	8001516 <lidar_calculatingAngle+0xee>
        float angCorrect = atan2f(21.8f * (155.3f - distance),
 80014c4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800152c <lidar_calculatingAngle+0x104>
 80014c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001530 <lidar_calculatingAngle+0x108>
 80014d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014dc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800152c <lidar_calculatingAngle+0x104>
 80014e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014e4:	eef0 0a67 	vmov.f32	s1, s15
 80014e8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ec:	f008 ffe0 	bl	800a4b0 <atan2f>
 80014f0:	eef0 7a40 	vmov.f32	s15, s0
                               155.3f * distance) * 180.0f / 3.14159f;
 80014f4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001534 <lidar_calculatingAngle+0x10c>
 80014f8:	ee27 7a87 	vmul.f32	s14, s15, s14
        float angCorrect = atan2f(21.8f * (155.3f - distance),
 80014fc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001538 <lidar_calculatingAngle+0x110>
 8001500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001504:	edc7 7a05 	vstr	s15, [r7, #20]
        return angle + angCorrect;
 8001508:	ed97 7a06 	vldr	s14, [r7, #24]
 800150c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	e001      	b.n	800151a <lidar_calculatingAngle+0xf2>
    }

    return angle;
 8001516:	edd7 7a06 	vldr	s15, [r7, #24]
}
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	3728      	adds	r7, #40	@ 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	42800000 	.word	0x42800000
 8001528:	43b40000 	.word	0x43b40000
 800152c:	431b4ccd 	.word	0x431b4ccd
 8001530:	41ae6666 	.word	0x41ae6666
 8001534:	43340000 	.word	0x43340000
 8001538:	40490fd0 	.word	0x40490fd0

0800153c <lidar_calculatingDistance>:
float lidar_calculatingDistance(uint8_t* data, int sample)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
    uint16_t dist_value = (uint16_t)data[sample*2+1] << 8 | data[sample*2];
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	3301      	adds	r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4619      	mov	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	440b      	add	r3, r1
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	81fb      	strh	r3, [r7, #14]
    return dist_value / 4.0f;
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001574:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001578:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800157c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_UART_RxCpltCallback>:
        checksum ^= data[i];
    }
    return checksum == (data[len-2] | (data[len-1] << 8));
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af02      	add	r7, sp, #8
 8001596:	6178      	str	r0, [r7, #20]
	callback_count++;
 8001598:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <HAL_UART_RxCpltCallback+0x110>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a40      	ldr	r2, [pc, #256]	@ (80016a0 <HAL_UART_RxCpltCallback+0x110>)
 80015a0:	6013      	str	r3, [r2, #0]
	if(huart->Instance == USART3) {
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a3f      	ldr	r2, [pc, #252]	@ (80016a4 <HAL_UART_RxCpltCallback+0x114>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d174      	bne.n	8001696 <HAL_UART_RxCpltCallback+0x106>
		switch(state) {
 80015ac:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <HAL_UART_RxCpltCallback+0x118>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d029      	beq.n	8001608 <HAL_UART_RxCpltCallback+0x78>
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	dc69      	bgt.n	800168c <HAL_UART_RxCpltCallback+0xfc>
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_UART_RxCpltCallback+0x32>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d011      	beq.n	80015e4 <HAL_UART_RxCpltCallback+0x54>
 80015c0:	e064      	b.n	800168c <HAL_UART_RxCpltCallback+0xfc>
		case WAIT_HEADER_1:
			if(rxByte == HEADER_BYTE1) {
 80015c2:	4b3a      	ldr	r3, [pc, #232]	@ (80016ac <HAL_UART_RxCpltCallback+0x11c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2baa      	cmp	r3, #170	@ 0xaa
 80015c8:	d15d      	bne.n	8001686 <HAL_UART_RxCpltCallback+0xf6>
				printf("Byte reçu: 0x%02X\r\n", rxByte); // Debug
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <HAL_UART_RxCpltCallback+0x11c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4837      	ldr	r0, [pc, #220]	@ (80016b0 <HAL_UART_RxCpltCallback+0x120>)
 80015d2:	f007 f84d 	bl	8008670 <iprintf>
				state = WAIT_HEADER_2;
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_UART_RxCpltCallback+0x118>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
				rxIndex = 0;
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <HAL_UART_RxCpltCallback+0x124>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80015e2:	e050      	b.n	8001686 <HAL_UART_RxCpltCallback+0xf6>

		case WAIT_HEADER_2:
			printf("Second byte: 0x%02X\r\n", rxByte); // Debug
 80015e4:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_UART_RxCpltCallback+0x11c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4833      	ldr	r0, [pc, #204]	@ (80016b8 <HAL_UART_RxCpltCallback+0x128>)
 80015ec:	f007 f840 	bl	8008670 <iprintf>
			if(rxByte == HEADER_BYTE2) {
 80015f0:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <HAL_UART_RxCpltCallback+0x11c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b55      	cmp	r3, #85	@ 0x55
 80015f6:	d103      	bne.n	8001600 <HAL_UART_RxCpltCallback+0x70>
				state = RECEIVE_DATA;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <HAL_UART_RxCpltCallback+0x118>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	701a      	strb	r2, [r3, #0]
			} else {
				state = WAIT_HEADER_1;
			}
			break;
 80015fe:	e045      	b.n	800168c <HAL_UART_RxCpltCallback+0xfc>
				state = WAIT_HEADER_1;
 8001600:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <HAL_UART_RxCpltCallback+0x118>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
			break;
 8001606:	e041      	b.n	800168c <HAL_UART_RxCpltCallback+0xfc>

		case RECEIVE_DATA:
			rxBuffer[rxIndex++] = rxByte;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <HAL_UART_RxCpltCallback+0x124>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4929      	ldr	r1, [pc, #164]	@ (80016b4 <HAL_UART_RxCpltCallback+0x124>)
 8001610:	600a      	str	r2, [r1, #0]
 8001612:	4a26      	ldr	r2, [pc, #152]	@ (80016ac <HAL_UART_RxCpltCallback+0x11c>)
 8001614:	7811      	ldrb	r1, [r2, #0]
 8001616:	4a29      	ldr	r2, [pc, #164]	@ (80016bc <HAL_UART_RxCpltCallback+0x12c>)
 8001618:	54d1      	strb	r1, [r2, r3]

			if(rxIndex >= BUFFER_SIZE) {
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_UART_RxCpltCallback+0x124>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001620:	dd33      	ble.n	800168a <HAL_UART_RxCpltCallback+0xfa>
				state = WAIT_HEADER_1;
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <HAL_UART_RxCpltCallback+0x118>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
				lidar_trame = lidar_extractDataFromTrame(rxBuffer);
 8001628:	4c25      	ldr	r4, [pc, #148]	@ (80016c0 <HAL_UART_RxCpltCallback+0x130>)
 800162a:	463b      	mov	r3, r7
 800162c:	4923      	ldr	r1, [pc, #140]	@ (80016bc <HAL_UART_RxCpltCallback+0x12c>)
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f84e 	bl	80016d0 <lidar_extractDataFromTrame>
 8001634:	463b      	mov	r3, r7
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


				lidar_point_t point = lidar_DataProcessing(rxBuffer, lidar_trame.LSN);
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <HAL_UART_RxCpltCallback+0x12c>)
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <HAL_UART_RxCpltCallback+0x130>)
 8001642:	78da      	ldrb	r2, [r3, #3]
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fea3 	bl	8001394 <lidar_DataProcessing>
				printf("Distance: %.2f mm, Angle: %.2f°\r\n",
								point.distance,
 800164e:	6a3b      	ldr	r3, [r7, #32]
				printf("Distance: %.2f mm, Angle: %.2f°\r\n",
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ffa1 	bl	8000598 <__aeabi_f2d>
 8001656:	4604      	mov	r4, r0
 8001658:	460d      	mov	r5, r1
								point.angle);
 800165a:	69fb      	ldr	r3, [r7, #28]
				printf("Distance: %.2f mm, Angle: %.2f°\r\n",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff9b 	bl	8000598 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9cd 2300 	strd	r2, r3, [sp]
 800166a:	4622      	mov	r2, r4
 800166c:	462b      	mov	r3, r5
 800166e:	4815      	ldr	r0, [pc, #84]	@ (80016c4 <HAL_UART_RxCpltCallback+0x134>)
 8001670:	f006 fffe 	bl	8008670 <iprintf>
				LidarUartFlag = 1;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_UART_RxCpltCallback+0x138>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
				memset(rxBuffer, 0, BUFFER_SIZE);
 800167a:	225c      	movs	r2, #92	@ 0x5c
 800167c:	2100      	movs	r1, #0
 800167e:	480f      	ldr	r0, [pc, #60]	@ (80016bc <HAL_UART_RxCpltCallback+0x12c>)
 8001680:	f007 f93e 	bl	8008900 <memset>
			}
			break;
 8001684:	e001      	b.n	800168a <HAL_UART_RxCpltCallback+0xfa>
			break;
 8001686:	bf00      	nop
 8001688:	e000      	b.n	800168c <HAL_UART_RxCpltCallback+0xfc>
			break;
 800168a:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 800168c:	2201      	movs	r2, #1
 800168e:	4907      	ldr	r1, [pc, #28]	@ (80016ac <HAL_UART_RxCpltCallback+0x11c>)
 8001690:	480e      	ldr	r0, [pc, #56]	@ (80016cc <HAL_UART_RxCpltCallback+0x13c>)
 8001692:	f004 f9e1 	bl	8005a58 <HAL_UART_Receive_IT>
	}
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000038c 	.word	0x2000038c
 80016a4:	40004800 	.word	0x40004800
 80016a8:	20000388 	.word	0x20000388
 80016ac:	2000036c 	.word	0x2000036c
 80016b0:	0800a7c8 	.word	0x0800a7c8
 80016b4:	20000370 	.word	0x20000370
 80016b8:	0800a7e0 	.word	0x0800a7e0
 80016bc:	20000310 	.word	0x20000310
 80016c0:	20000378 	.word	0x20000378
 80016c4:	0800a7f8 	.word	0x0800a7f8
 80016c8:	20000374 	.word	0x20000374
 80016cc:	2000055c 	.word	0x2000055c

080016d0 <lidar_extractDataFromTrame>:
	return currentSpeed;
}
 */

lidar_trame_t lidar_extractDataFromTrame(uint8_t* buffer)  
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    lidar_trame_t lidar_trame = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]

    if (buffer == NULL) return lidar_trame;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d107      	bne.n	80016fe <lidar_extractDataFromTrame+0x2e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	461c      	mov	r4, r3
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016fc:	e06e      	b.n	80017dc <lidar_extractDataFromTrame+0x10c>

    // Reconstruction correcte des valeurs 16 bits en little endian
    lidar_trame.PH = (uint16_t)buffer[1] << 8 | buffer[0];  // Doit être 0x55AA
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21b      	sxth	r3, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	813b      	strh	r3, [r7, #8]
    lidar_trame.CT = buffer[2];  // Un seul byte
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	789b      	ldrb	r3, [r3, #2]
 800171a:	72bb      	strb	r3, [r7, #10]
    lidar_trame.LSN = buffer[3]; // Un seul byte
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	78db      	ldrb	r3, [r3, #3]
 8001720:	72fb      	strb	r3, [r7, #11]
    lidar_trame.FSA = (uint16_t)buffer[5] << 8 | buffer[4];
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3305      	adds	r3, #5
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b21a      	sxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3304      	adds	r3, #4
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	81bb      	strh	r3, [r7, #12]
    lidar_trame.LSA = (uint16_t)buffer[7] << 8 | buffer[6];
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3307      	adds	r3, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3306      	adds	r3, #6
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b21b      	sxth	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b21b      	sxth	r3, r3
 8001752:	b29b      	uxth	r3, r3
 8001754:	81fb      	strh	r3, [r7, #14]
    lidar_trame.CS = (uint16_t)buffer[9] << 8 | buffer[8];
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3309      	adds	r3, #9
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3308      	adds	r3, #8
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	823b      	strh	r3, [r7, #16]


    if (lidar_trame.LSN > 0) {
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d02b      	beq.n	80017ce <lidar_extractDataFromTrame+0xfe>
        lidar_trame.Si = malloc(lidar_trame.LSN * sizeof(uint16_t));
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4618      	mov	r0, r3
 800177c:	f006 f9a8 	bl	8007ad0 <malloc>
 8001780:	4603      	mov	r3, r0
 8001782:	617b      	str	r3, [r7, #20]
        if (lidar_trame.Si != NULL) {
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d021      	beq.n	80017ce <lidar_extractDataFromTrame+0xfe>
            for (uint8_t i = 0; i < lidar_trame.LSN; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	77fb      	strb	r3, [r7, #31]
 800178e:	e01a      	b.n	80017c6 <lidar_extractDataFromTrame+0xf6>
                // Les données commencent à l'offset 10
                size_t offset = 10 + (i * 2);
 8001790:	7ffb      	ldrb	r3, [r7, #31]
 8001792:	3305      	adds	r3, #5
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
                lidar_trame.Si[i] = (uint16_t)buffer[offset+1] << 8 | buffer[offset];
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	3301      	adds	r3, #1
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	440b      	add	r3, r1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b219      	sxth	r1, r3
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	b28a      	uxth	r2, r1
 80017be:	801a      	strh	r2, [r3, #0]
            for (uint8_t i = 0; i < lidar_trame.LSN; i++) {
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
 80017c2:	3301      	adds	r3, #1
 80017c4:	77fb      	strb	r3, [r7, #31]
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	7ffa      	ldrb	r2, [r7, #31]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3e0      	bcc.n	8001790 <lidar_extractDataFromTrame+0xc0>
            }
        }
    }

    return lidar_trame;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	461c      	mov	r4, r3
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	3724      	adds	r7, #36	@ 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}

080017e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	@ 0x30
 80017e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017ea:	f000 fcd8 	bl	800219e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017ee:	f000 f823 	bl	8001838 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017f2:	f7ff fca1 	bl	8001138 <MX_GPIO_Init>
	MX_DMA_Init();
 80017f6:	f7ff fc75 	bl	80010e4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80017fa:	f000 fb6d 	bl	8001ed8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80017fe:	f000 fbb7 	bl	8001f70 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001802:	f7ff fd11 	bl	8001228 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001806:	f7ff fb6f 	bl	8000ee8 <MX_ADC1_Init>
	MX_TIM2_Init();
 800180a:	f000 fa39 	bl	8001c80 <MX_TIM2_Init>
	MX_TIM6_Init();
 800180e:	f000 fa85 	bl	8001d1c <MX_TIM6_Init>
	MX_TIM16_Init();
 8001812:	f000 fabb 	bl	8001d8c <MX_TIM16_Init>
	MX_TIM1_Init();
 8001816:	f000 f9df 	bl	8001bd8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	printf("Starting DMA... \r\n");
 800181a:	4806      	ldr	r0, [pc, #24]	@ (8001834 <main+0x50>)
 800181c:	f006 ff90 	bl	8008740 <puts>

	lidar_init();
 8001820:	f7ff fd9c 	bl	800135c <lidar_init>
	 */



	uint8_t rxBuffer[32];
	lidar_point_t point = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800182e:	bf00      	nop
 8001830:	e7fd      	b.n	800182e <main+0x4a>
 8001832:	bf00      	nop
 8001834:	0800a81c 	.word	0x0800a81c

08001838 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	@ 0x50
 800183c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	2238      	movs	r2, #56	@ 0x38
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f007 f85a 	bl	8008900 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800185a:	2000      	movs	r0, #0
 800185c:	f002 fb7a 	bl	8003f54 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186a:	2340      	movs	r3, #64	@ 0x40
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	2302      	movs	r3, #2
 8001870:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001872:	2302      	movs	r3, #2
 8001874:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001876:	2304      	movs	r3, #4
 8001878:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800187a:	2355      	movs	r3, #85	@ 0x55
 800187c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187e:	2302      	movs	r3, #2
 8001880:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001882:	2302      	movs	r3, #2
 8001884:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001886:	2302      	movs	r3, #2
 8001888:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188a:	f107 0318 	add.w	r3, r7, #24
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fc14 	bl	80040bc <HAL_RCC_OscConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800189a:	f000 f818 	bl	80018ce <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189e:	230f      	movs	r3, #15
 80018a0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2303      	movs	r3, #3
 80018a4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2104      	movs	r1, #4
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 ff12 	bl	80046e0 <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80018c2:	f000 f804 	bl	80018ce <Error_Handler>
	}
}
 80018c6:	bf00      	nop
 80018c8:	3750      	adds	r7, #80	@ 0x50
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d2:	b672      	cpsid	i
}
 80018d4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018d6:	bf00      	nop
 80018d8:	e7fd      	b.n	80018d6 <Error_Handler+0x8>
	...

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <HAL_MspInit+0x44>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001920 <HAL_MspInit+0x44>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <HAL_MspInit+0x44>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_MspInit+0x44>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_MspInit+0x44>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6593      	str	r3, [r2, #88]	@ 0x58
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_MspInit+0x44>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001912:	f002 fbc3 	bl	800409c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800192c:	1d39      	adds	r1, r7, #4
 800192e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001932:	2201      	movs	r2, #1
 8001934:	4803      	ldr	r0, [pc, #12]	@ (8001944 <__io_putchar+0x20>)
 8001936:	f004 f801 	bl	800593c <HAL_UART_Transmit>

  return ch;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200004c8 	.word	0x200004c8

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199e:	f000 fc51 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ae:	f001 fef3 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000025c 	.word	0x2000025c

080019bc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80019c2:	f003 faf0 	bl	8004fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000398 	.word	0x20000398

080019d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d4:	4803      	ldr	r0, [pc, #12]	@ (80019e4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80019d6:	f003 fae6 	bl	8004fa6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80019da:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80019dc:	f003 fae3 	bl	8004fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000398 	.word	0x20000398
 80019e8:	2000047c 	.word	0x2000047c

080019ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80019f2:	f003 fad8 	bl	8004fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000398 	.word	0x20000398

08001a00 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM1_CC_IRQHandler+0x10>)
 8001a06:	f003 face 	bl	8004fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000398 	.word	0x20000398

08001a14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <USART3_IRQHandler+0x10>)
 8001a1a:	f004 f869 	bl	8005af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000055c 	.word	0x2000055c

08001a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return 1;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_kill>:

int _kill(int pid, int sig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a42:	f006 ffbf 	bl	80089c4 <__errno>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2216      	movs	r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_exit>:

void _exit (int status)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffe7 	bl	8001a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6a:	bf00      	nop
 8001a6c:	e7fd      	b.n	8001a6a <_exit+0x12>

08001a6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e00a      	b.n	8001a96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a80:	f3af 8000 	nop.w
 8001a84:	4601      	mov	r1, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	b2ca      	uxtb	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dbf0      	blt.n	8001a80 <_read+0x12>
  }

  return len;
 8001a9e:	687b      	ldr	r3, [r7, #4]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e009      	b.n	8001ace <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff2e 	bl	8001924 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf1      	blt.n	8001aba <_write+0x12>
  }
  return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_close>:

int _close(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b08:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_isatty>:

int _isatty(int file)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f006 ff24 	bl	80089c4 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20008000 	.word	0x20008000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000394 	.word	0x20000394
 8001bb0:	20000740 	.word	0x20000740

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <SystemInit+0x20>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <SystemInit+0x20>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001bf8:	4a20      	ldr	r2, [pc, #128]	@ (8001c7c <MX_TIM1_Init+0xa4>)
 8001bfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001bfe:	2204      	movs	r2, #4
 8001c00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c0a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001c0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c22:	4815      	ldr	r0, [pc, #84]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c24:	f003 f968 	bl	8004ef8 <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c2e:	f7ff fe4e 	bl	80018ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480e      	ldr	r0, [pc, #56]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c40:	f003 fb00 	bl	8005244 <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c4a:	f7ff fe40 	bl	80018ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <MX_TIM1_Init+0xa0>)
 8001c60:	f003 fd54 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c6a:	f7ff fe30 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000398 	.word	0x20000398
 8001c7c:	40012c00 	.word	0x40012c00

08001c80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001ca0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001ca8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001cb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc8:	4813      	ldr	r0, [pc, #76]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001cca:	f003 f915 	bl	8004ef8 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001cd4:	f7ff fdfb 	bl	80018ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001ce6:	f003 faad 	bl	8005244 <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001cf0:	f7ff fded 	bl	80018ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_TIM2_Init+0x98>)
 8001d02:	f003 fd03 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d0c:	f7ff fddf 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200003e4 	.word	0x200003e4

08001d1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d2e:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <MX_TIM6_Init+0x6c>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d34:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001d38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d42:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d4e:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d50:	f003 f8d2 	bl	8004ef8 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d5a:	f7ff fdb8 	bl	80018ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_TIM6_Init+0x68>)
 8001d6c:	f003 fcce 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001d76:	f7ff fdaa 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000430 	.word	0x20000430
 8001d88:	40001000 	.word	0x40001000

08001d8c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001d92:	4a10      	ldr	r2, [pc, #64]	@ (8001dd4 <MX_TIM16_Init+0x48>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001da8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001db0:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <MX_TIM16_Init+0x44>)
 8001dbe:	f003 f89b 	bl	8004ef8 <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001dc8:	f7ff fd81 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000047c 	.word	0x2000047c
 8001dd4:	40014400 	.word	0x40014400

08001dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a38      	ldr	r2, [pc, #224]	@ (8001ec8 <HAL_TIM_Base_MspInit+0xf0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12c      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dea:	4b38      	ldr	r3, [pc, #224]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	4a37      	ldr	r2, [pc, #220]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001df0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df6:	4b35      	ldr	r3, [pc, #212]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2018      	movs	r0, #24
 8001e08:	f001 fb29 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e0c:	2018      	movs	r0, #24
 8001e0e:	f001 fb40 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2019      	movs	r0, #25
 8001e18:	f001 fb21 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e1c:	2019      	movs	r0, #25
 8001e1e:	f001 fb38 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	201a      	movs	r0, #26
 8001e28:	f001 fb19 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e2c:	201a      	movs	r0, #26
 8001e2e:	f001 fb30 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	201b      	movs	r0, #27
 8001e38:	f001 fb11 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e3c:	201b      	movs	r0, #27
 8001e3e:	f001 fb28 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001e42:	e03c      	b.n	8001ebe <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
}
 8001e66:	e02a      	b.n	8001ebe <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ed0 <HAL_TIM_Base_MspInit+0xf8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10c      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	4a15      	ldr	r2, [pc, #84]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	e018      	b.n	8001ebe <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <HAL_TIM_Base_MspInit+0xfc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d113      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_TIM_Base_MspInit+0xf4>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2019      	movs	r0, #25
 8001eb4:	f001 fad3 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eb8:	2019      	movs	r0, #25
 8001eba:	f001 faea 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40001000 	.word	0x40001000
 8001ed4:	40014400 	.word	0x40014400

08001ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <MX_USART2_UART_Init+0x94>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f20:	4811      	ldr	r0, [pc, #68]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f22:	f003 fcbb 	bl	800589c <HAL_UART_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f2c:	f7ff fccf 	bl	80018ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f34:	f005 fd01 	bl	800793a <HAL_UARTEx_SetTxFifoThreshold>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f3e:	f7ff fcc6 	bl	80018ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f42:	2100      	movs	r1, #0
 8001f44:	4808      	ldr	r0, [pc, #32]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f46:	f005 fd36 	bl	80079b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f50:	f7ff fcbd 	bl	80018ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <MX_USART2_UART_Init+0x90>)
 8001f56:	f005 fcb7 	bl	80078c8 <HAL_UARTEx_DisableFifoMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f60:	f7ff fcb5 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200004c8 	.word	0x200004c8
 8001f6c:	40004400 	.word	0x40004400

08001f70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f74:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f76:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <MX_USART3_UART_Init+0x94>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fb8:	4811      	ldr	r0, [pc, #68]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fba:	f003 fc6f 	bl	800589c <HAL_UART_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fc4:	f7ff fc83 	bl	80018ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	480d      	ldr	r0, [pc, #52]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fcc:	f005 fcb5 	bl	800793a <HAL_UARTEx_SetTxFifoThreshold>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fd6:	f7ff fc7a 	bl	80018ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4808      	ldr	r0, [pc, #32]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fde:	f005 fcea 	bl	80079b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001fe8:	f7ff fc71 	bl	80018ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_USART3_UART_Init+0x90>)
 8001fee:	f005 fc6b 	bl	80078c8 <HAL_UARTEx_DisableFifoMode>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ff8:	f7ff fc69 	bl	80018ce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000055c 	.word	0x2000055c
 8002004:	40004800 	.word	0x40004800

08002008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b09c      	sub	sp, #112	@ 0x70
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	2244      	movs	r2, #68	@ 0x44
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f006 fc69 	bl	8008900 <memset>
  if(uartHandle->Instance==USART2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a42      	ldr	r2, [pc, #264]	@ (800213c <HAL_UART_MspInit+0x134>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d138      	bne.n	80020aa <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	4618      	mov	r0, r3
 8002046:	f002 fd67 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002050:	f7ff fc3d 	bl	80018ce <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002054:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_UART_MspInit+0x138>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	4a39      	ldr	r2, [pc, #228]	@ (8002140 <HAL_UART_MspInit+0x138>)
 800205a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002060:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <HAL_UART_MspInit+0x138>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <HAL_UART_MspInit+0x138>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002070:	4a33      	ldr	r2, [pc, #204]	@ (8002140 <HAL_UART_MspInit+0x138>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002078:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_UART_MspInit+0x138>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002084:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002088:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002096:	2307      	movs	r3, #7
 8002098:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a4:	f001 fc8a 	bl	80039bc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020a8:	e043      	b.n	8002132 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a25      	ldr	r2, [pc, #148]	@ (8002144 <HAL_UART_MspInit+0x13c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d13e      	bne.n	8002132 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b4:	2304      	movs	r3, #4
 80020b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fd29 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80020cc:	f7ff fbff 	bl	80018ce <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_UART_MspInit+0x138>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002140 <HAL_UART_MspInit+0x138>)
 80020d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020da:	6593      	str	r3, [r2, #88]	@ 0x58
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_UART_MspInit+0x138>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_UART_MspInit+0x138>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ec:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <HAL_UART_MspInit+0x138>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_UART_MspInit+0x138>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002100:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002104:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002112:	2307      	movs	r3, #7
 8002114:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800211a:	4619      	mov	r1, r3
 800211c:	480a      	ldr	r0, [pc, #40]	@ (8002148 <HAL_UART_MspInit+0x140>)
 800211e:	f001 fc4d 	bl	80039bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2027      	movs	r0, #39	@ 0x27
 8002128:	f001 f999 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800212c:	2027      	movs	r0, #39	@ 0x27
 800212e:	f001 f9b0 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3770      	adds	r7, #112	@ 0x70
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40004400 	.word	0x40004400
 8002140:	40021000 	.word	0x40021000
 8002144:	40004800 	.word	0x40004800
 8002148:	48000400 	.word	0x48000400

0800214c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800214c:	480d      	ldr	r0, [pc, #52]	@ (8002184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800214e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002150:	f7ff fd30 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <LoopForever+0x6>)
  ldr r1, =_edata
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <LoopForever+0xe>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800216c:	4c0a      	ldr	r4, [pc, #40]	@ (8002198 <LoopForever+0x16>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800217a:	f006 fc29 	bl	80089d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800217e:	f7ff fb31 	bl	80017e4 <main>

08002182 <LoopForever>:

LoopForever:
    b LoopForever
 8002182:	e7fe      	b.n	8002182 <LoopForever>
  ldr   r0, =_estack
 8002184:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002190:	0800ac28 	.word	0x0800ac28
  ldr r2, =_sbss
 8002194:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002198:	20000740 	.word	0x20000740

0800219c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC1_2_IRQHandler>

0800219e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f001 f94d 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ae:	2000      	movs	r0, #0
 80021b0:	f000 f80e 	bl	80021d0 <HAL_InitTick>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	e001      	b.n	80021c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021c0:	f7ff fb8c 	bl	80018dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021c4:	79fb      	ldrb	r3, [r7, #7]

}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <HAL_InitTick+0x68>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d022      	beq.n	800222a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_InitTick+0x6c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_InitTick+0x68>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 f958 	bl	80034ae <HAL_SYSTICK_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10f      	bne.n	8002224 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b0f      	cmp	r3, #15
 8002208:	d809      	bhi.n	800221e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220a:	2200      	movs	r2, #0
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002212:	f001 f924 	bl	800345e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_InitTick+0x70>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e007      	b.n	800222e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e004      	b.n	800222e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000008 	.word	0x20000008
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_IncTick+0x1c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_IncTick+0x20>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4413      	add	r3, r2
 8002252:	4a03      	ldr	r2, [pc, #12]	@ (8002260 <HAL_IncTick+0x1c>)
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	200005f0 	.word	0x200005f0
 8002264:	20000008 	.word	0x20000008

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200005f0 	.word	0x200005f0

08002280 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	609a      	str	r2, [r3, #8]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3360      	adds	r3, #96	@ 0x60
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <LL_ADC_SetOffset+0x44>)
 800230a:	4013      	ands	r3, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	4313      	orrs	r3, r2
 8002318:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	03fff000 	.word	0x03fff000

08002330 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3360      	adds	r3, #96	@ 0x60
 800233e:	461a      	mov	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3360      	adds	r3, #96	@ 0x60
 800236c:	461a      	mov	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	431a      	orrs	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3360      	adds	r3, #96	@ 0x60
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3360      	adds	r3, #96	@ 0x60
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	615a      	str	r2, [r3, #20]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3330      	adds	r3, #48	@ 0x30
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	4413      	add	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	211f      	movs	r1, #31
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 011f 	and.w	r1, r3, #31
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	431a      	orrs	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3314      	adds	r3, #20
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	0e5b      	lsrs	r3, r3, #25
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0d1b      	lsrs	r3, r3, #20
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2107      	movs	r1, #7
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	401a      	ands	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0d1b      	lsrs	r3, r3, #20
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	431a      	orrs	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	43db      	mvns	r3, r3
 80024ee:	401a      	ands	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0318 	and.w	r3, r3, #24
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024f8:	40d9      	lsrs	r1, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	400b      	ands	r3, r1
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	431a      	orrs	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	0007ffff 	.word	0x0007ffff

0800251c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6093      	str	r3, [r2, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002554:	d101      	bne.n	800255a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800257c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025a4:	d101      	bne.n	80025aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_IsEnabled+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_IsEnabled+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d101      	bne.n	800261c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e167      	b.n	8002916 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fcc1 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff67 	bl	8002540 <LL_ADC_IsDeepPowerDownEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff4d 	bl	800251c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff82 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff66 	bl	8002568 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269c:	4ba0      	ldr	r3, [pc, #640]	@ (8002920 <HAL_ADC_Init+0x2f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	4aa0      	ldr	r2, [pc, #640]	@ (8002924 <HAL_ADC_Init+0x2f8>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff64 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff75 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 80026f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8100 	bne.w	8002904 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 80fc 	bne.w	8002904 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002714:	f043 0202 	orr.w	r2, r3, #2
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff49 	bl	80025b8 <LL_ADC_IsEnabled>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002730:	f7ff ff42 	bl	80025b8 <LL_ADC_IsEnabled>
 8002734:	4604      	mov	r4, r0
 8002736:	487c      	ldr	r0, [pc, #496]	@ (8002928 <HAL_ADC_Init+0x2fc>)
 8002738:	f7ff ff3e 	bl	80025b8 <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	4323      	orrs	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4619      	mov	r1, r3
 800274a:	4878      	ldr	r0, [pc, #480]	@ (800292c <HAL_ADC_Init+0x300>)
 800274c:	f7ff fd98 	bl	8002280 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7f5b      	ldrb	r3, [r3, #29]
 8002754:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800275a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002760:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002766:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	045b      	lsls	r3, r3, #17
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <HAL_ADC_Init+0x304>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff14 	bl	8002604 <LL_ADC_INJ_IsConversionOngoing>
 80027dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d16d      	bne.n	80028c0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d16a      	bne.n	80028c0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002806:	f023 0302 	bic.w	r3, r3, #2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	430b      	orrs	r3, r1
 8002812:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800282a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002834:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002838:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6911      	ldr	r1, [r2, #16]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800284a:	e013      	b.n	8002874 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800285a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800286c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002870:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800287a:	2b01      	cmp	r3, #1
 800287c:	d118      	bne.n	80028b0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002894:	4311      	orrs	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028a0:	430a      	orrs	r2, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	e007      	b.n	80028c0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d10c      	bne.n	80028e2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f023 010f 	bic.w	r1, r3, #15
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e0:	e007      	b.n	80028f2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 020f 	bic.w	r2, r2, #15
 80028f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002902:	e007      	b.n	8002914 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002914:	7ffb      	ldrb	r3, [r7, #31]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	@ 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000
 8002924:	053e2d63 	.word	0x053e2d63
 8002928:	50000100 	.word	0x50000100
 800292c:	50000300 	.word	0x50000300
 8002930:	fff04007 	.word	0xfff04007

08002934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0b6      	sub	sp, #216	@ 0xd8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x22>
 8002952:	2302      	movs	r3, #2
 8002954:	e3c8      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x7b4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe3b 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 83ad 	bne.w	80030ca <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	f7ff fd51 	bl	8002424 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fe29 	bl	80025de <LL_ADC_REG_IsConversionOngoing>
 800298c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fe35 	bl	8002604 <LL_ADC_INJ_IsConversionOngoing>
 800299a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 81d9 	bne.w	8002d5a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 81d4 	bne.w	8002d5a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ba:	d10f      	bne.n	80029dc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7ff fd58 	bl	800247c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fd12 	bl	80023fe <LL_ADC_SetSamplingTimeCommonConfig>
 80029da:	e00e      	b.n	80029fa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f7ff fd47 	bl	800247c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fd02 	bl	80023fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d022      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a2c:	f7ff fc5c 	bl	80022e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6919      	ldr	r1, [r3, #16]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f7ff fca8 	bl	8002392 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x124>
 8002a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a56:	e000      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x126>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f7ff fcb4 	bl	80023c8 <LL_ADC_SetOffsetSaturation>
 8002a60:	e17b      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fc61 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x15a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fc56 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002a84:	4603      	mov	r3, r0
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	e01e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x198>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fc4b 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e004      	b.n	8002aca <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x1b0>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	e018      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1e2>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002b08:	2320      	movs	r3, #32
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002b0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d106      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fc1a 	bl	800235c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fbfe 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x220>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fbf3 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 021f 	and.w	r2, r3, #31
 8002b52:	e01e      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x25e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fbe8 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e004      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x276>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x2a8>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002bbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e004      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d106      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2101      	movs	r1, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fbb7 	bl	800235c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fb9b 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x2e6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2102      	movs	r1, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fb90 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	e01e      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x324>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fb85 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e004      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x33c>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	e016      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x36a>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e004      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d106      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2102      	movs	r1, #2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fb56 	bl	800235c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2103      	movs	r1, #3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fb3a 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x3a8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2103      	movs	r1, #3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fb2f 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	f003 021f 	and.w	r2, r3, #31
 8002cda:	e017      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x3d8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fb24 	bl	8002330 <LL_ADC_GetOffsetChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002cf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002cfe:	2320      	movs	r3, #32
 8002d00:	e003      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x3f0>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	e011      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x414>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e003      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2103      	movs	r1, #3
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fb01 	bl	800235c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fc2a 	bl	80025b8 <LL_ADC_IsEnabled>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8140 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f7ff fbab 	bl	80024d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a8f      	ldr	r2, [pc, #572]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x68c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	f040 8131 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x47e>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0e9b      	lsrs	r3, r3, #26
 8002da0:	3301      	adds	r3, #1
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	bf94      	ite	ls
 8002daa:	2301      	movls	r3, #1
 8002dac:	2300      	movhi	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e019      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x4b2>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e003      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002dce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2b09      	cmp	r3, #9
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d079      	beq.n	8002ede <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x4d2>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e04:	e015      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x4fe>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e16:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002e1e:	2320      	movs	r3, #32
 8002e20:	e003      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x51e>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	3301      	adds	r3, #1
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	e017      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x54e>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e62:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e003      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	ea42 0103 	orr.w	r1, r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x574>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f003 021f 	and.w	r2, r3, #31
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	051b      	lsls	r3, r3, #20
 8002ea6:	e018      	b.n	8002eda <HAL_ADC_ConfigChannel+0x5a6>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e003      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eda:	430b      	orrs	r3, r1
 8002edc:	e081      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x5c6>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef8:	e015      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x5f2>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e003      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x612>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0e9b      	lsrs	r3, r3, #26
 8002f38:	3301      	adds	r3, #1
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	e017      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x642>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
  return result;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	e003      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x66e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 021f 	and.w	r2, r3, #31
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	3b1e      	subs	r3, #30
 8002f9a:	051b      	lsls	r3, r3, #20
 8002f9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	e01e      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x6ac>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	613b      	str	r3, [r7, #16]
  return result;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e006      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x698>
 8002fbe:	bf00      	nop
 8002fc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b1e      	subs	r3, #30
 8002fda:	051b      	lsls	r3, r3, #20
 8002fdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f7ff fa48 	bl	800247c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80030f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d071      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff8:	483e      	ldr	r0, [pc, #248]	@ (80030f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ffa:	f7ff f967 	bl	80022cc <LL_ADC_GetCommonPathInternalCh>
 8002ffe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a3c      	ldr	r2, [pc, #240]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_ADC_ConfigChannel+0x6e2>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	@ (80030fc <HAL_ADC_ConfigChannel+0x7c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d127      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800301a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d121      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800302a:	d157      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800302c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003030:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003034:	4619      	mov	r1, r3
 8003036:	482f      	ldr	r0, [pc, #188]	@ (80030f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003038:	f7ff f935 	bl	80022a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303c:	4b30      	ldr	r3, [pc, #192]	@ (8003100 <HAL_ADC_ConfigChannel+0x7cc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	4a30      	ldr	r2, [pc, #192]	@ (8003104 <HAL_ADC_ConfigChannel+0x7d0>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003056:	e002      	b.n	800305e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3b01      	subs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f9      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003064:	e03a      	b.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a27      	ldr	r2, [pc, #156]	@ (8003108 <HAL_ADC_ConfigChannel+0x7d4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d113      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a22      	ldr	r2, [pc, #136]	@ (800310c <HAL_ADC_ConfigChannel+0x7d8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d02a      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800308e:	4619      	mov	r1, r3
 8003090:	4818      	ldr	r0, [pc, #96]	@ (80030f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003092:	f7ff f908 	bl	80022a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003096:	e021      	b.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1c      	ldr	r2, [pc, #112]	@ (8003110 <HAL_ADC_ConfigChannel+0x7dc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d11c      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d116      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	@ (800310c <HAL_ADC_ConfigChannel+0x7d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d011      	beq.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030c0:	4619      	mov	r1, r3
 80030c2:	480c      	ldr	r0, [pc, #48]	@ (80030f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80030c4:	f7ff f8ef 	bl	80022a6 <LL_ADC_SetCommonPathInternalCh>
 80030c8:	e008      	b.n	80030dc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	37d8      	adds	r7, #216	@ 0xd8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	80080000 	.word	0x80080000
 80030f4:	50000300 	.word	0x50000300
 80030f8:	c3210000 	.word	0xc3210000
 80030fc:	90c00010 	.word	0x90c00010
 8003100:	20000000 	.word	0x20000000
 8003104:	053e2d63 	.word	0x053e2d63
 8003108:	c7520000 	.word	0xc7520000
 800310c:	50000100 	.word	0x50000100
 8003110:	cb840000 	.word	0xcb840000

08003114 <LL_ADC_IsEnabled>:
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <LL_ADC_IsEnabled+0x18>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <LL_ADC_IsEnabled+0x1a>
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_ADC_REG_IsConversionOngoing>:
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d101      	bne.n	8003152 <LL_ADC_REG_IsConversionOngoing+0x18>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b0a1      	sub	sp, #132	@ 0x84
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800317a:	2302      	movs	r3, #2
 800317c:	e08b      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003186:	2300      	movs	r3, #0
 8003188:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800318a:	2300      	movs	r3, #0
 800318c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003196:	d102      	bne.n	800319e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003198:	4b41      	ldr	r3, [pc, #260]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	e001      	b.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e06a      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ffb9 	bl	800313a <LL_ADC_REG_IsConversionOngoing>
 80031c8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ffb3 	bl	800313a <LL_ADC_REG_IsConversionOngoing>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d14c      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d149      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031e0:	4b30      	ldr	r3, [pc, #192]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80031e2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d028      	beq.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031fe:	035b      	lsls	r3, r3, #13
 8003200:	430b      	orrs	r3, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003206:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003208:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800320c:	f7ff ff82 	bl	8003114 <LL_ADC_IsEnabled>
 8003210:	4604      	mov	r4, r0
 8003212:	4823      	ldr	r0, [pc, #140]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003214:	f7ff ff7e 	bl	8003114 <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d133      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003228:	f023 030f 	bic.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	6811      	ldr	r1, [r2, #0]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	6892      	ldr	r2, [r2, #8]
 8003234:	430a      	orrs	r2, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800323a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800323c:	e024      	b.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800323e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003248:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800324a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800324e:	f7ff ff61 	bl	8003114 <LL_ADC_IsEnabled>
 8003252:	4604      	mov	r4, r0
 8003254:	4812      	ldr	r0, [pc, #72]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003256:	f7ff ff5d 	bl	8003114 <LL_ADC_IsEnabled>
 800325a:	4603      	mov	r3, r0
 800325c:	4323      	orrs	r3, r4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d112      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800326a:	f023 030f 	bic.w	r3, r3, #15
 800326e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003270:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003272:	e009      	b.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003286:	e000      	b.n	800328a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003288:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003292:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003296:	4618      	mov	r0, r3
 8003298:	3784      	adds	r7, #132	@ 0x84
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	50000100 	.word	0x50000100
 80032a4:	50000300 	.word	0x50000300

080032a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	@ (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	@ (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	@ (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800346c:	f7ff ff40 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff90 	bl	800339c <NVIC_EncodePriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff5f 	bl	8003348 <__NVIC_SetPriority>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff33 	bl	800330c <__NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffa4 	bl	8003404 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e08d      	b.n	80035f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	4b47      	ldr	r3, [pc, #284]	@ (8003600 <HAL_DMA_Init+0x138>)
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d80f      	bhi.n	8003506 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b45      	ldr	r3, [pc, #276]	@ (8003604 <HAL_DMA_Init+0x13c>)
 80034ee:	4413      	add	r3, r2
 80034f0:	4a45      	ldr	r2, [pc, #276]	@ (8003608 <HAL_DMA_Init+0x140>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	009a      	lsls	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a42      	ldr	r2, [pc, #264]	@ (800360c <HAL_DMA_Init+0x144>)
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
 8003504:	e00e      	b.n	8003524 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_DMA_Init+0x148>)
 800350e:	4413      	add	r3, r2
 8003510:	4a3d      	ldr	r2, [pc, #244]	@ (8003608 <HAL_DMA_Init+0x140>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a3c      	ldr	r2, [pc, #240]	@ (8003614 <HAL_DMA_Init+0x14c>)
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9be 	bl	80038f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003584:	d102      	bne.n	800358c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_DMA_Init+0x104>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d80c      	bhi.n	80035cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9de 	bl	8003974 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e008      	b.n	80035de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40020407 	.word	0x40020407
 8003604:	bffdfff8 	.word	0xbffdfff8
 8003608:	cccccccd 	.word	0xcccccccd
 800360c:	40020000 	.word	0x40020000
 8003610:	bffdfbf8 	.word	0xbffdfbf8
 8003614:	40020400 	.word	0x40020400

08003618 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d005      	beq.n	800363c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2204      	movs	r2, #4
 8003634:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e037      	b.n	80036ac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 020e 	bic.w	r2, r2, #14
 800364a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003656:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800365a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003688:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036aa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d00d      	beq.n	80036fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e047      	b.n	800378e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 020e 	bic.w	r2, r2, #14
 800370c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800372c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f003 021f 	and.w	r2, r3, #31
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800374a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003762:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800376c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
    }
  }
  return status;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2204      	movs	r2, #4
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d026      	beq.n	8003812 <HAL_DMA_IRQHandler+0x7a>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d021      	beq.n	8003812 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2104      	movs	r1, #4
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	2b00      	cmp	r3, #0
 8003806:	d071      	beq.n	80038ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003810:	e06c      	b.n	80038ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2202      	movs	r2, #2
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d029      	beq.n	8003884 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 020a 	bic.w	r2, r2, #10
 800384c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f003 021f 	and.w	r2, r3, #31
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	2102      	movs	r1, #2
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d038      	beq.n	80038ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003882:	e033      	b.n	80038ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2208      	movs	r2, #8
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02a      	beq.n	80038ee <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d025      	beq.n	80038ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020e 	bic.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	f003 021f 	and.w	r2, r3, #31
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
}
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003908:	429a      	cmp	r2, r3
 800390a:	d802      	bhi.n	8003912 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800390c:	4b15      	ldr	r3, [pc, #84]	@ (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e001      	b.n	8003916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003914:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3b08      	subs	r3, #8
 8003922:	4a12      	ldr	r2, [pc, #72]	@ (800396c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a0b      	ldr	r2, [pc, #44]	@ (8003970 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003942:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2201      	movs	r2, #1
 800394c:	409a      	lsls	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40020407 	.word	0x40020407
 8003964:	40020800 	.word	0x40020800
 8003968:	40020820 	.word	0x40020820
 800396c:	cccccccd 	.word	0xcccccccd
 8003970:	40020880 	.word	0x40020880

08003974 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003996:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3b01      	subs	r3, #1
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2201      	movs	r2, #1
 80039a2:	409a      	lsls	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	1000823f 	.word	0x1000823f
 80039b8:	40020940 	.word	0x40020940

080039bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039ca:	e15a      	b.n	8003c82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2101      	movs	r1, #1
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 814c 	beq.w	8003c7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d005      	beq.n	80039fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d130      	bne.n	8003a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a32:	2201      	movs	r2, #1
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0201 	and.w	r2, r3, #1
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d017      	beq.n	8003a9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d123      	bne.n	8003aee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	08da      	lsrs	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3208      	adds	r2, #8
 8003aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	08da      	lsrs	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3208      	adds	r2, #8
 8003ae8:	6939      	ldr	r1, [r7, #16]
 8003aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0203 	and.w	r2, r3, #3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80a6 	beq.w	8003c7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b30:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca0 <HAL_GPIO_Init+0x2e4>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca0 <HAL_GPIO_Init+0x2e4>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3c:	4b58      	ldr	r3, [pc, #352]	@ (8003ca0 <HAL_GPIO_Init+0x2e4>)
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b48:	4a56      	ldr	r2, [pc, #344]	@ (8003ca4 <HAL_GPIO_Init+0x2e8>)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	3302      	adds	r3, #2
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	220f      	movs	r2, #15
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b72:	d01f      	beq.n	8003bb4 <HAL_GPIO_Init+0x1f8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a4c      	ldr	r2, [pc, #304]	@ (8003ca8 <HAL_GPIO_Init+0x2ec>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d019      	beq.n	8003bb0 <HAL_GPIO_Init+0x1f4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8003cac <HAL_GPIO_Init+0x2f0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_GPIO_Init+0x1f0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a4a      	ldr	r2, [pc, #296]	@ (8003cb0 <HAL_GPIO_Init+0x2f4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_GPIO_Init+0x1ec>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a49      	ldr	r2, [pc, #292]	@ (8003cb4 <HAL_GPIO_Init+0x2f8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <HAL_GPIO_Init+0x1e8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a48      	ldr	r2, [pc, #288]	@ (8003cb8 <HAL_GPIO_Init+0x2fc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_GPIO_Init+0x1e4>
 8003b9c:	2305      	movs	r3, #5
 8003b9e:	e00a      	b.n	8003bb6 <HAL_GPIO_Init+0x1fa>
 8003ba0:	2306      	movs	r3, #6
 8003ba2:	e008      	b.n	8003bb6 <HAL_GPIO_Init+0x1fa>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	e006      	b.n	8003bb6 <HAL_GPIO_Init+0x1fa>
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e004      	b.n	8003bb6 <HAL_GPIO_Init+0x1fa>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e002      	b.n	8003bb6 <HAL_GPIO_Init+0x1fa>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_GPIO_Init+0x1fa>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	f002 0203 	and.w	r2, r2, #3
 8003bbc:	0092      	lsls	r2, r2, #2
 8003bbe:	4093      	lsls	r3, r2
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc6:	4937      	ldr	r1, [pc, #220]	@ (8003ca4 <HAL_GPIO_Init+0x2e8>)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd4:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf8:	4a30      	ldr	r2, [pc, #192]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c22:	4a26      	ldr	r2, [pc, #152]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c28:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c52:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c76:	4a11      	ldr	r2, [pc, #68]	@ (8003cbc <HAL_GPIO_Init+0x300>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f47f ae9d 	bne.w	80039cc <HAL_GPIO_Init+0x10>
  }
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	48000400 	.word	0x48000400
 8003cac:	48000800 	.word	0x48000800
 8003cb0:	48000c00 	.word	0x48000c00
 8003cb4:	48001000 	.word	0x48001000
 8003cb8:	48001400 	.word	0x48001400
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cd0:	787b      	ldrb	r3, [r7, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e08d      	b.n	8003e1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fac6 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2224      	movs	r2, #36	@ 0x24
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	e006      	b.n	8003d78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d108      	bne.n	8003d92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	e007      	b.n	8003da2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d138      	bne.n	8003eae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e032      	b.n	8003eb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2224      	movs	r2, #36	@ 0x24
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d139      	bne.n	8003f46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e033      	b.n	8003f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2224      	movs	r2, #36	@ 0x24
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d141      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f62:	4b4b      	ldr	r3, [pc, #300]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6e:	d131      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f70:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f76:	4a46      	ldr	r2, [pc, #280]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f80:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f88:	4a41      	ldr	r2, [pc, #260]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f90:	4b40      	ldr	r3, [pc, #256]	@ (8004094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2232      	movs	r2, #50	@ 0x32
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa6:	e002      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	4b38      	ldr	r3, [pc, #224]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fba:	d102      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f2      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc2:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d158      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e057      	b.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fda:	4a2d      	ldr	r2, [pc, #180]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fe4:	e04d      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fec:	d141      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffa:	d131      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffc:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004002:	4a23      	ldr	r2, [pc, #140]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400c:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004014:	4a1e      	ldr	r2, [pc, #120]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2232      	movs	r2, #50	@ 0x32
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a1c      	ldr	r2, [pc, #112]	@ (8004098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004032:	e002      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d112      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e011      	b.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004066:	4a0a      	ldr	r2, [pc, #40]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004070:	e007      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004072:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407a:	4a05      	ldr	r2, [pc, #20]	@ (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004080:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40007000 	.word	0x40007000
 8004094:	20000000 	.word	0x20000000
 8004098:	431bde83 	.word	0x431bde83

0800409c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000

080040bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e2fe      	b.n	80046cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d075      	beq.n	80041c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4b97      	ldr	r3, [pc, #604]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	4b94      	ldr	r3, [pc, #592]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_OscConfig+0x3e>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_OscConfig+0x44>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	4b8d      	ldr	r3, [pc, #564]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d05b      	beq.n	80041c4 <HAL_RCC_OscConfig+0x108>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d157      	bne.n	80041c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e2d9      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004120:	d106      	bne.n	8004130 <HAL_RCC_OscConfig+0x74>
 8004122:	4b85      	ldr	r3, [pc, #532]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a84      	ldr	r2, [pc, #528]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e01d      	b.n	800416c <HAL_RCC_OscConfig+0xb0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x98>
 800413a:	4b7f      	ldr	r3, [pc, #508]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7e      	ldr	r2, [pc, #504]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b7c      	ldr	r3, [pc, #496]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7b      	ldr	r2, [pc, #492]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e00b      	b.n	800416c <HAL_RCC_OscConfig+0xb0>
 8004154:	4b78      	ldr	r3, [pc, #480]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a77      	ldr	r2, [pc, #476]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800415a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4b75      	ldr	r3, [pc, #468]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a74      	ldr	r2, [pc, #464]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800416a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f878 	bl	8002268 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800417c:	f7fe f874 	bl	8002268 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	@ 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e29e      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418e:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0xc0>
 800419a:	e014      	b.n	80041c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe f864 	bl	8002268 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fe f860 	bl	8002268 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	@ 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e28a      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b6:	4b60      	ldr	r3, [pc, #384]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0xe8>
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d075      	beq.n	80042be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b59      	ldr	r3, [pc, #356]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041dc:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x136>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_OscConfig+0x13c>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11f      	bne.n	8004238 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x154>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e25d      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	4946      	ldr	r1, [pc, #280]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004224:	4b45      	ldr	r3, [pc, #276]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd ffd1 	bl	80021d0 <HAL_InitTick>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d043      	beq.n	80042bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e249      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3c      	ldr	r2, [pc, #240]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f80c 	bl	8002268 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004254:	f7fe f808 	bl	8002268 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e232      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	492d      	ldr	r1, [pc, #180]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
 8004286:	e01a      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004288:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800428e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd ffe8 	bl	8002268 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429c:	f7fd ffe4 	bl	8002268 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e20e      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ae:	4b22      	ldr	r3, [pc, #136]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1e0>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d041      	beq.n	800434e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01c      	beq.n	800430c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d2:	4b19      	ldr	r3, [pc, #100]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d8:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd ffc1 	bl	8002268 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fd ffbd 	bl	8002268 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1e7      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ef      	beq.n	80042ea <HAL_RCC_OscConfig+0x22e>
 800430a:	e020      	b.n	800434e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004312:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fd ffa4 	bl	8002268 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004322:	e00d      	b.n	8004340 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004324:	f7fd ffa0 	bl	8002268 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d906      	bls.n	8004340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1ca      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004340:	4b8c      	ldr	r3, [pc, #560]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ea      	bne.n	8004324 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80a6 	beq.w	80044a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004360:	4b84      	ldr	r3, [pc, #528]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x2b4>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x2b6>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	4b7f      	ldr	r3, [pc, #508]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	4a7e      	ldr	r2, [pc, #504]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004380:	6593      	str	r3, [r2, #88]	@ 0x58
 8004382:	4b7c      	ldr	r3, [pc, #496]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004392:	4b79      	ldr	r3, [pc, #484]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d118      	bne.n	80043d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439e:	4b76      	ldr	r3, [pc, #472]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a75      	ldr	r2, [pc, #468]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043aa:	f7fd ff5d 	bl	8002268 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fd ff59 	bl	8002268 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e183      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x32e>
 80043d8:	4b66      	ldr	r3, [pc, #408]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043e8:	e024      	b.n	8004434 <HAL_RCC_OscConfig+0x378>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d110      	bne.n	8004414 <HAL_RCC_OscConfig+0x358>
 80043f2:	4b60      	ldr	r3, [pc, #384]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f043 0304 	orr.w	r3, r3, #4
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004402:	4b5c      	ldr	r3, [pc, #368]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	4a5a      	ldr	r2, [pc, #360]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x378>
 8004414:	4b57      	ldr	r3, [pc, #348]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	4a56      	ldr	r2, [pc, #344]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004424:	4b53      	ldr	r3, [pc, #332]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	4a52      	ldr	r2, [pc, #328]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd ff14 	bl	8002268 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	e00a      	b.n	800445a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fd ff10 	bl	8002268 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e138      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445a:	4b46      	ldr	r3, [pc, #280]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ed      	beq.n	8004444 <HAL_RCC_OscConfig+0x388>
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fd fefd 	bl	8002268 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd fef9 	bl	8002268 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e121      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004488:	4b3a      	ldr	r3, [pc, #232]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ed      	bne.n	8004472 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004496:	7ffb      	ldrb	r3, [r7, #31]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449c:	4b35      	ldr	r3, [pc, #212]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d03c      	beq.n	800452e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd fecc 	bl	8002268 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d4:	f7fd fec8 	bl	8002268 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0f2      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044e6:	4b23      	ldr	r3, [pc, #140]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCC_OscConfig+0x418>
 80044f4:	e01b      	b.n	800452e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fd feaf 	bl	8002268 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800450e:	f7fd feab 	bl	8002268 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0d5      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004520:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ef      	bne.n	800450e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80c9 	beq.w	80046ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b0c      	cmp	r3, #12
 8004542:	f000 8083 	beq.w	800464c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d15e      	bne.n	800460c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a08      	ldr	r2, [pc, #32]	@ (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fe85 	bl	8002268 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	e00c      	b.n	800457c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd fe81 	bl	8002268 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d905      	bls.n	800457c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0ab      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
 8004574:	40021000 	.word	0x40021000
 8004578:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b55      	ldr	r3, [pc, #340]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ec      	bne.n	8004562 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b52      	ldr	r3, [pc, #328]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b52      	ldr	r3, [pc, #328]	@ (80046d8 <HAL_RCC_OscConfig+0x61c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6a11      	ldr	r1, [r2, #32]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4943      	ldr	r1, [pc, #268]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b41      	ldr	r3, [pc, #260]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a40      	ldr	r2, [pc, #256]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a3d      	ldr	r2, [pc, #244]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fe40 	bl	8002268 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fe3c 	bl	8002268 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e066      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b35      	ldr	r3, [pc, #212]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x530>
 800460a:	e05e      	b.n	80046ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460c:	4b31      	ldr	r3, [pc, #196]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd fe26 	bl	8002268 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fe22 	bl	8002268 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04c      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004632:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800463e:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	4924      	ldr	r1, [pc, #144]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <HAL_RCC_OscConfig+0x620>)
 8004646:	4013      	ands	r3, r2
 8004648:	60cb      	str	r3, [r1, #12]
 800464a:	e03e      	b.n	80046ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e039      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004658:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_RCC_OscConfig+0x618>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0203 	and.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	429a      	cmp	r2, r3
 800466a:	d12c      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	3b01      	subs	r3, #1
 8004678:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d123      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11b      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d113      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d109      	bne.n	80046c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	3b01      	subs	r3, #1
 80046c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	019f800c 	.word	0x019f800c
 80046dc:	feeefffc 	.word	0xfeeefffc

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e11e      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b91      	ldr	r3, [pc, #580]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b8e      	ldr	r3, [pc, #568]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	498c      	ldr	r1, [pc, #560]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b8a      	ldr	r3, [pc, #552]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e106      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d073      	beq.n	800481c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d129      	bne.n	8004790 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473c:	4b81      	ldr	r3, [pc, #516]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0f4      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800474c:	f000 f99e 	bl	8004a8c <RCC_GetSysClockFreqFromPLLSource>
 8004750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_RCC_ClockConfig+0x268>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d93f      	bls.n	80047da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800475a:	4b7a      	ldr	r3, [pc, #488]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800476e:	2b00      	cmp	r3, #0
 8004770:	d033      	beq.n	80047da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004776:	2b00      	cmp	r3, #0
 8004778:	d12f      	bne.n	80047da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800477a:	4b72      	ldr	r3, [pc, #456]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004782:	4a70      	ldr	r2, [pc, #448]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e024      	b.n	80047da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0c6      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a8:	4b66      	ldr	r3, [pc, #408]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0be      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047b8:	f000 f8ce 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4a61      	ldr	r2, [pc, #388]	@ (8004948 <HAL_RCC_ClockConfig+0x268>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d909      	bls.n	80047da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ce:	4a5d      	ldr	r2, [pc, #372]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b5a      	ldr	r3, [pc, #360]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4957      	ldr	r1, [pc, #348]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fd fd3c 	bl	8002268 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd fd38 	bl	8002268 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e095      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b4e      	ldr	r3, [pc, #312]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d023      	beq.n	8004870 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004834:	4b43      	ldr	r3, [pc, #268]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a42      	ldr	r2, [pc, #264]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800483a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800483e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800484c:	4b3d      	ldr	r3, [pc, #244]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004854:	4a3b      	ldr	r2, [pc, #236]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800485a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4936      	ldr	r1, [pc, #216]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	e008      	b.n	8004882 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b80      	cmp	r3, #128	@ 0x80
 8004874:	d105      	bne.n	8004882 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004876:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4a32      	ldr	r2, [pc, #200]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 800487c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004880:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004882:	4b2f      	ldr	r3, [pc, #188]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d21d      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004890:	4b2b      	ldr	r3, [pc, #172]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 020f 	bic.w	r2, r3, #15
 8004898:	4929      	ldr	r1, [pc, #164]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048a0:	f7fd fce2 	bl	8002268 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fd fcde 	bl	8002268 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e03b      	b.n	8004936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_RCC_ClockConfig+0x260>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1ed      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4917      	ldr	r1, [pc, #92]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f6:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	490f      	ldr	r1, [pc, #60]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800490a:	f000 f825 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 800490e:	4602      	mov	r2, r0
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <HAL_RCC_ClockConfig+0x264>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	490c      	ldr	r1, [pc, #48]	@ (800494c <HAL_RCC_ClockConfig+0x26c>)
 800491c:	5ccb      	ldrb	r3, [r1, r3]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <HAL_RCC_ClockConfig+0x270>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800492a:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <HAL_RCC_ClockConfig+0x274>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fc4e 	bl	80021d0 <HAL_InitTick>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40022000 	.word	0x40022000
 8004944:	40021000 	.word	0x40021000
 8004948:	04c4b400 	.word	0x04c4b400
 800494c:	0800a830 	.word	0x0800a830
 8004950:	20000000 	.word	0x20000000
 8004954:	20000004 	.word	0x20000004

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800495e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d102      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e047      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004970:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d102      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800497c:	4b26      	ldr	r3, [pc, #152]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e03e      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d136      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800498e:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004998:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3301      	adds	r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b6:	68d2      	ldr	r2, [r2, #12]
 80049b8:	0a12      	lsrs	r2, r2, #8
 80049ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	617b      	str	r3, [r7, #20]
      break;
 80049c4:	e00c      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049c6:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	4a10      	ldr	r2, [pc, #64]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	0a12      	lsrs	r2, r2, #8
 80049d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
      break;
 80049de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	0e5b      	lsrs	r3, r3, #25
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	3301      	adds	r3, #1
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e001      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a00:	693b      	ldr	r3, [r7, #16]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	016e3600 	.word	0x016e3600

08004a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b03      	ldr	r3, [pc, #12]	@ (8004a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000000 	.word	0x20000000

08004a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a38:	f7ff fff0 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4904      	ldr	r1, [pc, #16]	@ (8004a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	0800a840 	.word	0x0800a840

08004a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a64:	f7ff ffda 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0adb      	lsrs	r3, r3, #11
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4904      	ldr	r1, [pc, #16]	@ (8004a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0800a840 	.word	0x0800a840

08004a8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10c      	bne.n	8004aca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab0:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aba:	68d2      	ldr	r2, [r2, #12]
 8004abc:	0a12      	lsrs	r2, r2, #8
 8004abe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
    break;
 8004ac8:	e00c      	b.n	8004ae4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aca:	4a12      	ldr	r2, [pc, #72]	@ (8004b14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0a12      	lsrs	r2, r2, #8
 8004ad8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
    break;
 8004ae2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0e5b      	lsrs	r3, r3, #25
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004afe:	687b      	ldr	r3, [r7, #4]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	016e3600 	.word	0x016e3600
 8004b14:	00f42400 	.word	0x00f42400

08004b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b20:	2300      	movs	r3, #0
 8004b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b24:	2300      	movs	r3, #0
 8004b26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8098 	beq.w	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3a:	4b43      	ldr	r3, [pc, #268]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4b40      	ldr	r3, [pc, #256]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b52:	4b3d      	ldr	r3, [pc, #244]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b62:	4b3a      	ldr	r3, [pc, #232]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a39      	ldr	r2, [pc, #228]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b6e:	f7fd fb7b 	bl	8002268 <HAL_GetTick>
 8004b72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b74:	e009      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fd fb77 	bl	8002268 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	74fb      	strb	r3, [r7, #19]
        break;
 8004b88:	e005      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b8a:	4b30      	ldr	r3, [pc, #192]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ef      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d159      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01e      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d019      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb8:	4b23      	ldr	r3, [pc, #140]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc4:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	4a1b      	ldr	r2, [pc, #108]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004be4:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd fb37 	bl	8002268 <HAL_GetTick>
 8004bfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfc:	e00b      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fd fb33 	bl	8002268 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d902      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	74fb      	strb	r3, [r7, #19]
            break;
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c16:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ec      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2a:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	4903      	ldr	r1, [pc, #12]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c40:	e008      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c42:	7cfb      	ldrb	r3, [r7, #19]
 8004c44:	74bb      	strb	r3, [r7, #18]
 8004c46:	e005      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c54:	7c7b      	ldrb	r3, [r7, #17]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	4aa5      	ldr	r2, [pc, #660]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c72:	4ba0      	ldr	r3, [pc, #640]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f023 0203 	bic.w	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	499c      	ldr	r1, [pc, #624]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c94:	4b97      	ldr	r3, [pc, #604]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	f023 020c 	bic.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4994      	ldr	r1, [pc, #592]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cb6:	4b8f      	ldr	r3, [pc, #572]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	498b      	ldr	r1, [pc, #556]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cd8:	4b86      	ldr	r3, [pc, #536]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	4983      	ldr	r1, [pc, #524]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cfa:	4b7e      	ldr	r3, [pc, #504]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	497a      	ldr	r1, [pc, #488]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d1c:	4b75      	ldr	r3, [pc, #468]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	4972      	ldr	r1, [pc, #456]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4969      	ldr	r1, [pc, #420]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d60:	4b64      	ldr	r3, [pc, #400]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4961      	ldr	r1, [pc, #388]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d82:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	4958      	ldr	r1, [pc, #352]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da4:	4b53      	ldr	r3, [pc, #332]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	4950      	ldr	r1, [pc, #320]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ddc:	4b45      	ldr	r3, [pc, #276]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	4942      	ldr	r1, [pc, #264]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e06:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d015      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e14:	4b37      	ldr	r3, [pc, #220]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	4934      	ldr	r1, [pc, #208]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e32:	d105      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d015      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e4c:	4b29      	ldr	r3, [pc, #164]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	4926      	ldr	r1, [pc, #152]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a20      	ldr	r2, [pc, #128]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e84:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	4918      	ldr	r1, [pc, #96]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea4:	4b13      	ldr	r3, [pc, #76]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a12      	ldr	r2, [pc, #72]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d015      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eca:	490a      	ldr	r1, [pc, #40]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a04      	ldr	r2, [pc, #16]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000

08004ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e049      	b.n	8004f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc ff5a 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fab0 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0202 	mvn.w	r2, #2
 8004fda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fa35 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 8004ff6:	e005      	b.n	8005004 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa27 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa38 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01b      	beq.n	8005056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f06f 0204 	mvn.w	r2, #4
 8005026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa0f 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 8005042:	e005      	b.n	8005050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fa01 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa12 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d020      	beq.n	80050a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01b      	beq.n	80050a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0208 	mvn.w	r2, #8
 8005072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9e9 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 800508e:	e005      	b.n	800509c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f9db 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f9ec 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f06f 0210 	mvn.w	r2, #16
 80050be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2208      	movs	r2, #8
 80050c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f9c3 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 80050da:	e005      	b.n	80050e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f9b5 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9c6 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0201 	mvn.w	r2, #1
 800510a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f993 	bl	8005438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fb72 	bl	8005824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb6a 	bl	8005838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f980 	bl	8005488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0220 	mvn.w	r2, #32
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fb32 	bl	8005810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb3e 	bl	800584c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fb36 	bl	8005860 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fb2e 	bl	8005874 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fb26 	bl	8005888 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x1c>
 800525c:	2302      	movs	r3, #2
 800525e:	e0de      	b.n	800541e <HAL_TIM_ConfigClockSource+0x1da>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800527e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800528a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a63      	ldr	r2, [pc, #396]	@ (8005428 <HAL_TIM_ConfigClockSource+0x1e4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f000 80a9 	beq.w	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80052a0:	4a61      	ldr	r2, [pc, #388]	@ (8005428 <HAL_TIM_ConfigClockSource+0x1e4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f200 80ae 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 80052a8:	4a60      	ldr	r2, [pc, #384]	@ (800542c <HAL_TIM_ConfigClockSource+0x1e8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f000 80a1 	beq.w	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80052b0:	4a5e      	ldr	r2, [pc, #376]	@ (800542c <HAL_TIM_ConfigClockSource+0x1e8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f200 80a6 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 80052b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005430 <HAL_TIM_ConfigClockSource+0x1ec>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f000 8099 	beq.w	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80052c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005430 <HAL_TIM_ConfigClockSource+0x1ec>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f200 809e 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 80052c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005434 <HAL_TIM_ConfigClockSource+0x1f0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f000 8091 	beq.w	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80052d0:	4a58      	ldr	r2, [pc, #352]	@ (8005434 <HAL_TIM_ConfigClockSource+0x1f0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f200 8096 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 80052d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052dc:	f000 8089 	beq.w	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80052e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052e4:	f200 808e 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ec:	d03e      	beq.n	800536c <HAL_TIM_ConfigClockSource+0x128>
 80052ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f2:	f200 8087 	bhi.w	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fa:	f000 8086 	beq.w	800540a <HAL_TIM_ConfigClockSource+0x1c6>
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005302:	d87f      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 8005304:	2b70      	cmp	r3, #112	@ 0x70
 8005306:	d01a      	beq.n	800533e <HAL_TIM_ConfigClockSource+0xfa>
 8005308:	2b70      	cmp	r3, #112	@ 0x70
 800530a:	d87b      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 800530c:	2b60      	cmp	r3, #96	@ 0x60
 800530e:	d050      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x16e>
 8005310:	2b60      	cmp	r3, #96	@ 0x60
 8005312:	d877      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 8005314:	2b50      	cmp	r3, #80	@ 0x50
 8005316:	d03c      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x14e>
 8005318:	2b50      	cmp	r3, #80	@ 0x50
 800531a:	d873      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d058      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x18e>
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	d86f      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 8005324:	2b30      	cmp	r3, #48	@ 0x30
 8005326:	d064      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005328:	2b30      	cmp	r3, #48	@ 0x30
 800532a:	d86b      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 800532c:	2b20      	cmp	r3, #32
 800532e:	d060      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d867      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d05c      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005338:	2b10      	cmp	r3, #16
 800533a:	d05a      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800533c:	e062      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800534e:	f000 f9bd 	bl	80056cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	609a      	str	r2, [r3, #8]
      break;
 800536a:	e04f      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800537c:	f000 f9a6 	bl	80056cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800538e:	609a      	str	r2, [r3, #8]
      break;
 8005390:	e03c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	461a      	mov	r2, r3
 80053a0:	f000 f918 	bl	80055d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2150      	movs	r1, #80	@ 0x50
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f971 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 80053b0:	e02c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053be:	461a      	mov	r2, r3
 80053c0:	f000 f937 	bl	8005632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2160      	movs	r1, #96	@ 0x60
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f961 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 80053d0:	e01c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	461a      	mov	r2, r3
 80053e0:	f000 f8f8 	bl	80055d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2140      	movs	r1, #64	@ 0x40
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f951 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 80053f0:	e00c      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f000 f948 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005402:	e003      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e000      	b.n	800540c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800540a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	00100070 	.word	0x00100070
 800542c:	00100040 	.word	0x00100040
 8005430:	00100030 	.word	0x00100030
 8005434:	00100020 	.word	0x00100020

08005438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a42      	ldr	r2, [pc, #264]	@ (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0x38>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0x38>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3f      	ldr	r2, [pc, #252]	@ (80055bc <TIM_Base_SetConfig+0x120>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0x38>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3e      	ldr	r2, [pc, #248]	@ (80055c0 <TIM_Base_SetConfig+0x124>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0x38>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3d      	ldr	r2, [pc, #244]	@ (80055c4 <TIM_Base_SetConfig+0x128>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d108      	bne.n	80054e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a33      	ldr	r2, [pc, #204]	@ (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01b      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f4:	d017      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a30      	ldr	r2, [pc, #192]	@ (80055bc <TIM_Base_SetConfig+0x120>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2f      	ldr	r2, [pc, #188]	@ (80055c0 <TIM_Base_SetConfig+0x124>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00f      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2e      	ldr	r2, [pc, #184]	@ (80055c4 <TIM_Base_SetConfig+0x128>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2d      	ldr	r2, [pc, #180]	@ (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2c      	ldr	r2, [pc, #176]	@ (80055cc <TIM_Base_SetConfig+0x130>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0x8a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <TIM_Base_SetConfig+0x134>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a16      	ldr	r2, [pc, #88]	@ (80055b8 <TIM_Base_SetConfig+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00f      	beq.n	8005584 <TIM_Base_SetConfig+0xe8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <TIM_Base_SetConfig+0x128>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00b      	beq.n	8005584 <TIM_Base_SetConfig+0xe8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_Base_SetConfig+0xe8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a15      	ldr	r2, [pc, #84]	@ (80055cc <TIM_Base_SetConfig+0x130>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0xe8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a14      	ldr	r2, [pc, #80]	@ (80055d0 <TIM_Base_SetConfig+0x134>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d103      	bne.n	800558c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d105      	bne.n	80055aa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]
  }
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40013400 	.word	0x40013400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 030a 	bic.w	r3, r3, #10
 8005610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f023 0210 	bic.w	r2, r3, #16
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800565c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	031b      	lsls	r3, r3, #12
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800566e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f043 0307 	orr.w	r3, r3, #7
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e065      	b.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2c      	ldr	r2, [pc, #176]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2b      	ldr	r2, [pc, #172]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800575e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579a:	d013      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a18      	ldr	r2, [pc, #96]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a17      	ldr	r2, [pc, #92]	@ (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a12      	ldr	r2, [pc, #72]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a13      	ldr	r2, [pc, #76]	@ (800580c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10c      	bne.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40013400 	.word	0x40013400
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40014000 	.word	0x40014000

08005810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e042      	b.n	8005934 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fc fba1 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2224      	movs	r2, #36	@ 0x24
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 ff30 	bl	800674c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fc61 	bl	80061b4 <UART_SetConfig>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e01b      	b.n	8005934 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800590a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800591a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 ffaf 	bl	8006890 <UART_CheckIdleState>
 8005932:	4603      	mov	r3, r0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	@ 0x28
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	2b20      	cmp	r3, #32
 8005954:	d17b      	bne.n	8005a4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_UART_Transmit+0x26>
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e074      	b.n	8005a50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2221      	movs	r2, #33	@ 0x21
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005976:	f7fc fc77 	bl	8002268 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005994:	d108      	bne.n	80059a8 <HAL_UART_Transmit+0x6c>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e003      	b.n	80059b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059b0:	e030      	b.n	8005a14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2180      	movs	r1, #128	@ 0x80
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f001 f811 	bl	80069e4 <UART_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e03d      	b.n	8005a50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	3302      	adds	r3, #2
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	e007      	b.n	8005a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1c8      	bne.n	80059b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2200      	movs	r2, #0
 8005a28:	2140      	movs	r1, #64	@ 0x40
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 ffda 	bl	80069e4 <UART_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e006      	b.n	8005a50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	@ 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d137      	bne.n	8005ae0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_UART_Receive_IT+0x24>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e030      	b.n	8005ae2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <HAL_UART_Receive_IT+0x94>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01f      	beq.n	8005ad0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fff2 	bl	8006ac0 <UART_Start_Receive_IT>
 8005adc:	4603      	mov	r3, r0
 8005ade:	e000      	b.n	8005ae2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3728      	adds	r7, #40	@ 0x28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40008000 	.word	0x40008000

08005af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b0ba      	sub	sp, #232	@ 0xe8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b1e:	4013      	ands	r3, r2
 8005b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d11b      	bne.n	8005b64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d015      	beq.n	8005b64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8300 	beq.w	800615a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
      }
      return;
 8005b62:	e2fa      	b.n	800615a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8123 	beq.w	8005db4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b72:	4b8d      	ldr	r3, [pc, #564]	@ (8005da8 <HAL_UART_IRQHandler+0x2b8>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8005dac <HAL_UART_IRQHandler+0x2bc>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8116 	beq.w	8005db4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d011      	beq.n	8005bb8 <HAL_UART_IRQHandler+0xc8>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bae:	f043 0201 	orr.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d011      	beq.n	8005be8 <HAL_UART_IRQHandler+0xf8>
 8005bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d011      	beq.n	8005c18 <HAL_UART_IRQHandler+0x128>
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2204      	movs	r2, #4
 8005c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f043 0202 	orr.w	r2, r3, #2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c34:	4b5c      	ldr	r3, [pc, #368]	@ (8005da8 <HAL_UART_IRQHandler+0x2b8>)
 8005c36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2208      	movs	r2, #8
 8005c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	f043 0208 	orr.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d012      	beq.n	8005c86 <HAL_UART_IRQHandler+0x196>
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8266 	beq.w	800615e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d013      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b40      	cmp	r3, #64	@ 0x40
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ce2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d054      	beq.n	8005d94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 f80a 	bl	8006d04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d146      	bne.n	8005d8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1d9      	bne.n	8005cfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d017      	beq.n	8005d84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d5a:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <HAL_UART_IRQHandler+0x2c0>)
 8005d5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fd fcb0 	bl	80036ca <HAL_DMA_Abort_IT>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d019      	beq.n	8005da4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d82:	e00f      	b.n	8005da4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f9ff 	bl	8006188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8a:	e00b      	b.n	8005da4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9fb 	bl	8006188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d92:	e007      	b.n	8005da4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f9f7 	bl	8006188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005da2:	e1dc      	b.n	800615e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	bf00      	nop
    return;
 8005da6:	e1da      	b.n	800615e <HAL_UART_IRQHandler+0x66e>
 8005da8:	10000001 	.word	0x10000001
 8005dac:	04000120 	.word	0x04000120
 8005db0:	08006dd1 	.word	0x08006dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f040 8170 	bne.w	800609e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8169 	beq.w	800609e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8162 	beq.w	800609e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	f040 80d8 	bne.w	8005fa2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80af 	beq.w	8005f68 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e14:	429a      	cmp	r2, r3
 8005e16:	f080 80a7 	bcs.w	8005f68 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 8087 	bne.w	8005f46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1da      	bne.n	8005e38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3308      	adds	r3, #8
 8005e88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ea6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e1      	bne.n	8005e82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e3      	bne.n	8005ebe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f14:	f023 0310 	bic.w	r3, r3, #16
 8005f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e4      	bne.n	8005f04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fd fb69 	bl	8003618 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f91b 	bl	800619c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f66:	e0fc      	b.n	8006162 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f040 80f5 	bne.w	8006162 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	f040 80eb 	bne.w	8006162 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8fe 	bl	800619c <HAL_UARTEx_RxEventCallback>
      return;
 8005fa0:	e0df      	b.n	8006162 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80d1 	beq.w	8006166 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80cc 	beq.w	8006166 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ff2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e4      	bne.n	8005fce <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	623b      	str	r3, [r7, #32]
   return(result);
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800602c:	633a      	str	r2, [r7, #48]	@ 0x30
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e1      	bne.n	8006004 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	60fb      	str	r3, [r7, #12]
   return(result);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f023 0310 	bic.w	r3, r3, #16
 8006068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	69b9      	ldr	r1, [r7, #24]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	617b      	str	r3, [r7, #20]
   return(result);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e4      	bne.n	8006054 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f880 	bl	800619c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800609c:	e063      	b.n	8006166 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <HAL_UART_IRQHandler+0x5d8>
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fbe3 	bl	800788c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c6:	e051      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d014      	beq.n	80060fe <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d03a      	beq.n	800616a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
    }
    return;
 80060fc:	e035      	b.n	800616a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_UART_IRQHandler+0x62e>
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fe6c 	bl	8006df4 <UART_EndTransmit_IT>
    return;
 800611c:	e026      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_UART_IRQHandler+0x64e>
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fbbc 	bl	80078b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800613c:	e016      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800613e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006142:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d010      	beq.n	800616c <HAL_UART_IRQHandler+0x67c>
 800614a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800614e:	2b00      	cmp	r3, #0
 8006150:	da0c      	bge.n	800616c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fba4 	bl	80078a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006158:	e008      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
      return;
 800615a:	bf00      	nop
 800615c:	e006      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
    return;
 800615e:	bf00      	nop
 8006160:	e004      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
      return;
 8006162:	bf00      	nop
 8006164:	e002      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
      return;
 8006166:	bf00      	nop
 8006168:	e000      	b.n	800616c <HAL_UART_IRQHandler+0x67c>
    return;
 800616a:	bf00      	nop
  }
}
 800616c:	37e8      	adds	r7, #232	@ 0xe8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b8:	b08c      	sub	sp, #48	@ 0x30
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4313      	orrs	r3, r2
 80061da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4bab      	ldr	r3, [pc, #684]	@ (8006490 <UART_SetConfig+0x2dc>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4aa0      	ldr	r2, [pc, #640]	@ (8006494 <UART_SetConfig+0x2e0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800621c:	4313      	orrs	r3, r2
 800621e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800622a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006234:	430b      	orrs	r3, r1
 8006236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	f023 010f 	bic.w	r1, r3, #15
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a91      	ldr	r2, [pc, #580]	@ (8006498 <UART_SetConfig+0x2e4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d125      	bne.n	80062a4 <UART_SetConfig+0xf0>
 8006258:	4b90      	ldr	r3, [pc, #576]	@ (800649c <UART_SetConfig+0x2e8>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b03      	cmp	r3, #3
 8006264:	d81a      	bhi.n	800629c <UART_SetConfig+0xe8>
 8006266:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <UART_SetConfig+0xb8>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800628d 	.word	0x0800628d
 8006274:	08006285 	.word	0x08006285
 8006278:	08006295 	.word	0x08006295
 800627c:	2301      	movs	r3, #1
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006282:	e0d6      	b.n	8006432 <UART_SetConfig+0x27e>
 8006284:	2302      	movs	r3, #2
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628a:	e0d2      	b.n	8006432 <UART_SetConfig+0x27e>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006292:	e0ce      	b.n	8006432 <UART_SetConfig+0x27e>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629a:	e0ca      	b.n	8006432 <UART_SetConfig+0x27e>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a2:	e0c6      	b.n	8006432 <UART_SetConfig+0x27e>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a7d      	ldr	r2, [pc, #500]	@ (80064a0 <UART_SetConfig+0x2ec>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d138      	bne.n	8006320 <UART_SetConfig+0x16c>
 80062ae:	4b7b      	ldr	r3, [pc, #492]	@ (800649c <UART_SetConfig+0x2e8>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	d82d      	bhi.n	8006318 <UART_SetConfig+0x164>
 80062bc:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <UART_SetConfig+0x110>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	08006319 	.word	0x08006319
 80062cc:	08006319 	.word	0x08006319
 80062d0:	08006319 	.word	0x08006319
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006319 	.word	0x08006319
 80062e0:	08006319 	.word	0x08006319
 80062e4:	08006301 	.word	0x08006301
 80062e8:	08006319 	.word	0x08006319
 80062ec:	08006319 	.word	0x08006319
 80062f0:	08006319 	.word	0x08006319
 80062f4:	08006311 	.word	0x08006311
 80062f8:	2300      	movs	r3, #0
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fe:	e098      	b.n	8006432 <UART_SetConfig+0x27e>
 8006300:	2302      	movs	r3, #2
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006306:	e094      	b.n	8006432 <UART_SetConfig+0x27e>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e090      	b.n	8006432 <UART_SetConfig+0x27e>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e08c      	b.n	8006432 <UART_SetConfig+0x27e>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631e:	e088      	b.n	8006432 <UART_SetConfig+0x27e>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5f      	ldr	r2, [pc, #380]	@ (80064a4 <UART_SetConfig+0x2f0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d125      	bne.n	8006376 <UART_SetConfig+0x1c2>
 800632a:	4b5c      	ldr	r3, [pc, #368]	@ (800649c <UART_SetConfig+0x2e8>)
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006330:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006334:	2b30      	cmp	r3, #48	@ 0x30
 8006336:	d016      	beq.n	8006366 <UART_SetConfig+0x1b2>
 8006338:	2b30      	cmp	r3, #48	@ 0x30
 800633a:	d818      	bhi.n	800636e <UART_SetConfig+0x1ba>
 800633c:	2b20      	cmp	r3, #32
 800633e:	d00a      	beq.n	8006356 <UART_SetConfig+0x1a2>
 8006340:	2b20      	cmp	r3, #32
 8006342:	d814      	bhi.n	800636e <UART_SetConfig+0x1ba>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <UART_SetConfig+0x19a>
 8006348:	2b10      	cmp	r3, #16
 800634a:	d008      	beq.n	800635e <UART_SetConfig+0x1aa>
 800634c:	e00f      	b.n	800636e <UART_SetConfig+0x1ba>
 800634e:	2300      	movs	r3, #0
 8006350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006354:	e06d      	b.n	8006432 <UART_SetConfig+0x27e>
 8006356:	2302      	movs	r3, #2
 8006358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635c:	e069      	b.n	8006432 <UART_SetConfig+0x27e>
 800635e:	2304      	movs	r3, #4
 8006360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006364:	e065      	b.n	8006432 <UART_SetConfig+0x27e>
 8006366:	2308      	movs	r3, #8
 8006368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636c:	e061      	b.n	8006432 <UART_SetConfig+0x27e>
 800636e:	2310      	movs	r3, #16
 8006370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006374:	e05d      	b.n	8006432 <UART_SetConfig+0x27e>
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4b      	ldr	r2, [pc, #300]	@ (80064a8 <UART_SetConfig+0x2f4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d125      	bne.n	80063cc <UART_SetConfig+0x218>
 8006380:	4b46      	ldr	r3, [pc, #280]	@ (800649c <UART_SetConfig+0x2e8>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006386:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800638a:	2bc0      	cmp	r3, #192	@ 0xc0
 800638c:	d016      	beq.n	80063bc <UART_SetConfig+0x208>
 800638e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006390:	d818      	bhi.n	80063c4 <UART_SetConfig+0x210>
 8006392:	2b80      	cmp	r3, #128	@ 0x80
 8006394:	d00a      	beq.n	80063ac <UART_SetConfig+0x1f8>
 8006396:	2b80      	cmp	r3, #128	@ 0x80
 8006398:	d814      	bhi.n	80063c4 <UART_SetConfig+0x210>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <UART_SetConfig+0x1f0>
 800639e:	2b40      	cmp	r3, #64	@ 0x40
 80063a0:	d008      	beq.n	80063b4 <UART_SetConfig+0x200>
 80063a2:	e00f      	b.n	80063c4 <UART_SetConfig+0x210>
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e042      	b.n	8006432 <UART_SetConfig+0x27e>
 80063ac:	2302      	movs	r3, #2
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e03e      	b.n	8006432 <UART_SetConfig+0x27e>
 80063b4:	2304      	movs	r3, #4
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e03a      	b.n	8006432 <UART_SetConfig+0x27e>
 80063bc:	2308      	movs	r3, #8
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e036      	b.n	8006432 <UART_SetConfig+0x27e>
 80063c4:	2310      	movs	r3, #16
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ca:	e032      	b.n	8006432 <UART_SetConfig+0x27e>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a30      	ldr	r2, [pc, #192]	@ (8006494 <UART_SetConfig+0x2e0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d12a      	bne.n	800642c <UART_SetConfig+0x278>
 80063d6:	4b31      	ldr	r3, [pc, #196]	@ (800649c <UART_SetConfig+0x2e8>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063e4:	d01a      	beq.n	800641c <UART_SetConfig+0x268>
 80063e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063ea:	d81b      	bhi.n	8006424 <UART_SetConfig+0x270>
 80063ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f0:	d00c      	beq.n	800640c <UART_SetConfig+0x258>
 80063f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f6:	d815      	bhi.n	8006424 <UART_SetConfig+0x270>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <UART_SetConfig+0x250>
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006400:	d008      	beq.n	8006414 <UART_SetConfig+0x260>
 8006402:	e00f      	b.n	8006424 <UART_SetConfig+0x270>
 8006404:	2300      	movs	r3, #0
 8006406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640a:	e012      	b.n	8006432 <UART_SetConfig+0x27e>
 800640c:	2302      	movs	r3, #2
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006412:	e00e      	b.n	8006432 <UART_SetConfig+0x27e>
 8006414:	2304      	movs	r3, #4
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641a:	e00a      	b.n	8006432 <UART_SetConfig+0x27e>
 800641c:	2308      	movs	r3, #8
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006422:	e006      	b.n	8006432 <UART_SetConfig+0x27e>
 8006424:	2310      	movs	r3, #16
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642a:	e002      	b.n	8006432 <UART_SetConfig+0x27e>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a17      	ldr	r2, [pc, #92]	@ (8006494 <UART_SetConfig+0x2e0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	f040 80a8 	bne.w	800658e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800643e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006442:	2b08      	cmp	r3, #8
 8006444:	d834      	bhi.n	80064b0 <UART_SetConfig+0x2fc>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <UART_SetConfig+0x298>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006471 	.word	0x08006471
 8006450:	080064b1 	.word	0x080064b1
 8006454:	08006479 	.word	0x08006479
 8006458:	080064b1 	.word	0x080064b1
 800645c:	0800647f 	.word	0x0800647f
 8006460:	080064b1 	.word	0x080064b1
 8006464:	080064b1 	.word	0x080064b1
 8006468:	080064b1 	.word	0x080064b1
 800646c:	08006487 	.word	0x08006487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006470:	f7fe fae0 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8006474:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006476:	e021      	b.n	80064bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <UART_SetConfig+0x2f8>)
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800647c:	e01e      	b.n	80064bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647e:	f7fe fa6b 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8006482:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006484:	e01a      	b.n	80064bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800648c:	e016      	b.n	80064bc <UART_SetConfig+0x308>
 800648e:	bf00      	nop
 8006490:	cfff69f3 	.word	0xcfff69f3
 8006494:	40008000 	.word	0x40008000
 8006498:	40013800 	.word	0x40013800
 800649c:	40021000 	.word	0x40021000
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 812a 	beq.w	8006718 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	4a9e      	ldr	r2, [pc, #632]	@ (8006744 <UART_SetConfig+0x590>)
 80064ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ce:	461a      	mov	r2, r3
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	4613      	mov	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	4413      	add	r3, r2
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d305      	bcc.n	80064f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d903      	bls.n	80064fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064fa:	e10d      	b.n	8006718 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	2200      	movs	r2, #0
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	60fa      	str	r2, [r7, #12]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	4a8e      	ldr	r2, [pc, #568]	@ (8006744 <UART_SetConfig+0x590>)
 800650a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650e:	b29b      	uxth	r3, r3
 8006510:	2200      	movs	r2, #0
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800651a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800651e:	f7fa fb6b 	bl	8000bf8 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	020b      	lsls	r3, r1, #8
 8006534:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006538:	0202      	lsls	r2, r0, #8
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	6849      	ldr	r1, [r1, #4]
 800653e:	0849      	lsrs	r1, r1, #1
 8006540:	2000      	movs	r0, #0
 8006542:	460c      	mov	r4, r1
 8006544:	4605      	mov	r5, r0
 8006546:	eb12 0804 	adds.w	r8, r2, r4
 800654a:	eb43 0905 	adc.w	r9, r3, r5
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	469a      	mov	sl, r3
 8006556:	4693      	mov	fp, r2
 8006558:	4652      	mov	r2, sl
 800655a:	465b      	mov	r3, fp
 800655c:	4640      	mov	r0, r8
 800655e:	4649      	mov	r1, r9
 8006560:	f7fa fb4a 	bl	8000bf8 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4613      	mov	r3, r2
 800656a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006572:	d308      	bcc.n	8006586 <UART_SetConfig+0x3d2>
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800657a:	d204      	bcs.n	8006586 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	60da      	str	r2, [r3, #12]
 8006584:	e0c8      	b.n	8006718 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800658c:	e0c4      	b.n	8006718 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006596:	d167      	bne.n	8006668 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006598:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800659c:	2b08      	cmp	r3, #8
 800659e:	d828      	bhi.n	80065f2 <UART_SetConfig+0x43e>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <UART_SetConfig+0x3f4>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065f3 	.word	0x080065f3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065f3 	.word	0x080065f3
 80065c4:	080065f3 	.word	0x080065f3
 80065c8:	080065eb 	.word	0x080065eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7fe fa32 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065d2:	e014      	b.n	80065fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe fa44 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 80065d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065da:	e010      	b.n	80065fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006748 <UART_SetConfig+0x594>)
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065e0:	e00d      	b.n	80065fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe f9b9 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80065e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065e8:	e009      	b.n	80065fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065f0:	e005      	b.n	80065fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8089 	beq.w	8006718 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	4a4e      	ldr	r2, [pc, #312]	@ (8006744 <UART_SetConfig+0x590>)
 800660c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006610:	461a      	mov	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	fbb3 f3f2 	udiv	r3, r3, r2
 8006618:	005a      	lsls	r2, r3, #1
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	441a      	add	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	fbb2 f3f3 	udiv	r3, r2, r3
 800662a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2b0f      	cmp	r3, #15
 8006630:	d916      	bls.n	8006660 <UART_SetConfig+0x4ac>
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006638:	d212      	bcs.n	8006660 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f023 030f 	bic.w	r3, r3, #15
 8006642:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	b29b      	uxth	r3, r3
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	b29a      	uxth	r2, r3
 8006650:	8bfb      	ldrh	r3, [r7, #30]
 8006652:	4313      	orrs	r3, r2
 8006654:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	8bfa      	ldrh	r2, [r7, #30]
 800665c:	60da      	str	r2, [r3, #12]
 800665e:	e05b      	b.n	8006718 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006666:	e057      	b.n	8006718 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006668:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800666c:	2b08      	cmp	r3, #8
 800666e:	d828      	bhi.n	80066c2 <UART_SetConfig+0x50e>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <UART_SetConfig+0x4c4>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066c3 	.word	0x080066c3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066c3 	.word	0x080066c3
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066bb 	.word	0x080066bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fe f9ca 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 80066a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066a2:	e014      	b.n	80066ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fe f9dc 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066aa:	e010      	b.n	80066ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ac:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <UART_SetConfig+0x594>)
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066b0:	e00d      	b.n	80066ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fe f951 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 80066b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066b8:	e009      	b.n	80066ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066c0:	e005      	b.n	80066ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066cc:	bf00      	nop
    }

    if (pclk != 0U)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d021      	beq.n	8006718 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <UART_SetConfig+0x590>)
 80066da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066de:	461a      	mov	r2, r3
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	441a      	add	r2, r3
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d909      	bls.n	8006712 <UART_SetConfig+0x55e>
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006704:	d205      	bcs.n	8006712 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	b29a      	uxth	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e002      	b.n	8006718 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2201      	movs	r2, #1
 800671c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2201      	movs	r2, #1
 8006724:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2200      	movs	r2, #0
 800672c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006734:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006738:	4618      	mov	r0, r3
 800673a:	3730      	adds	r7, #48	@ 0x30
 800673c:	46bd      	mov	sp, r7
 800673e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006742:	bf00      	nop
 8006744:	0800a848 	.word	0x0800a848
 8006748:	00f42400 	.word	0x00f42400

0800674c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01a      	beq.n	8006862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800684a:	d10a      	bne.n	8006862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b098      	sub	sp, #96	@ 0x60
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068a0:	f7fb fce2 	bl	8002268 <HAL_GetTick>
 80068a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d12f      	bne.n	8006914 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068bc:	2200      	movs	r2, #0
 80068be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f88e 	bl	80069e4 <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d022      	beq.n	8006914 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e6      	bne.n	80068ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e063      	b.n	80069dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d149      	bne.n	80069b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006922:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800692a:	2200      	movs	r2, #0
 800692c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f857 	bl	80069e4 <UART_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d03c      	beq.n	80069b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	623b      	str	r3, [r7, #32]
   return(result);
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695a:	633b      	str	r3, [r7, #48]	@ 0x30
 800695c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e6      	bne.n	800693c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	60fb      	str	r3, [r7, #12]
   return(result);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800698e:	61fa      	str	r2, [r7, #28]
 8006990:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	69b9      	ldr	r1, [r7, #24]
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	617b      	str	r3, [r7, #20]
   return(result);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e5      	bne.n	800696e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e012      	b.n	80069dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3758      	adds	r7, #88	@ 0x58
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f4:	e04f      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069fc:	d04b      	beq.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fe:	f7fb fc33 	bl	8002268 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e04e      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d037      	beq.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b80      	cmp	r3, #128	@ 0x80
 8006a2a:	d034      	beq.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b40      	cmp	r3, #64	@ 0x40
 8006a30:	d031      	beq.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d110      	bne.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2208      	movs	r2, #8
 8006a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f95b 	bl	8006d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2208      	movs	r2, #8
 8006a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e029      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a70:	d111      	bne.n	8006a96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f941 	bl	8006d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e00f      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69da      	ldr	r2, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2301      	moveq	r3, #1
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d0a0      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b0a3      	sub	sp, #140	@ 0x8c
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af2:	d10e      	bne.n	8006b12 <UART_Start_Receive_IT+0x52>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <UART_Start_Receive_IT+0x48>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b06:	e02d      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	22ff      	movs	r2, #255	@ 0xff
 8006b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b10:	e028      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10d      	bne.n	8006b36 <UART_Start_Receive_IT+0x76>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <UART_Start_Receive_IT+0x6c>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	22ff      	movs	r2, #255	@ 0xff
 8006b26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b2a:	e01b      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	227f      	movs	r2, #127	@ 0x7f
 8006b30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b34:	e016      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b3e:	d10d      	bne.n	8006b5c <UART_Start_Receive_IT+0x9c>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <UART_Start_Receive_IT+0x92>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	227f      	movs	r2, #127	@ 0x7f
 8006b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b50:	e008      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	223f      	movs	r2, #63	@ 0x3f
 8006b56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b5a:	e003      	b.n	8006b64 <UART_Start_Receive_IT+0xa4>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2222      	movs	r2, #34	@ 0x22
 8006b70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006b84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006b98:	673a      	str	r2, [r7, #112]	@ 0x70
 8006b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006b9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bb4:	d14f      	bne.n	8006c56 <UART_Start_Receive_IT+0x196>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d349      	bcc.n	8006c56 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bca:	d107      	bne.n	8006bdc <UART_Start_Receive_IT+0x11c>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d103      	bne.n	8006bdc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a47      	ldr	r2, [pc, #284]	@ (8006cf4 <UART_Start_Receive_IT+0x234>)
 8006bd8:	675a      	str	r2, [r3, #116]	@ 0x74
 8006bda:	e002      	b.n	8006be2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a46      	ldr	r2, [pc, #280]	@ (8006cf8 <UART_Start_Receive_IT+0x238>)
 8006be0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01a      	beq.n	8006c20 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c0e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e4      	bne.n	8006bea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006c40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006c42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e5      	bne.n	8006c20 <UART_Start_Receive_IT+0x160>
 8006c54:	e046      	b.n	8006ce4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c5e:	d107      	bne.n	8006c70 <UART_Start_Receive_IT+0x1b0>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4a24      	ldr	r2, [pc, #144]	@ (8006cfc <UART_Start_Receive_IT+0x23c>)
 8006c6c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006c6e:	e002      	b.n	8006c76 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a23      	ldr	r2, [pc, #140]	@ (8006d00 <UART_Start_Receive_IT+0x240>)
 8006c74:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d019      	beq.n	8006cb2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006c92:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_Start_Receive_IT+0x1be>
 8006cb0:	e018      	b.n	8006ce4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f043 0320 	orr.w	r3, r3, #32
 8006cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	69f9      	ldr	r1, [r7, #28]
 8006cd6:	6a3a      	ldr	r2, [r7, #32]
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e6      	bne.n	8006cb2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	378c      	adds	r7, #140	@ 0x8c
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	08007521 	.word	0x08007521
 8006cf8:	080071bd 	.word	0x080071bd
 8006cfc:	08007005 	.word	0x08007005
 8006d00:	08006e4d 	.word	0x08006e4d

08006d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b095      	sub	sp, #84	@ 0x54
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e6      	bne.n	8006d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d118      	bne.n	8006db0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6979      	ldr	r1, [r7, #20]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	613b      	str	r3, [r7, #16]
   return(result);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e6      	bne.n	8006d7e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006dc4:	bf00      	nop
 8006dc6:	3754      	adds	r7, #84	@ 0x54
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff f9ce 	bl	8006188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6979      	ldr	r1, [r7, #20]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	613b      	str	r3, [r7, #16]
   return(result);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e6      	bne.n	8006dfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff f999 	bl	8006174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e42:	bf00      	nop
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b09c      	sub	sp, #112	@ 0x70
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e64:	2b22      	cmp	r3, #34	@ 0x22
 8006e66:	f040 80be 	bne.w	8006fe6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e78:	b2d9      	uxtb	r1, r3
 8006e7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e84:	400a      	ands	r2, r1
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f040 80a1 	bne.w	8006ff6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ed4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e6      	bne.n	8006eb4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f06:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e5      	bne.n	8006ee6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a33      	ldr	r2, [pc, #204]	@ (8007000 <UART_RxISR_8BIT+0x1b4>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01f      	beq.n	8006f78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d018      	beq.n	8006f78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	623b      	str	r3, [r7, #32]
   return(result);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d12e      	bne.n	8006fde <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0310 	bic.w	r3, r3, #16
 8006f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	69b9      	ldr	r1, [r7, #24]
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e6      	bne.n	8006f86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b10      	cmp	r3, #16
 8006fc4:	d103      	bne.n	8006fce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff f8e0 	bl	800619c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fdc:	e00b      	b.n	8006ff6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fa fad6 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 8006fe4:	e007      	b.n	8006ff6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0208 	orr.w	r2, r2, #8
 8006ff4:	619a      	str	r2, [r3, #24]
}
 8006ff6:	bf00      	nop
 8006ff8:	3770      	adds	r7, #112	@ 0x70
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40008000 	.word	0x40008000

08007004 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b09c      	sub	sp, #112	@ 0x70
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007012:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800701c:	2b22      	cmp	r3, #34	@ 0x22
 800701e:	f040 80be 	bne.w	800719e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007030:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007032:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007036:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800703a:	4013      	ands	r3, r2
 800703c:	b29a      	uxth	r2, r3
 800703e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007040:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007046:	1c9a      	adds	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 80a1 	bne.w	80071ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800707a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800707c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007080:	667b      	str	r3, [r7, #100]	@ 0x64
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800708a:	657b      	str	r3, [r7, #84]	@ 0x54
 800708c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007090:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e6      	bne.n	800706c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070be:	643a      	str	r2, [r7, #64]	@ 0x40
 80070c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e5      	bne.n	800709e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a33      	ldr	r2, [pc, #204]	@ (80071b8 <UART_RxISR_16BIT+0x1b4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d01f      	beq.n	8007130 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d018      	beq.n	8007130 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	61fb      	str	r3, [r7, #28]
   return(result);
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007112:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800711c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800711e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e6      	bne.n	80070fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d12e      	bne.n	8007196 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	60bb      	str	r3, [r7, #8]
   return(result);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 0310 	bic.w	r3, r3, #16
 8007152:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6979      	ldr	r1, [r7, #20]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	613b      	str	r3, [r7, #16]
   return(result);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e6      	bne.n	800713e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b10      	cmp	r3, #16
 800717c:	d103      	bne.n	8007186 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2210      	movs	r2, #16
 8007184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff f804 	bl	800619c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007194:	e00b      	b.n	80071ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa f9fa 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 800719c:	e007      	b.n	80071ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0208 	orr.w	r2, r2, #8
 80071ac:	619a      	str	r2, [r3, #24]
}
 80071ae:	bf00      	nop
 80071b0:	3770      	adds	r7, #112	@ 0x70
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40008000 	.word	0x40008000

080071bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b0ac      	sub	sp, #176	@ 0xb0
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071f2:	2b22      	cmp	r3, #34	@ 0x22
 80071f4:	f040 8183 	bne.w	80074fe <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007202:	e126      	b.n	8007452 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800720e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007212:	b2d9      	uxtb	r1, r3
 8007214:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721e:	400a      	ands	r2, r1
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800724a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d053      	beq.n	80072fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d011      	beq.n	8007286 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2201      	movs	r2, #1
 8007274:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727c:	f043 0201 	orr.w	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d011      	beq.n	80072b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2202      	movs	r2, #2
 80072a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ac:	f043 0204 	orr.w	r2, r3, #4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d011      	beq.n	80072e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80072c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2204      	movs	r2, #4
 80072d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072dc:	f043 0202 	orr.w	r2, r3, #2
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fe ff49 	bl	8006188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 80a3 	bne.w	8007452 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800731a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800731c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800732e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007330:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007334:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800733c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e4      	bne.n	800730c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800736a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800736c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007370:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007378:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e1      	bne.n	8007342 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a60      	ldr	r2, [pc, #384]	@ (8007518 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d021      	beq.n	80073e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01a      	beq.n	80073e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80073ce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e4      	bne.n	80073aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d130      	bne.n	800744a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007410:	643b      	str	r3, [r7, #64]	@ 0x40
 8007412:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e4      	bne.n	80073ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b10      	cmp	r3, #16
 8007430:	d103      	bne.n	800743a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2210      	movs	r2, #16
 8007438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fe feaa 	bl	800619c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007448:	e00e      	b.n	8007468 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa f8a0 	bl	8001590 <HAL_UART_RxCpltCallback>
        break;
 8007450:	e00a      	b.n	8007468 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007452:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800745a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	f47f aece 	bne.w	8007204 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800746e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007472:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007476:	2b00      	cmp	r3, #0
 8007478:	d049      	beq.n	800750e <UART_RxISR_8BIT_FIFOEN+0x352>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007480:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007484:	429a      	cmp	r2, r3
 8007486:	d242      	bcs.n	800750e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	61fb      	str	r3, [r7, #28]
   return(result);
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800749e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80074ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e3      	bne.n	8007488 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a16      	ldr	r2, [pc, #88]	@ (800751c <UART_RxISR_8BIT_FIFOEN+0x360>)
 80074c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f043 0320 	orr.w	r3, r3, #32
 80074da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6979      	ldr	r1, [r7, #20]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	613b      	str	r3, [r7, #16]
   return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e4      	bne.n	80074c6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074fc:	e007      	b.n	800750e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0208 	orr.w	r2, r2, #8
 800750c:	619a      	str	r2, [r3, #24]
}
 800750e:	bf00      	nop
 8007510:	37b0      	adds	r7, #176	@ 0xb0
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40008000 	.word	0x40008000
 800751c:	08006e4d 	.word	0x08006e4d

08007520 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b0ae      	sub	sp, #184	@ 0xb8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800752e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007556:	2b22      	cmp	r3, #34	@ 0x22
 8007558:	f040 8187 	bne.w	800786a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007562:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007566:	e12a      	b.n	80077be <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800757a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800757e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007582:	4013      	ands	r3, r2
 8007584:	b29a      	uxth	r2, r3
 8007586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800758a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007590:	1c9a      	adds	r2, r3, #2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d053      	beq.n	8007666 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d011      	beq.n	80075ee <UART_RxISR_16BIT_FIFOEN+0xce>
 80075ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00b      	beq.n	80075ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2201      	movs	r2, #1
 80075dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e4:	f043 0201 	orr.w	r2, r3, #1
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d011      	beq.n	800761e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80075fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2202      	movs	r2, #2
 800760c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007614:	f043 0204 	orr.w	r2, r3, #4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800761e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d011      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800762a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00b      	beq.n	800764e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2204      	movs	r2, #4
 800763c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007644:	f043 0202 	orr.w	r2, r3, #2
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007654:	2b00      	cmp	r3, #0
 8007656:	d006      	beq.n	8007666 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fe fd95 	bl	8006188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 80a5 	bne.w	80077be <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007696:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800769a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800769e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e2      	bne.n	8007674 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80076d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e1      	bne.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a60      	ldr	r2, [pc, #384]	@ (8007884 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d021      	beq.n	800774c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01a      	beq.n	800774c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007726:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800772a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007738:	65bb      	str	r3, [r7, #88]	@ 0x58
 800773a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800773e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e4      	bne.n	8007716 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d130      	bne.n	80077b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776a:	f023 0310 	bic.w	r3, r3, #16
 800776e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800777c:	647b      	str	r3, [r7, #68]	@ 0x44
 800777e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800778a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e4      	bne.n	800775a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b10      	cmp	r3, #16
 800779c:	d103      	bne.n	80077a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2210      	movs	r2, #16
 80077a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fe fcf4 	bl	800619c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80077b4:	e00e      	b.n	80077d4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7f9 feea 	bl	8001590 <HAL_UART_RxCpltCallback>
        break;
 80077bc:	e00a      	b.n	80077d4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077be:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d006      	beq.n	80077d4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80077c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f47f aeca 	bne.w	8007568 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077da:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d049      	beq.n	800787a <UART_RxISR_16BIT_FIFOEN+0x35a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077ec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d242      	bcs.n	800787a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	623b      	str	r3, [r7, #32]
   return(result);
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800780a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007818:	633a      	str	r2, [r7, #48]	@ 0x30
 800781a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e3      	bne.n	80077f4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a16      	ldr	r2, [pc, #88]	@ (8007888 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007830:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f043 0320 	orr.w	r3, r3, #32
 8007846:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	69b9      	ldr	r1, [r7, #24]
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	617b      	str	r3, [r7, #20]
   return(result);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e4      	bne.n	8007832 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007868:	e007      	b.n	800787a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0208 	orr.w	r2, r2, #8
 8007878:	619a      	str	r2, [r3, #24]
}
 800787a:	bf00      	nop
 800787c:	37b8      	adds	r7, #184	@ 0xb8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40008000 	.word	0x40008000
 8007888:	08007005 	.word	0x08007005

0800788c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_UARTEx_DisableFifoMode+0x16>
 80078da:	2302      	movs	r3, #2
 80078dc:	e027      	b.n	800792e <HAL_UARTEx_DisableFifoMode+0x66>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2224      	movs	r2, #36	@ 0x24
 80078ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800790c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800794e:	2302      	movs	r3, #2
 8007950:	e02d      	b.n	80079ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2224      	movs	r2, #36	@ 0x24
 800795e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0201 	bic.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f850 	bl	8007a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e02d      	b.n	8007a2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2224      	movs	r2, #36	@ 0x24
 80079da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f812 	bl	8007a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d108      	bne.n	8007a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a54:	e031      	b.n	8007aba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a56:	2308      	movs	r3, #8
 8007a58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	0e5b      	lsrs	r3, r3, #25
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	0f5b      	lsrs	r3, r3, #29
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	7b3a      	ldrb	r2, [r7, #12]
 8007a82:	4911      	ldr	r1, [pc, #68]	@ (8007ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8007a84:	5c8a      	ldrb	r2, [r1, r2]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a8a:	7b3a      	ldrb	r2, [r7, #12]
 8007a8c:	490f      	ldr	r1, [pc, #60]	@ (8007acc <UARTEx_SetNbDataToProcess+0x98>)
 8007a8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	7b7a      	ldrb	r2, [r7, #13]
 8007aa0:	4909      	ldr	r1, [pc, #36]	@ (8007ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8007aa2:	5c8a      	ldrb	r2, [r1, r2]
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aa8:	7b7a      	ldrb	r2, [r7, #13]
 8007aaa:	4908      	ldr	r1, [pc, #32]	@ (8007acc <UARTEx_SetNbDataToProcess+0x98>)
 8007aac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	0800a860 	.word	0x0800a860
 8007acc:	0800a868 	.word	0x0800a868

08007ad0 <malloc>:
 8007ad0:	4b02      	ldr	r3, [pc, #8]	@ (8007adc <malloc+0xc>)
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	f000 b825 	b.w	8007b24 <_malloc_r>
 8007ada:	bf00      	nop
 8007adc:	20000018 	.word	0x20000018

08007ae0 <sbrk_aligned>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8007b20 <sbrk_aligned+0x40>)
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	6831      	ldr	r1, [r6, #0]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	b911      	cbnz	r1, 8007af2 <sbrk_aligned+0x12>
 8007aec:	f000 ff48 	bl	8008980 <_sbrk_r>
 8007af0:	6030      	str	r0, [r6, #0]
 8007af2:	4621      	mov	r1, r4
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 ff43 	bl	8008980 <_sbrk_r>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	d103      	bne.n	8007b06 <sbrk_aligned+0x26>
 8007afe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b02:	4620      	mov	r0, r4
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	1cc4      	adds	r4, r0, #3
 8007b08:	f024 0403 	bic.w	r4, r4, #3
 8007b0c:	42a0      	cmp	r0, r4
 8007b0e:	d0f8      	beq.n	8007b02 <sbrk_aligned+0x22>
 8007b10:	1a21      	subs	r1, r4, r0
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 ff34 	bl	8008980 <_sbrk_r>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d1f2      	bne.n	8007b02 <sbrk_aligned+0x22>
 8007b1c:	e7ef      	b.n	8007afe <sbrk_aligned+0x1e>
 8007b1e:	bf00      	nop
 8007b20:	200005f4 	.word	0x200005f4

08007b24 <_malloc_r>:
 8007b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b28:	1ccd      	adds	r5, r1, #3
 8007b2a:	f025 0503 	bic.w	r5, r5, #3
 8007b2e:	3508      	adds	r5, #8
 8007b30:	2d0c      	cmp	r5, #12
 8007b32:	bf38      	it	cc
 8007b34:	250c      	movcc	r5, #12
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	4606      	mov	r6, r0
 8007b3a:	db01      	blt.n	8007b40 <_malloc_r+0x1c>
 8007b3c:	42a9      	cmp	r1, r5
 8007b3e:	d904      	bls.n	8007b4a <_malloc_r+0x26>
 8007b40:	230c      	movs	r3, #12
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	2000      	movs	r0, #0
 8007b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c20 <_malloc_r+0xfc>
 8007b4e:	f000 f869 	bl	8007c24 <__malloc_lock>
 8007b52:	f8d8 3000 	ldr.w	r3, [r8]
 8007b56:	461c      	mov	r4, r3
 8007b58:	bb44      	cbnz	r4, 8007bac <_malloc_r+0x88>
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff ffbf 	bl	8007ae0 <sbrk_aligned>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	4604      	mov	r4, r0
 8007b66:	d158      	bne.n	8007c1a <_malloc_r+0xf6>
 8007b68:	f8d8 4000 	ldr.w	r4, [r8]
 8007b6c:	4627      	mov	r7, r4
 8007b6e:	2f00      	cmp	r7, #0
 8007b70:	d143      	bne.n	8007bfa <_malloc_r+0xd6>
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	d04b      	beq.n	8007c0e <_malloc_r+0xea>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	4639      	mov	r1, r7
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	eb04 0903 	add.w	r9, r4, r3
 8007b80:	f000 fefe 	bl	8008980 <_sbrk_r>
 8007b84:	4581      	cmp	r9, r0
 8007b86:	d142      	bne.n	8007c0e <_malloc_r+0xea>
 8007b88:	6821      	ldr	r1, [r4, #0]
 8007b8a:	1a6d      	subs	r5, r5, r1
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7ff ffa6 	bl	8007ae0 <sbrk_aligned>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d03a      	beq.n	8007c0e <_malloc_r+0xea>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	442b      	add	r3, r5
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	bb62      	cbnz	r2, 8007c00 <_malloc_r+0xdc>
 8007ba6:	f8c8 7000 	str.w	r7, [r8]
 8007baa:	e00f      	b.n	8007bcc <_malloc_r+0xa8>
 8007bac:	6822      	ldr	r2, [r4, #0]
 8007bae:	1b52      	subs	r2, r2, r5
 8007bb0:	d420      	bmi.n	8007bf4 <_malloc_r+0xd0>
 8007bb2:	2a0b      	cmp	r2, #11
 8007bb4:	d917      	bls.n	8007be6 <_malloc_r+0xc2>
 8007bb6:	1961      	adds	r1, r4, r5
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	6025      	str	r5, [r4, #0]
 8007bbc:	bf18      	it	ne
 8007bbe:	6059      	strne	r1, [r3, #4]
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	bf08      	it	eq
 8007bc4:	f8c8 1000 	streq.w	r1, [r8]
 8007bc8:	5162      	str	r2, [r4, r5]
 8007bca:	604b      	str	r3, [r1, #4]
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f000 f82f 	bl	8007c30 <__malloc_unlock>
 8007bd2:	f104 000b 	add.w	r0, r4, #11
 8007bd6:	1d23      	adds	r3, r4, #4
 8007bd8:	f020 0007 	bic.w	r0, r0, #7
 8007bdc:	1ac2      	subs	r2, r0, r3
 8007bde:	bf1c      	itt	ne
 8007be0:	1a1b      	subne	r3, r3, r0
 8007be2:	50a3      	strne	r3, [r4, r2]
 8007be4:	e7af      	b.n	8007b46 <_malloc_r+0x22>
 8007be6:	6862      	ldr	r2, [r4, #4]
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	bf0c      	ite	eq
 8007bec:	f8c8 2000 	streq.w	r2, [r8]
 8007bf0:	605a      	strne	r2, [r3, #4]
 8007bf2:	e7eb      	b.n	8007bcc <_malloc_r+0xa8>
 8007bf4:	4623      	mov	r3, r4
 8007bf6:	6864      	ldr	r4, [r4, #4]
 8007bf8:	e7ae      	b.n	8007b58 <_malloc_r+0x34>
 8007bfa:	463c      	mov	r4, r7
 8007bfc:	687f      	ldr	r7, [r7, #4]
 8007bfe:	e7b6      	b.n	8007b6e <_malloc_r+0x4a>
 8007c00:	461a      	mov	r2, r3
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	d1fb      	bne.n	8007c00 <_malloc_r+0xdc>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6053      	str	r3, [r2, #4]
 8007c0c:	e7de      	b.n	8007bcc <_malloc_r+0xa8>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	4630      	mov	r0, r6
 8007c14:	f000 f80c 	bl	8007c30 <__malloc_unlock>
 8007c18:	e794      	b.n	8007b44 <_malloc_r+0x20>
 8007c1a:	6005      	str	r5, [r0, #0]
 8007c1c:	e7d6      	b.n	8007bcc <_malloc_r+0xa8>
 8007c1e:	bf00      	nop
 8007c20:	200005f8 	.word	0x200005f8

08007c24 <__malloc_lock>:
 8007c24:	4801      	ldr	r0, [pc, #4]	@ (8007c2c <__malloc_lock+0x8>)
 8007c26:	f000 bef8 	b.w	8008a1a <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	2000073c 	.word	0x2000073c

08007c30 <__malloc_unlock>:
 8007c30:	4801      	ldr	r0, [pc, #4]	@ (8007c38 <__malloc_unlock+0x8>)
 8007c32:	f000 bef3 	b.w	8008a1c <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	2000073c 	.word	0x2000073c

08007c3c <__cvt>:
 8007c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	ec57 6b10 	vmov	r6, r7, d0
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	460c      	mov	r4, r1
 8007c48:	4619      	mov	r1, r3
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	bfbb      	ittet	lt
 8007c4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c52:	461f      	movlt	r7, r3
 8007c54:	2300      	movge	r3, #0
 8007c56:	232d      	movlt	r3, #45	@ 0x2d
 8007c58:	700b      	strb	r3, [r1, #0]
 8007c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c60:	4691      	mov	r9, r2
 8007c62:	f023 0820 	bic.w	r8, r3, #32
 8007c66:	bfbc      	itt	lt
 8007c68:	4632      	movlt	r2, r6
 8007c6a:	4616      	movlt	r6, r2
 8007c6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c70:	d005      	beq.n	8007c7e <__cvt+0x42>
 8007c72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c76:	d100      	bne.n	8007c7a <__cvt+0x3e>
 8007c78:	3401      	adds	r4, #1
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	e000      	b.n	8007c80 <__cvt+0x44>
 8007c7e:	2103      	movs	r1, #3
 8007c80:	ab03      	add	r3, sp, #12
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	ab02      	add	r3, sp, #8
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	ec47 6b10 	vmov	d0, r6, r7
 8007c8c:	4653      	mov	r3, sl
 8007c8e:	4622      	mov	r2, r4
 8007c90:	f000 ff4e 	bl	8008b30 <_dtoa_r>
 8007c94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c98:	4605      	mov	r5, r0
 8007c9a:	d119      	bne.n	8007cd0 <__cvt+0x94>
 8007c9c:	f019 0f01 	tst.w	r9, #1
 8007ca0:	d00e      	beq.n	8007cc0 <__cvt+0x84>
 8007ca2:	eb00 0904 	add.w	r9, r0, r4
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4630      	mov	r0, r6
 8007cac:	4639      	mov	r1, r7
 8007cae:	f7f8 ff33 	bl	8000b18 <__aeabi_dcmpeq>
 8007cb2:	b108      	cbz	r0, 8007cb8 <__cvt+0x7c>
 8007cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cb8:	2230      	movs	r2, #48	@ 0x30
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	454b      	cmp	r3, r9
 8007cbe:	d31e      	bcc.n	8007cfe <__cvt+0xc2>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cc4:	1b5b      	subs	r3, r3, r5
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	b004      	add	sp, #16
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cd4:	eb00 0904 	add.w	r9, r0, r4
 8007cd8:	d1e5      	bne.n	8007ca6 <__cvt+0x6a>
 8007cda:	7803      	ldrb	r3, [r0, #0]
 8007cdc:	2b30      	cmp	r3, #48	@ 0x30
 8007cde:	d10a      	bne.n	8007cf6 <__cvt+0xba>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7f8 ff16 	bl	8000b18 <__aeabi_dcmpeq>
 8007cec:	b918      	cbnz	r0, 8007cf6 <__cvt+0xba>
 8007cee:	f1c4 0401 	rsb	r4, r4, #1
 8007cf2:	f8ca 4000 	str.w	r4, [sl]
 8007cf6:	f8da 3000 	ldr.w	r3, [sl]
 8007cfa:	4499      	add	r9, r3
 8007cfc:	e7d3      	b.n	8007ca6 <__cvt+0x6a>
 8007cfe:	1c59      	adds	r1, r3, #1
 8007d00:	9103      	str	r1, [sp, #12]
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e7d9      	b.n	8007cba <__cvt+0x7e>

08007d06 <__exponent>:
 8007d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	bfba      	itte	lt
 8007d0c:	4249      	neglt	r1, r1
 8007d0e:	232d      	movlt	r3, #45	@ 0x2d
 8007d10:	232b      	movge	r3, #43	@ 0x2b
 8007d12:	2909      	cmp	r1, #9
 8007d14:	7002      	strb	r2, [r0, #0]
 8007d16:	7043      	strb	r3, [r0, #1]
 8007d18:	dd29      	ble.n	8007d6e <__exponent+0x68>
 8007d1a:	f10d 0307 	add.w	r3, sp, #7
 8007d1e:	461d      	mov	r5, r3
 8007d20:	270a      	movs	r7, #10
 8007d22:	461a      	mov	r2, r3
 8007d24:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d28:	fb07 1416 	mls	r4, r7, r6, r1
 8007d2c:	3430      	adds	r4, #48	@ 0x30
 8007d2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d32:	460c      	mov	r4, r1
 8007d34:	2c63      	cmp	r4, #99	@ 0x63
 8007d36:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	dcf1      	bgt.n	8007d22 <__exponent+0x1c>
 8007d3e:	3130      	adds	r1, #48	@ 0x30
 8007d40:	1e94      	subs	r4, r2, #2
 8007d42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d46:	1c41      	adds	r1, r0, #1
 8007d48:	4623      	mov	r3, r4
 8007d4a:	42ab      	cmp	r3, r5
 8007d4c:	d30a      	bcc.n	8007d64 <__exponent+0x5e>
 8007d4e:	f10d 0309 	add.w	r3, sp, #9
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	42ac      	cmp	r4, r5
 8007d56:	bf88      	it	hi
 8007d58:	2300      	movhi	r3, #0
 8007d5a:	3302      	adds	r3, #2
 8007d5c:	4403      	add	r3, r0
 8007d5e:	1a18      	subs	r0, r3, r0
 8007d60:	b003      	add	sp, #12
 8007d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d6c:	e7ed      	b.n	8007d4a <__exponent+0x44>
 8007d6e:	2330      	movs	r3, #48	@ 0x30
 8007d70:	3130      	adds	r1, #48	@ 0x30
 8007d72:	7083      	strb	r3, [r0, #2]
 8007d74:	70c1      	strb	r1, [r0, #3]
 8007d76:	1d03      	adds	r3, r0, #4
 8007d78:	e7f1      	b.n	8007d5e <__exponent+0x58>
	...

08007d7c <_printf_float>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	b08d      	sub	sp, #52	@ 0x34
 8007d82:	460c      	mov	r4, r1
 8007d84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d88:	4616      	mov	r6, r2
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	f000 fdbf 	bl	8008910 <_localeconv_r>
 8007d92:	6803      	ldr	r3, [r0, #0]
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7f8 fa92 	bl	80002c0 <strlen>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da0:	f8d8 3000 	ldr.w	r3, [r8]
 8007da4:	9005      	str	r0, [sp, #20]
 8007da6:	3307      	adds	r3, #7
 8007da8:	f023 0307 	bic.w	r3, r3, #7
 8007dac:	f103 0208 	add.w	r2, r3, #8
 8007db0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007db4:	f8d4 b000 	ldr.w	fp, [r4]
 8007db8:	f8c8 2000 	str.w	r2, [r8]
 8007dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dc4:	9307      	str	r3, [sp, #28]
 8007dc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8008044 <_printf_float+0x2c8>)
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dd8:	f7f8 fed0 	bl	8000b7c <__aeabi_dcmpun>
 8007ddc:	bb70      	cbnz	r0, 8007e3c <_printf_float+0xc0>
 8007dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007de2:	4b98      	ldr	r3, [pc, #608]	@ (8008044 <_printf_float+0x2c8>)
 8007de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007de8:	f7f8 feaa 	bl	8000b40 <__aeabi_dcmple>
 8007dec:	bb30      	cbnz	r0, 8007e3c <_printf_float+0xc0>
 8007dee:	2200      	movs	r2, #0
 8007df0:	2300      	movs	r3, #0
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 fe99 	bl	8000b2c <__aeabi_dcmplt>
 8007dfa:	b110      	cbz	r0, 8007e02 <_printf_float+0x86>
 8007dfc:	232d      	movs	r3, #45	@ 0x2d
 8007dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e02:	4a91      	ldr	r2, [pc, #580]	@ (8008048 <_printf_float+0x2cc>)
 8007e04:	4b91      	ldr	r3, [pc, #580]	@ (800804c <_printf_float+0x2d0>)
 8007e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e0a:	bf94      	ite	ls
 8007e0c:	4690      	movls	r8, r2
 8007e0e:	4698      	movhi	r8, r3
 8007e10:	2303      	movs	r3, #3
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	f02b 0304 	bic.w	r3, fp, #4
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	f04f 0900 	mov.w	r9, #0
 8007e1e:	9700      	str	r7, [sp, #0]
 8007e20:	4633      	mov	r3, r6
 8007e22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f9d2 	bl	80081d0 <_printf_common>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f040 808d 	bne.w	8007f4c <_printf_float+0x1d0>
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e36:	b00d      	add	sp, #52	@ 0x34
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	4649      	mov	r1, r9
 8007e44:	f7f8 fe9a 	bl	8000b7c <__aeabi_dcmpun>
 8007e48:	b140      	cbz	r0, 8007e5c <_printf_float+0xe0>
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfbc      	itt	lt
 8007e50:	232d      	movlt	r3, #45	@ 0x2d
 8007e52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e56:	4a7e      	ldr	r2, [pc, #504]	@ (8008050 <_printf_float+0x2d4>)
 8007e58:	4b7e      	ldr	r3, [pc, #504]	@ (8008054 <_printf_float+0x2d8>)
 8007e5a:	e7d4      	b.n	8007e06 <_printf_float+0x8a>
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e62:	9206      	str	r2, [sp, #24]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	d13b      	bne.n	8007ee0 <_printf_float+0x164>
 8007e68:	2306      	movs	r3, #6
 8007e6a:	6063      	str	r3, [r4, #4]
 8007e6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e70:	2300      	movs	r3, #0
 8007e72:	6022      	str	r2, [r4, #0]
 8007e74:	9303      	str	r3, [sp, #12]
 8007e76:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e7c:	ab09      	add	r3, sp, #36	@ 0x24
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	ec49 8b10 	vmov	d0, r8, r9
 8007e86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7ff fed6 	bl	8007c3c <__cvt>
 8007e90:	9b06      	ldr	r3, [sp, #24]
 8007e92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e94:	2b47      	cmp	r3, #71	@ 0x47
 8007e96:	4680      	mov	r8, r0
 8007e98:	d129      	bne.n	8007eee <_printf_float+0x172>
 8007e9a:	1cc8      	adds	r0, r1, #3
 8007e9c:	db02      	blt.n	8007ea4 <_printf_float+0x128>
 8007e9e:	6863      	ldr	r3, [r4, #4]
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	dd41      	ble.n	8007f28 <_printf_float+0x1ac>
 8007ea4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ea8:	fa5f fa8a 	uxtb.w	sl, sl
 8007eac:	3901      	subs	r1, #1
 8007eae:	4652      	mov	r2, sl
 8007eb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007eb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007eb6:	f7ff ff26 	bl	8007d06 <__exponent>
 8007eba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ebc:	1813      	adds	r3, r2, r0
 8007ebe:	2a01      	cmp	r2, #1
 8007ec0:	4681      	mov	r9, r0
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	dc02      	bgt.n	8007ecc <_printf_float+0x150>
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	07d2      	lsls	r2, r2, #31
 8007eca:	d501      	bpl.n	8007ed0 <_printf_float+0x154>
 8007ecc:	3301      	adds	r3, #1
 8007ece:	6123      	str	r3, [r4, #16]
 8007ed0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0a2      	beq.n	8007e1e <_printf_float+0xa2>
 8007ed8:	232d      	movs	r3, #45	@ 0x2d
 8007eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ede:	e79e      	b.n	8007e1e <_printf_float+0xa2>
 8007ee0:	9a06      	ldr	r2, [sp, #24]
 8007ee2:	2a47      	cmp	r2, #71	@ 0x47
 8007ee4:	d1c2      	bne.n	8007e6c <_printf_float+0xf0>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1c0      	bne.n	8007e6c <_printf_float+0xf0>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e7bd      	b.n	8007e6a <_printf_float+0xee>
 8007eee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ef2:	d9db      	bls.n	8007eac <_printf_float+0x130>
 8007ef4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ef8:	d118      	bne.n	8007f2c <_printf_float+0x1b0>
 8007efa:	2900      	cmp	r1, #0
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	dd0b      	ble.n	8007f18 <_printf_float+0x19c>
 8007f00:	6121      	str	r1, [r4, #16]
 8007f02:	b913      	cbnz	r3, 8007f0a <_printf_float+0x18e>
 8007f04:	6822      	ldr	r2, [r4, #0]
 8007f06:	07d0      	lsls	r0, r2, #31
 8007f08:	d502      	bpl.n	8007f10 <_printf_float+0x194>
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	440b      	add	r3, r1
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	e7db      	b.n	8007ed0 <_printf_float+0x154>
 8007f18:	b913      	cbnz	r3, 8007f20 <_printf_float+0x1a4>
 8007f1a:	6822      	ldr	r2, [r4, #0]
 8007f1c:	07d2      	lsls	r2, r2, #31
 8007f1e:	d501      	bpl.n	8007f24 <_printf_float+0x1a8>
 8007f20:	3302      	adds	r3, #2
 8007f22:	e7f4      	b.n	8007f0e <_printf_float+0x192>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e7f2      	b.n	8007f0e <_printf_float+0x192>
 8007f28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f2e:	4299      	cmp	r1, r3
 8007f30:	db05      	blt.n	8007f3e <_printf_float+0x1c2>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	6121      	str	r1, [r4, #16]
 8007f36:	07d8      	lsls	r0, r3, #31
 8007f38:	d5ea      	bpl.n	8007f10 <_printf_float+0x194>
 8007f3a:	1c4b      	adds	r3, r1, #1
 8007f3c:	e7e7      	b.n	8007f0e <_printf_float+0x192>
 8007f3e:	2900      	cmp	r1, #0
 8007f40:	bfd4      	ite	le
 8007f42:	f1c1 0202 	rsble	r2, r1, #2
 8007f46:	2201      	movgt	r2, #1
 8007f48:	4413      	add	r3, r2
 8007f4a:	e7e0      	b.n	8007f0e <_printf_float+0x192>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	055a      	lsls	r2, r3, #21
 8007f50:	d407      	bmi.n	8007f62 <_printf_float+0x1e6>
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	4642      	mov	r2, r8
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d12b      	bne.n	8007fb8 <_printf_float+0x23c>
 8007f60:	e767      	b.n	8007e32 <_printf_float+0xb6>
 8007f62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f66:	f240 80dd 	bls.w	8008124 <_printf_float+0x3a8>
 8007f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	f7f8 fdd1 	bl	8000b18 <__aeabi_dcmpeq>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d033      	beq.n	8007fe2 <_printf_float+0x266>
 8007f7a:	4a37      	ldr	r2, [pc, #220]	@ (8008058 <_printf_float+0x2dc>)
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	f43f af54 	beq.w	8007e32 <_printf_float+0xb6>
 8007f8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f8e:	4543      	cmp	r3, r8
 8007f90:	db02      	blt.n	8007f98 <_printf_float+0x21c>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	07d8      	lsls	r0, r3, #31
 8007f96:	d50f      	bpl.n	8007fb8 <_printf_float+0x23c>
 8007f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af45 	beq.w	8007e32 <_printf_float+0xb6>
 8007fa8:	f04f 0900 	mov.w	r9, #0
 8007fac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007fb0:	f104 0a1a 	add.w	sl, r4, #26
 8007fb4:	45c8      	cmp	r8, r9
 8007fb6:	dc09      	bgt.n	8007fcc <_printf_float+0x250>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	079b      	lsls	r3, r3, #30
 8007fbc:	f100 8103 	bmi.w	80081c6 <_printf_float+0x44a>
 8007fc0:	68e0      	ldr	r0, [r4, #12]
 8007fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc4:	4298      	cmp	r0, r3
 8007fc6:	bfb8      	it	lt
 8007fc8:	4618      	movlt	r0, r3
 8007fca:	e734      	b.n	8007e36 <_printf_float+0xba>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4652      	mov	r2, sl
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af2b 	beq.w	8007e32 <_printf_float+0xb6>
 8007fdc:	f109 0901 	add.w	r9, r9, #1
 8007fe0:	e7e8      	b.n	8007fb4 <_printf_float+0x238>
 8007fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dc39      	bgt.n	800805c <_printf_float+0x2e0>
 8007fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8008058 <_printf_float+0x2dc>)
 8007fea:	2301      	movs	r3, #1
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f af1d 	beq.w	8007e32 <_printf_float+0xb6>
 8007ff8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ffc:	ea59 0303 	orrs.w	r3, r9, r3
 8008000:	d102      	bne.n	8008008 <_printf_float+0x28c>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	07d9      	lsls	r1, r3, #31
 8008006:	d5d7      	bpl.n	8007fb8 <_printf_float+0x23c>
 8008008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f af0d 	beq.w	8007e32 <_printf_float+0xb6>
 8008018:	f04f 0a00 	mov.w	sl, #0
 800801c:	f104 0b1a 	add.w	fp, r4, #26
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	425b      	negs	r3, r3
 8008024:	4553      	cmp	r3, sl
 8008026:	dc01      	bgt.n	800802c <_printf_float+0x2b0>
 8008028:	464b      	mov	r3, r9
 800802a:	e793      	b.n	8007f54 <_printf_float+0x1d8>
 800802c:	2301      	movs	r3, #1
 800802e:	465a      	mov	r2, fp
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	f43f aefb 	beq.w	8007e32 <_printf_float+0xb6>
 800803c:	f10a 0a01 	add.w	sl, sl, #1
 8008040:	e7ee      	b.n	8008020 <_printf_float+0x2a4>
 8008042:	bf00      	nop
 8008044:	7fefffff 	.word	0x7fefffff
 8008048:	0800a870 	.word	0x0800a870
 800804c:	0800a874 	.word	0x0800a874
 8008050:	0800a878 	.word	0x0800a878
 8008054:	0800a87c 	.word	0x0800a87c
 8008058:	0800a880 	.word	0x0800a880
 800805c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800805e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008062:	4553      	cmp	r3, sl
 8008064:	bfa8      	it	ge
 8008066:	4653      	movge	r3, sl
 8008068:	2b00      	cmp	r3, #0
 800806a:	4699      	mov	r9, r3
 800806c:	dc36      	bgt.n	80080dc <_printf_float+0x360>
 800806e:	f04f 0b00 	mov.w	fp, #0
 8008072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008076:	f104 021a 	add.w	r2, r4, #26
 800807a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800807c:	9306      	str	r3, [sp, #24]
 800807e:	eba3 0309 	sub.w	r3, r3, r9
 8008082:	455b      	cmp	r3, fp
 8008084:	dc31      	bgt.n	80080ea <_printf_float+0x36e>
 8008086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008088:	459a      	cmp	sl, r3
 800808a:	dc3a      	bgt.n	8008102 <_printf_float+0x386>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	07da      	lsls	r2, r3, #31
 8008090:	d437      	bmi.n	8008102 <_printf_float+0x386>
 8008092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008094:	ebaa 0903 	sub.w	r9, sl, r3
 8008098:	9b06      	ldr	r3, [sp, #24]
 800809a:	ebaa 0303 	sub.w	r3, sl, r3
 800809e:	4599      	cmp	r9, r3
 80080a0:	bfa8      	it	ge
 80080a2:	4699      	movge	r9, r3
 80080a4:	f1b9 0f00 	cmp.w	r9, #0
 80080a8:	dc33      	bgt.n	8008112 <_printf_float+0x396>
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b2:	f104 0b1a 	add.w	fp, r4, #26
 80080b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b8:	ebaa 0303 	sub.w	r3, sl, r3
 80080bc:	eba3 0309 	sub.w	r3, r3, r9
 80080c0:	4543      	cmp	r3, r8
 80080c2:	f77f af79 	ble.w	8007fb8 <_printf_float+0x23c>
 80080c6:	2301      	movs	r3, #1
 80080c8:	465a      	mov	r2, fp
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f aeae 	beq.w	8007e32 <_printf_float+0xb6>
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	e7ec      	b.n	80080b6 <_printf_float+0x33a>
 80080dc:	4642      	mov	r2, r8
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1c2      	bne.n	800806e <_printf_float+0x2f2>
 80080e8:	e6a3      	b.n	8007e32 <_printf_float+0xb6>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	9206      	str	r2, [sp, #24]
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae9c 	beq.w	8007e32 <_printf_float+0xb6>
 80080fa:	9a06      	ldr	r2, [sp, #24]
 80080fc:	f10b 0b01 	add.w	fp, fp, #1
 8008100:	e7bb      	b.n	800807a <_printf_float+0x2fe>
 8008102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008106:	4631      	mov	r1, r6
 8008108:	4628      	mov	r0, r5
 800810a:	47b8      	blx	r7
 800810c:	3001      	adds	r0, #1
 800810e:	d1c0      	bne.n	8008092 <_printf_float+0x316>
 8008110:	e68f      	b.n	8007e32 <_printf_float+0xb6>
 8008112:	9a06      	ldr	r2, [sp, #24]
 8008114:	464b      	mov	r3, r9
 8008116:	4442      	add	r2, r8
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	47b8      	blx	r7
 800811e:	3001      	adds	r0, #1
 8008120:	d1c3      	bne.n	80080aa <_printf_float+0x32e>
 8008122:	e686      	b.n	8007e32 <_printf_float+0xb6>
 8008124:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008128:	f1ba 0f01 	cmp.w	sl, #1
 800812c:	dc01      	bgt.n	8008132 <_printf_float+0x3b6>
 800812e:	07db      	lsls	r3, r3, #31
 8008130:	d536      	bpl.n	80081a0 <_printf_float+0x424>
 8008132:	2301      	movs	r3, #1
 8008134:	4642      	mov	r2, r8
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f ae78 	beq.w	8007e32 <_printf_float+0xb6>
 8008142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	f43f ae70 	beq.w	8007e32 <_printf_float+0xb6>
 8008152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008156:	2200      	movs	r2, #0
 8008158:	2300      	movs	r3, #0
 800815a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800815e:	f7f8 fcdb 	bl	8000b18 <__aeabi_dcmpeq>
 8008162:	b9c0      	cbnz	r0, 8008196 <_printf_float+0x41a>
 8008164:	4653      	mov	r3, sl
 8008166:	f108 0201 	add.w	r2, r8, #1
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	d10c      	bne.n	800818e <_printf_float+0x412>
 8008174:	e65d      	b.n	8007e32 <_printf_float+0xb6>
 8008176:	2301      	movs	r3, #1
 8008178:	465a      	mov	r2, fp
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f ae56 	beq.w	8007e32 <_printf_float+0xb6>
 8008186:	f108 0801 	add.w	r8, r8, #1
 800818a:	45d0      	cmp	r8, sl
 800818c:	dbf3      	blt.n	8008176 <_printf_float+0x3fa>
 800818e:	464b      	mov	r3, r9
 8008190:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008194:	e6df      	b.n	8007f56 <_printf_float+0x1da>
 8008196:	f04f 0800 	mov.w	r8, #0
 800819a:	f104 0b1a 	add.w	fp, r4, #26
 800819e:	e7f4      	b.n	800818a <_printf_float+0x40e>
 80081a0:	2301      	movs	r3, #1
 80081a2:	4642      	mov	r2, r8
 80081a4:	e7e1      	b.n	800816a <_printf_float+0x3ee>
 80081a6:	2301      	movs	r3, #1
 80081a8:	464a      	mov	r2, r9
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	f43f ae3e 	beq.w	8007e32 <_printf_float+0xb6>
 80081b6:	f108 0801 	add.w	r8, r8, #1
 80081ba:	68e3      	ldr	r3, [r4, #12]
 80081bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081be:	1a5b      	subs	r3, r3, r1
 80081c0:	4543      	cmp	r3, r8
 80081c2:	dcf0      	bgt.n	80081a6 <_printf_float+0x42a>
 80081c4:	e6fc      	b.n	8007fc0 <_printf_float+0x244>
 80081c6:	f04f 0800 	mov.w	r8, #0
 80081ca:	f104 0919 	add.w	r9, r4, #25
 80081ce:	e7f4      	b.n	80081ba <_printf_float+0x43e>

080081d0 <_printf_common>:
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	4616      	mov	r6, r2
 80081d6:	4698      	mov	r8, r3
 80081d8:	688a      	ldr	r2, [r1, #8]
 80081da:	690b      	ldr	r3, [r1, #16]
 80081dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081e0:	4293      	cmp	r3, r2
 80081e2:	bfb8      	it	lt
 80081e4:	4613      	movlt	r3, r2
 80081e6:	6033      	str	r3, [r6, #0]
 80081e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081ec:	4607      	mov	r7, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	b10a      	cbz	r2, 80081f6 <_printf_common+0x26>
 80081f2:	3301      	adds	r3, #1
 80081f4:	6033      	str	r3, [r6, #0]
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	0699      	lsls	r1, r3, #26
 80081fa:	bf42      	ittt	mi
 80081fc:	6833      	ldrmi	r3, [r6, #0]
 80081fe:	3302      	addmi	r3, #2
 8008200:	6033      	strmi	r3, [r6, #0]
 8008202:	6825      	ldr	r5, [r4, #0]
 8008204:	f015 0506 	ands.w	r5, r5, #6
 8008208:	d106      	bne.n	8008218 <_printf_common+0x48>
 800820a:	f104 0a19 	add.w	sl, r4, #25
 800820e:	68e3      	ldr	r3, [r4, #12]
 8008210:	6832      	ldr	r2, [r6, #0]
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	42ab      	cmp	r3, r5
 8008216:	dc26      	bgt.n	8008266 <_printf_common+0x96>
 8008218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800821c:	6822      	ldr	r2, [r4, #0]
 800821e:	3b00      	subs	r3, #0
 8008220:	bf18      	it	ne
 8008222:	2301      	movne	r3, #1
 8008224:	0692      	lsls	r2, r2, #26
 8008226:	d42b      	bmi.n	8008280 <_printf_common+0xb0>
 8008228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800822c:	4641      	mov	r1, r8
 800822e:	4638      	mov	r0, r7
 8008230:	47c8      	blx	r9
 8008232:	3001      	adds	r0, #1
 8008234:	d01e      	beq.n	8008274 <_printf_common+0xa4>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	f003 0306 	and.w	r3, r3, #6
 800823e:	2b04      	cmp	r3, #4
 8008240:	bf02      	ittt	eq
 8008242:	68e5      	ldreq	r5, [r4, #12]
 8008244:	6833      	ldreq	r3, [r6, #0]
 8008246:	1aed      	subeq	r5, r5, r3
 8008248:	68a3      	ldr	r3, [r4, #8]
 800824a:	bf0c      	ite	eq
 800824c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008250:	2500      	movne	r5, #0
 8008252:	4293      	cmp	r3, r2
 8008254:	bfc4      	itt	gt
 8008256:	1a9b      	subgt	r3, r3, r2
 8008258:	18ed      	addgt	r5, r5, r3
 800825a:	2600      	movs	r6, #0
 800825c:	341a      	adds	r4, #26
 800825e:	42b5      	cmp	r5, r6
 8008260:	d11a      	bne.n	8008298 <_printf_common+0xc8>
 8008262:	2000      	movs	r0, #0
 8008264:	e008      	b.n	8008278 <_printf_common+0xa8>
 8008266:	2301      	movs	r3, #1
 8008268:	4652      	mov	r2, sl
 800826a:	4641      	mov	r1, r8
 800826c:	4638      	mov	r0, r7
 800826e:	47c8      	blx	r9
 8008270:	3001      	adds	r0, #1
 8008272:	d103      	bne.n	800827c <_printf_common+0xac>
 8008274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827c:	3501      	adds	r5, #1
 800827e:	e7c6      	b.n	800820e <_printf_common+0x3e>
 8008280:	18e1      	adds	r1, r4, r3
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	2030      	movs	r0, #48	@ 0x30
 8008286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800828a:	4422      	add	r2, r4
 800828c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008294:	3302      	adds	r3, #2
 8008296:	e7c7      	b.n	8008228 <_printf_common+0x58>
 8008298:	2301      	movs	r3, #1
 800829a:	4622      	mov	r2, r4
 800829c:	4641      	mov	r1, r8
 800829e:	4638      	mov	r0, r7
 80082a0:	47c8      	blx	r9
 80082a2:	3001      	adds	r0, #1
 80082a4:	d0e6      	beq.n	8008274 <_printf_common+0xa4>
 80082a6:	3601      	adds	r6, #1
 80082a8:	e7d9      	b.n	800825e <_printf_common+0x8e>
	...

080082ac <_printf_i>:
 80082ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b0:	7e0f      	ldrb	r7, [r1, #24]
 80082b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b4:	2f78      	cmp	r7, #120	@ 0x78
 80082b6:	4691      	mov	r9, r2
 80082b8:	4680      	mov	r8, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	469a      	mov	sl, r3
 80082be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082c2:	d807      	bhi.n	80082d4 <_printf_i+0x28>
 80082c4:	2f62      	cmp	r7, #98	@ 0x62
 80082c6:	d80a      	bhi.n	80082de <_printf_i+0x32>
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	f000 80d2 	beq.w	8008472 <_printf_i+0x1c6>
 80082ce:	2f58      	cmp	r7, #88	@ 0x58
 80082d0:	f000 80b9 	beq.w	8008446 <_printf_i+0x19a>
 80082d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082dc:	e03a      	b.n	8008354 <_printf_i+0xa8>
 80082de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082e2:	2b15      	cmp	r3, #21
 80082e4:	d8f6      	bhi.n	80082d4 <_printf_i+0x28>
 80082e6:	a101      	add	r1, pc, #4	@ (adr r1, 80082ec <_printf_i+0x40>)
 80082e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082ec:	08008345 	.word	0x08008345
 80082f0:	08008359 	.word	0x08008359
 80082f4:	080082d5 	.word	0x080082d5
 80082f8:	080082d5 	.word	0x080082d5
 80082fc:	080082d5 	.word	0x080082d5
 8008300:	080082d5 	.word	0x080082d5
 8008304:	08008359 	.word	0x08008359
 8008308:	080082d5 	.word	0x080082d5
 800830c:	080082d5 	.word	0x080082d5
 8008310:	080082d5 	.word	0x080082d5
 8008314:	080082d5 	.word	0x080082d5
 8008318:	08008459 	.word	0x08008459
 800831c:	08008383 	.word	0x08008383
 8008320:	08008413 	.word	0x08008413
 8008324:	080082d5 	.word	0x080082d5
 8008328:	080082d5 	.word	0x080082d5
 800832c:	0800847b 	.word	0x0800847b
 8008330:	080082d5 	.word	0x080082d5
 8008334:	08008383 	.word	0x08008383
 8008338:	080082d5 	.word	0x080082d5
 800833c:	080082d5 	.word	0x080082d5
 8008340:	0800841b 	.word	0x0800841b
 8008344:	6833      	ldr	r3, [r6, #0]
 8008346:	1d1a      	adds	r2, r3, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6032      	str	r2, [r6, #0]
 800834c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008354:	2301      	movs	r3, #1
 8008356:	e09d      	b.n	8008494 <_printf_i+0x1e8>
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	6031      	str	r1, [r6, #0]
 8008360:	0606      	lsls	r6, r0, #24
 8008362:	d501      	bpl.n	8008368 <_printf_i+0xbc>
 8008364:	681d      	ldr	r5, [r3, #0]
 8008366:	e003      	b.n	8008370 <_printf_i+0xc4>
 8008368:	0645      	lsls	r5, r0, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0xb8>
 800836c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008370:	2d00      	cmp	r5, #0
 8008372:	da03      	bge.n	800837c <_printf_i+0xd0>
 8008374:	232d      	movs	r3, #45	@ 0x2d
 8008376:	426d      	negs	r5, r5
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800837c:	4859      	ldr	r0, [pc, #356]	@ (80084e4 <_printf_i+0x238>)
 800837e:	230a      	movs	r3, #10
 8008380:	e011      	b.n	80083a6 <_printf_i+0xfa>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	0608      	lsls	r0, r1, #24
 8008388:	f853 5b04 	ldr.w	r5, [r3], #4
 800838c:	d402      	bmi.n	8008394 <_printf_i+0xe8>
 800838e:	0649      	lsls	r1, r1, #25
 8008390:	bf48      	it	mi
 8008392:	b2ad      	uxthmi	r5, r5
 8008394:	2f6f      	cmp	r7, #111	@ 0x6f
 8008396:	4853      	ldr	r0, [pc, #332]	@ (80084e4 <_printf_i+0x238>)
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	bf14      	ite	ne
 800839c:	230a      	movne	r3, #10
 800839e:	2308      	moveq	r3, #8
 80083a0:	2100      	movs	r1, #0
 80083a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083a6:	6866      	ldr	r6, [r4, #4]
 80083a8:	60a6      	str	r6, [r4, #8]
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	bfa2      	ittt	ge
 80083ae:	6821      	ldrge	r1, [r4, #0]
 80083b0:	f021 0104 	bicge.w	r1, r1, #4
 80083b4:	6021      	strge	r1, [r4, #0]
 80083b6:	b90d      	cbnz	r5, 80083bc <_printf_i+0x110>
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	d04b      	beq.n	8008454 <_printf_i+0x1a8>
 80083bc:	4616      	mov	r6, r2
 80083be:	fbb5 f1f3 	udiv	r1, r5, r3
 80083c2:	fb03 5711 	mls	r7, r3, r1, r5
 80083c6:	5dc7      	ldrb	r7, [r0, r7]
 80083c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083cc:	462f      	mov	r7, r5
 80083ce:	42bb      	cmp	r3, r7
 80083d0:	460d      	mov	r5, r1
 80083d2:	d9f4      	bls.n	80083be <_printf_i+0x112>
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d10b      	bne.n	80083f0 <_printf_i+0x144>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	07df      	lsls	r7, r3, #31
 80083dc:	d508      	bpl.n	80083f0 <_printf_i+0x144>
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	6861      	ldr	r1, [r4, #4]
 80083e2:	4299      	cmp	r1, r3
 80083e4:	bfde      	ittt	le
 80083e6:	2330      	movle	r3, #48	@ 0x30
 80083e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083f0:	1b92      	subs	r2, r2, r6
 80083f2:	6122      	str	r2, [r4, #16]
 80083f4:	f8cd a000 	str.w	sl, [sp]
 80083f8:	464b      	mov	r3, r9
 80083fa:	aa03      	add	r2, sp, #12
 80083fc:	4621      	mov	r1, r4
 80083fe:	4640      	mov	r0, r8
 8008400:	f7ff fee6 	bl	80081d0 <_printf_common>
 8008404:	3001      	adds	r0, #1
 8008406:	d14a      	bne.n	800849e <_printf_i+0x1f2>
 8008408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800840c:	b004      	add	sp, #16
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f043 0320 	orr.w	r3, r3, #32
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	4833      	ldr	r0, [pc, #204]	@ (80084e8 <_printf_i+0x23c>)
 800841c:	2778      	movs	r7, #120	@ 0x78
 800841e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	6831      	ldr	r1, [r6, #0]
 8008426:	061f      	lsls	r7, r3, #24
 8008428:	f851 5b04 	ldr.w	r5, [r1], #4
 800842c:	d402      	bmi.n	8008434 <_printf_i+0x188>
 800842e:	065f      	lsls	r7, r3, #25
 8008430:	bf48      	it	mi
 8008432:	b2ad      	uxthmi	r5, r5
 8008434:	6031      	str	r1, [r6, #0]
 8008436:	07d9      	lsls	r1, r3, #31
 8008438:	bf44      	itt	mi
 800843a:	f043 0320 	orrmi.w	r3, r3, #32
 800843e:	6023      	strmi	r3, [r4, #0]
 8008440:	b11d      	cbz	r5, 800844a <_printf_i+0x19e>
 8008442:	2310      	movs	r3, #16
 8008444:	e7ac      	b.n	80083a0 <_printf_i+0xf4>
 8008446:	4827      	ldr	r0, [pc, #156]	@ (80084e4 <_printf_i+0x238>)
 8008448:	e7e9      	b.n	800841e <_printf_i+0x172>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f023 0320 	bic.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	e7f6      	b.n	8008442 <_printf_i+0x196>
 8008454:	4616      	mov	r6, r2
 8008456:	e7bd      	b.n	80083d4 <_printf_i+0x128>
 8008458:	6833      	ldr	r3, [r6, #0]
 800845a:	6825      	ldr	r5, [r4, #0]
 800845c:	6961      	ldr	r1, [r4, #20]
 800845e:	1d18      	adds	r0, r3, #4
 8008460:	6030      	str	r0, [r6, #0]
 8008462:	062e      	lsls	r6, r5, #24
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	d501      	bpl.n	800846c <_printf_i+0x1c0>
 8008468:	6019      	str	r1, [r3, #0]
 800846a:	e002      	b.n	8008472 <_printf_i+0x1c6>
 800846c:	0668      	lsls	r0, r5, #25
 800846e:	d5fb      	bpl.n	8008468 <_printf_i+0x1bc>
 8008470:	8019      	strh	r1, [r3, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	6123      	str	r3, [r4, #16]
 8008476:	4616      	mov	r6, r2
 8008478:	e7bc      	b.n	80083f4 <_printf_i+0x148>
 800847a:	6833      	ldr	r3, [r6, #0]
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	6032      	str	r2, [r6, #0]
 8008480:	681e      	ldr	r6, [r3, #0]
 8008482:	6862      	ldr	r2, [r4, #4]
 8008484:	2100      	movs	r1, #0
 8008486:	4630      	mov	r0, r6
 8008488:	f7f7 feca 	bl	8000220 <memchr>
 800848c:	b108      	cbz	r0, 8008492 <_printf_i+0x1e6>
 800848e:	1b80      	subs	r0, r0, r6
 8008490:	6060      	str	r0, [r4, #4]
 8008492:	6863      	ldr	r3, [r4, #4]
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	2300      	movs	r3, #0
 8008498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800849c:	e7aa      	b.n	80083f4 <_printf_i+0x148>
 800849e:	6923      	ldr	r3, [r4, #16]
 80084a0:	4632      	mov	r2, r6
 80084a2:	4649      	mov	r1, r9
 80084a4:	4640      	mov	r0, r8
 80084a6:	47d0      	blx	sl
 80084a8:	3001      	adds	r0, #1
 80084aa:	d0ad      	beq.n	8008408 <_printf_i+0x15c>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	079b      	lsls	r3, r3, #30
 80084b0:	d413      	bmi.n	80084da <_printf_i+0x22e>
 80084b2:	68e0      	ldr	r0, [r4, #12]
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	4298      	cmp	r0, r3
 80084b8:	bfb8      	it	lt
 80084ba:	4618      	movlt	r0, r3
 80084bc:	e7a6      	b.n	800840c <_printf_i+0x160>
 80084be:	2301      	movs	r3, #1
 80084c0:	4632      	mov	r2, r6
 80084c2:	4649      	mov	r1, r9
 80084c4:	4640      	mov	r0, r8
 80084c6:	47d0      	blx	sl
 80084c8:	3001      	adds	r0, #1
 80084ca:	d09d      	beq.n	8008408 <_printf_i+0x15c>
 80084cc:	3501      	adds	r5, #1
 80084ce:	68e3      	ldr	r3, [r4, #12]
 80084d0:	9903      	ldr	r1, [sp, #12]
 80084d2:	1a5b      	subs	r3, r3, r1
 80084d4:	42ab      	cmp	r3, r5
 80084d6:	dcf2      	bgt.n	80084be <_printf_i+0x212>
 80084d8:	e7eb      	b.n	80084b2 <_printf_i+0x206>
 80084da:	2500      	movs	r5, #0
 80084dc:	f104 0619 	add.w	r6, r4, #25
 80084e0:	e7f5      	b.n	80084ce <_printf_i+0x222>
 80084e2:	bf00      	nop
 80084e4:	0800a882 	.word	0x0800a882
 80084e8:	0800a893 	.word	0x0800a893

080084ec <std>:
 80084ec:	2300      	movs	r3, #0
 80084ee:	b510      	push	{r4, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	e9c0 3300 	strd	r3, r3, [r0]
 80084f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084fa:	6083      	str	r3, [r0, #8]
 80084fc:	8181      	strh	r1, [r0, #12]
 80084fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008500:	81c2      	strh	r2, [r0, #14]
 8008502:	6183      	str	r3, [r0, #24]
 8008504:	4619      	mov	r1, r3
 8008506:	2208      	movs	r2, #8
 8008508:	305c      	adds	r0, #92	@ 0x5c
 800850a:	f000 f9f9 	bl	8008900 <memset>
 800850e:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <std+0x58>)
 8008510:	6263      	str	r3, [r4, #36]	@ 0x24
 8008512:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <std+0x5c>)
 8008514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <std+0x60>)
 8008518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x64>)
 800851c:	6323      	str	r3, [r4, #48]	@ 0x30
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x68>)
 8008520:	6224      	str	r4, [r4, #32]
 8008522:	429c      	cmp	r4, r3
 8008524:	d006      	beq.n	8008534 <std+0x48>
 8008526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800852a:	4294      	cmp	r4, r2
 800852c:	d002      	beq.n	8008534 <std+0x48>
 800852e:	33d0      	adds	r3, #208	@ 0xd0
 8008530:	429c      	cmp	r4, r3
 8008532:	d105      	bne.n	8008540 <std+0x54>
 8008534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f000 ba6c 	b.w	8008a18 <__retarget_lock_init_recursive>
 8008540:	bd10      	pop	{r4, pc}
 8008542:	bf00      	nop
 8008544:	08008751 	.word	0x08008751
 8008548:	08008773 	.word	0x08008773
 800854c:	080087ab 	.word	0x080087ab
 8008550:	080087cf 	.word	0x080087cf
 8008554:	200005fc 	.word	0x200005fc

08008558 <stdio_exit_handler>:
 8008558:	4a02      	ldr	r2, [pc, #8]	@ (8008564 <stdio_exit_handler+0xc>)
 800855a:	4903      	ldr	r1, [pc, #12]	@ (8008568 <stdio_exit_handler+0x10>)
 800855c:	4803      	ldr	r0, [pc, #12]	@ (800856c <stdio_exit_handler+0x14>)
 800855e:	f000 b869 	b.w	8008634 <_fwalk_sglue>
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c
 8008568:	0800a1dd 	.word	0x0800a1dd
 800856c:	2000001c 	.word	0x2000001c

08008570 <cleanup_stdio>:
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	4b0c      	ldr	r3, [pc, #48]	@ (80085a4 <cleanup_stdio+0x34>)
 8008574:	4299      	cmp	r1, r3
 8008576:	b510      	push	{r4, lr}
 8008578:	4604      	mov	r4, r0
 800857a:	d001      	beq.n	8008580 <cleanup_stdio+0x10>
 800857c:	f001 fe2e 	bl	800a1dc <_fflush_r>
 8008580:	68a1      	ldr	r1, [r4, #8]
 8008582:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <cleanup_stdio+0x38>)
 8008584:	4299      	cmp	r1, r3
 8008586:	d002      	beq.n	800858e <cleanup_stdio+0x1e>
 8008588:	4620      	mov	r0, r4
 800858a:	f001 fe27 	bl	800a1dc <_fflush_r>
 800858e:	68e1      	ldr	r1, [r4, #12]
 8008590:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <cleanup_stdio+0x3c>)
 8008592:	4299      	cmp	r1, r3
 8008594:	d004      	beq.n	80085a0 <cleanup_stdio+0x30>
 8008596:	4620      	mov	r0, r4
 8008598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859c:	f001 be1e 	b.w	800a1dc <_fflush_r>
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	bf00      	nop
 80085a4:	200005fc 	.word	0x200005fc
 80085a8:	20000664 	.word	0x20000664
 80085ac:	200006cc 	.word	0x200006cc

080085b0 <global_stdio_init.part.0>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	4b0b      	ldr	r3, [pc, #44]	@ (80085e0 <global_stdio_init.part.0+0x30>)
 80085b4:	4c0b      	ldr	r4, [pc, #44]	@ (80085e4 <global_stdio_init.part.0+0x34>)
 80085b6:	4a0c      	ldr	r2, [pc, #48]	@ (80085e8 <global_stdio_init.part.0+0x38>)
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	4620      	mov	r0, r4
 80085bc:	2200      	movs	r2, #0
 80085be:	2104      	movs	r1, #4
 80085c0:	f7ff ff94 	bl	80084ec <std>
 80085c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085c8:	2201      	movs	r2, #1
 80085ca:	2109      	movs	r1, #9
 80085cc:	f7ff ff8e 	bl	80084ec <std>
 80085d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085d4:	2202      	movs	r2, #2
 80085d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085da:	2112      	movs	r1, #18
 80085dc:	f7ff bf86 	b.w	80084ec <std>
 80085e0:	20000734 	.word	0x20000734
 80085e4:	200005fc 	.word	0x200005fc
 80085e8:	08008559 	.word	0x08008559

080085ec <__sfp_lock_acquire>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__sfp_lock_acquire+0x8>)
 80085ee:	f000 ba14 	b.w	8008a1a <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	2000073d 	.word	0x2000073d

080085f8 <__sfp_lock_release>:
 80085f8:	4801      	ldr	r0, [pc, #4]	@ (8008600 <__sfp_lock_release+0x8>)
 80085fa:	f000 ba0f 	b.w	8008a1c <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	2000073d 	.word	0x2000073d

08008604 <__sinit>:
 8008604:	b510      	push	{r4, lr}
 8008606:	4604      	mov	r4, r0
 8008608:	f7ff fff0 	bl	80085ec <__sfp_lock_acquire>
 800860c:	6a23      	ldr	r3, [r4, #32]
 800860e:	b11b      	cbz	r3, 8008618 <__sinit+0x14>
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f7ff bff0 	b.w	80085f8 <__sfp_lock_release>
 8008618:	4b04      	ldr	r3, [pc, #16]	@ (800862c <__sinit+0x28>)
 800861a:	6223      	str	r3, [r4, #32]
 800861c:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__sinit+0x2c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f5      	bne.n	8008610 <__sinit+0xc>
 8008624:	f7ff ffc4 	bl	80085b0 <global_stdio_init.part.0>
 8008628:	e7f2      	b.n	8008610 <__sinit+0xc>
 800862a:	bf00      	nop
 800862c:	08008571 	.word	0x08008571
 8008630:	20000734 	.word	0x20000734

08008634 <_fwalk_sglue>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	4607      	mov	r7, r0
 800863a:	4688      	mov	r8, r1
 800863c:	4614      	mov	r4, r2
 800863e:	2600      	movs	r6, #0
 8008640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008644:	f1b9 0901 	subs.w	r9, r9, #1
 8008648:	d505      	bpl.n	8008656 <_fwalk_sglue+0x22>
 800864a:	6824      	ldr	r4, [r4, #0]
 800864c:	2c00      	cmp	r4, #0
 800864e:	d1f7      	bne.n	8008640 <_fwalk_sglue+0xc>
 8008650:	4630      	mov	r0, r6
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d907      	bls.n	800866c <_fwalk_sglue+0x38>
 800865c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008660:	3301      	adds	r3, #1
 8008662:	d003      	beq.n	800866c <_fwalk_sglue+0x38>
 8008664:	4629      	mov	r1, r5
 8008666:	4638      	mov	r0, r7
 8008668:	47c0      	blx	r8
 800866a:	4306      	orrs	r6, r0
 800866c:	3568      	adds	r5, #104	@ 0x68
 800866e:	e7e9      	b.n	8008644 <_fwalk_sglue+0x10>

08008670 <iprintf>:
 8008670:	b40f      	push	{r0, r1, r2, r3}
 8008672:	b507      	push	{r0, r1, r2, lr}
 8008674:	4906      	ldr	r1, [pc, #24]	@ (8008690 <iprintf+0x20>)
 8008676:	ab04      	add	r3, sp, #16
 8008678:	6808      	ldr	r0, [r1, #0]
 800867a:	f853 2b04 	ldr.w	r2, [r3], #4
 800867e:	6881      	ldr	r1, [r0, #8]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f001 fc0f 	bl	8009ea4 <_vfiprintf_r>
 8008686:	b003      	add	sp, #12
 8008688:	f85d eb04 	ldr.w	lr, [sp], #4
 800868c:	b004      	add	sp, #16
 800868e:	4770      	bx	lr
 8008690:	20000018 	.word	0x20000018

08008694 <_puts_r>:
 8008694:	6a03      	ldr	r3, [r0, #32]
 8008696:	b570      	push	{r4, r5, r6, lr}
 8008698:	6884      	ldr	r4, [r0, #8]
 800869a:	4605      	mov	r5, r0
 800869c:	460e      	mov	r6, r1
 800869e:	b90b      	cbnz	r3, 80086a4 <_puts_r+0x10>
 80086a0:	f7ff ffb0 	bl	8008604 <__sinit>
 80086a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086a6:	07db      	lsls	r3, r3, #31
 80086a8:	d405      	bmi.n	80086b6 <_puts_r+0x22>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	0598      	lsls	r0, r3, #22
 80086ae:	d402      	bmi.n	80086b6 <_puts_r+0x22>
 80086b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b2:	f000 f9b2 	bl	8008a1a <__retarget_lock_acquire_recursive>
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	0719      	lsls	r1, r3, #28
 80086ba:	d502      	bpl.n	80086c2 <_puts_r+0x2e>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d135      	bne.n	800872e <_puts_r+0x9a>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 f8c5 	bl	8008854 <__swsetup_r>
 80086ca:	b380      	cbz	r0, 800872e <_puts_r+0x9a>
 80086cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80086d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_puts_r+0x4e>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	059b      	lsls	r3, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_puts_r+0x4e>
 80086dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086de:	f000 f99d 	bl	8008a1c <__retarget_lock_release_recursive>
 80086e2:	4628      	mov	r0, r5
 80086e4:	bd70      	pop	{r4, r5, r6, pc}
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da04      	bge.n	80086f4 <_puts_r+0x60>
 80086ea:	69a2      	ldr	r2, [r4, #24]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	dc17      	bgt.n	8008720 <_puts_r+0x8c>
 80086f0:	290a      	cmp	r1, #10
 80086f2:	d015      	beq.n	8008720 <_puts_r+0x8c>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	7019      	strb	r1, [r3, #0]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008702:	3b01      	subs	r3, #1
 8008704:	60a3      	str	r3, [r4, #8]
 8008706:	2900      	cmp	r1, #0
 8008708:	d1ed      	bne.n	80086e6 <_puts_r+0x52>
 800870a:	2b00      	cmp	r3, #0
 800870c:	da11      	bge.n	8008732 <_puts_r+0x9e>
 800870e:	4622      	mov	r2, r4
 8008710:	210a      	movs	r1, #10
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f85f 	bl	80087d6 <__swbuf_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d0d7      	beq.n	80086cc <_puts_r+0x38>
 800871c:	250a      	movs	r5, #10
 800871e:	e7d7      	b.n	80086d0 <_puts_r+0x3c>
 8008720:	4622      	mov	r2, r4
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f857 	bl	80087d6 <__swbuf_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d1e7      	bne.n	80086fc <_puts_r+0x68>
 800872c:	e7ce      	b.n	80086cc <_puts_r+0x38>
 800872e:	3e01      	subs	r6, #1
 8008730:	e7e4      	b.n	80086fc <_puts_r+0x68>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	220a      	movs	r2, #10
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e7ee      	b.n	800871c <_puts_r+0x88>
	...

08008740 <puts>:
 8008740:	4b02      	ldr	r3, [pc, #8]	@ (800874c <puts+0xc>)
 8008742:	4601      	mov	r1, r0
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f7ff bfa5 	b.w	8008694 <_puts_r>
 800874a:	bf00      	nop
 800874c:	20000018 	.word	0x20000018

08008750 <__sread>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008758:	f000 f900 	bl	800895c <_read_r>
 800875c:	2800      	cmp	r0, #0
 800875e:	bfab      	itete	ge
 8008760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008762:	89a3      	ldrhlt	r3, [r4, #12]
 8008764:	181b      	addge	r3, r3, r0
 8008766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800876a:	bfac      	ite	ge
 800876c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800876e:	81a3      	strhlt	r3, [r4, #12]
 8008770:	bd10      	pop	{r4, pc}

08008772 <__swrite>:
 8008772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	461f      	mov	r7, r3
 8008778:	898b      	ldrh	r3, [r1, #12]
 800877a:	05db      	lsls	r3, r3, #23
 800877c:	4605      	mov	r5, r0
 800877e:	460c      	mov	r4, r1
 8008780:	4616      	mov	r6, r2
 8008782:	d505      	bpl.n	8008790 <__swrite+0x1e>
 8008784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008788:	2302      	movs	r3, #2
 800878a:	2200      	movs	r2, #0
 800878c:	f000 f8d4 	bl	8008938 <_lseek_r>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	4632      	mov	r2, r6
 800879e:	463b      	mov	r3, r7
 80087a0:	4628      	mov	r0, r5
 80087a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	f000 b8fb 	b.w	80089a0 <_write_r>

080087aa <__sseek>:
 80087aa:	b510      	push	{r4, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b2:	f000 f8c1 	bl	8008938 <_lseek_r>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	bf15      	itete	ne
 80087bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087c6:	81a3      	strheq	r3, [r4, #12]
 80087c8:	bf18      	it	ne
 80087ca:	81a3      	strhne	r3, [r4, #12]
 80087cc:	bd10      	pop	{r4, pc}

080087ce <__sclose>:
 80087ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d2:	f000 b8a1 	b.w	8008918 <_close_r>

080087d6 <__swbuf_r>:
 80087d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d8:	460e      	mov	r6, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	4605      	mov	r5, r0
 80087de:	b118      	cbz	r0, 80087e8 <__swbuf_r+0x12>
 80087e0:	6a03      	ldr	r3, [r0, #32]
 80087e2:	b90b      	cbnz	r3, 80087e8 <__swbuf_r+0x12>
 80087e4:	f7ff ff0e 	bl	8008604 <__sinit>
 80087e8:	69a3      	ldr	r3, [r4, #24]
 80087ea:	60a3      	str	r3, [r4, #8]
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	071a      	lsls	r2, r3, #28
 80087f0:	d501      	bpl.n	80087f6 <__swbuf_r+0x20>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b943      	cbnz	r3, 8008808 <__swbuf_r+0x32>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 f82b 	bl	8008854 <__swsetup_r>
 80087fe:	b118      	cbz	r0, 8008808 <__swbuf_r+0x32>
 8008800:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008804:	4638      	mov	r0, r7
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	6922      	ldr	r2, [r4, #16]
 800880c:	1a98      	subs	r0, r3, r2
 800880e:	6963      	ldr	r3, [r4, #20]
 8008810:	b2f6      	uxtb	r6, r6
 8008812:	4283      	cmp	r3, r0
 8008814:	4637      	mov	r7, r6
 8008816:	dc05      	bgt.n	8008824 <__swbuf_r+0x4e>
 8008818:	4621      	mov	r1, r4
 800881a:	4628      	mov	r0, r5
 800881c:	f001 fcde 	bl	800a1dc <_fflush_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1ed      	bne.n	8008800 <__swbuf_r+0x2a>
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	3b01      	subs	r3, #1
 8008828:	60a3      	str	r3, [r4, #8]
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	701e      	strb	r6, [r3, #0]
 8008832:	6962      	ldr	r2, [r4, #20]
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	429a      	cmp	r2, r3
 8008838:	d004      	beq.n	8008844 <__swbuf_r+0x6e>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	07db      	lsls	r3, r3, #31
 800883e:	d5e1      	bpl.n	8008804 <__swbuf_r+0x2e>
 8008840:	2e0a      	cmp	r6, #10
 8008842:	d1df      	bne.n	8008804 <__swbuf_r+0x2e>
 8008844:	4621      	mov	r1, r4
 8008846:	4628      	mov	r0, r5
 8008848:	f001 fcc8 	bl	800a1dc <_fflush_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	d0d9      	beq.n	8008804 <__swbuf_r+0x2e>
 8008850:	e7d6      	b.n	8008800 <__swbuf_r+0x2a>
	...

08008854 <__swsetup_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4b29      	ldr	r3, [pc, #164]	@ (80088fc <__swsetup_r+0xa8>)
 8008858:	4605      	mov	r5, r0
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	460c      	mov	r4, r1
 800885e:	b118      	cbz	r0, 8008868 <__swsetup_r+0x14>
 8008860:	6a03      	ldr	r3, [r0, #32]
 8008862:	b90b      	cbnz	r3, 8008868 <__swsetup_r+0x14>
 8008864:	f7ff fece 	bl	8008604 <__sinit>
 8008868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886c:	0719      	lsls	r1, r3, #28
 800886e:	d422      	bmi.n	80088b6 <__swsetup_r+0x62>
 8008870:	06da      	lsls	r2, r3, #27
 8008872:	d407      	bmi.n	8008884 <__swsetup_r+0x30>
 8008874:	2209      	movs	r2, #9
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008882:	e033      	b.n	80088ec <__swsetup_r+0x98>
 8008884:	0758      	lsls	r0, r3, #29
 8008886:	d512      	bpl.n	80088ae <__swsetup_r+0x5a>
 8008888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888a:	b141      	cbz	r1, 800889e <__swsetup_r+0x4a>
 800888c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008890:	4299      	cmp	r1, r3
 8008892:	d002      	beq.n	800889a <__swsetup_r+0x46>
 8008894:	4628      	mov	r0, r5
 8008896:	f000 ff0f 	bl	80096b8 <_free_r>
 800889a:	2300      	movs	r3, #0
 800889c:	6363      	str	r3, [r4, #52]	@ 0x34
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6063      	str	r3, [r4, #4]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f043 0308 	orr.w	r3, r3, #8
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	b94b      	cbnz	r3, 80088ce <__swsetup_r+0x7a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c4:	d003      	beq.n	80088ce <__swsetup_r+0x7a>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f001 fcd5 	bl	800a278 <__smakebuf_r>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f013 0201 	ands.w	r2, r3, #1
 80088d6:	d00a      	beq.n	80088ee <__swsetup_r+0x9a>
 80088d8:	2200      	movs	r2, #0
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	4252      	negs	r2, r2
 80088e0:	61a2      	str	r2, [r4, #24]
 80088e2:	6922      	ldr	r2, [r4, #16]
 80088e4:	b942      	cbnz	r2, 80088f8 <__swsetup_r+0xa4>
 80088e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088ea:	d1c5      	bne.n	8008878 <__swsetup_r+0x24>
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
 80088ee:	0799      	lsls	r1, r3, #30
 80088f0:	bf58      	it	pl
 80088f2:	6962      	ldrpl	r2, [r4, #20]
 80088f4:	60a2      	str	r2, [r4, #8]
 80088f6:	e7f4      	b.n	80088e2 <__swsetup_r+0x8e>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7f7      	b.n	80088ec <__swsetup_r+0x98>
 80088fc:	20000018 	.word	0x20000018

08008900 <memset>:
 8008900:	4402      	add	r2, r0
 8008902:	4603      	mov	r3, r0
 8008904:	4293      	cmp	r3, r2
 8008906:	d100      	bne.n	800890a <memset+0xa>
 8008908:	4770      	bx	lr
 800890a:	f803 1b01 	strb.w	r1, [r3], #1
 800890e:	e7f9      	b.n	8008904 <memset+0x4>

08008910 <_localeconv_r>:
 8008910:	4800      	ldr	r0, [pc, #0]	@ (8008914 <_localeconv_r+0x4>)
 8008912:	4770      	bx	lr
 8008914:	20000158 	.word	0x20000158

08008918 <_close_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	@ (8008934 <_close_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f9 f8dc 	bl	8001ae0 <_close>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_close_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_close_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20000738 	.word	0x20000738

08008938 <_lseek_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_lseek_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f9 f8f1 	bl	8001b2e <_lseek>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_lseek_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_lseek_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20000738 	.word	0x20000738

0800895c <_read_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_read_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f9 f87f 	bl	8001a6e <_read>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_read_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_read_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20000738 	.word	0x20000738

08008980 <_sbrk_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d06      	ldr	r5, [pc, #24]	@ (800899c <_sbrk_r+0x1c>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7f9 f8dc 	bl	8001b48 <_sbrk>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_sbrk_r+0x1a>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_sbrk_r+0x1a>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20000738 	.word	0x20000738

080089a0 <_write_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d07      	ldr	r5, [pc, #28]	@ (80089c0 <_write_r+0x20>)
 80089a4:	4604      	mov	r4, r0
 80089a6:	4608      	mov	r0, r1
 80089a8:	4611      	mov	r1, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	602a      	str	r2, [r5, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f7f9 f87a 	bl	8001aa8 <_write>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d102      	bne.n	80089be <_write_r+0x1e>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b103      	cbz	r3, 80089be <_write_r+0x1e>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	20000738 	.word	0x20000738

080089c4 <__errno>:
 80089c4:	4b01      	ldr	r3, [pc, #4]	@ (80089cc <__errno+0x8>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000018 	.word	0x20000018

080089d0 <__libc_init_array>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008a08 <__libc_init_array+0x38>)
 80089d4:	4c0d      	ldr	r4, [pc, #52]	@ (8008a0c <__libc_init_array+0x3c>)
 80089d6:	1b64      	subs	r4, r4, r5
 80089d8:	10a4      	asrs	r4, r4, #2
 80089da:	2600      	movs	r6, #0
 80089dc:	42a6      	cmp	r6, r4
 80089de:	d109      	bne.n	80089f4 <__libc_init_array+0x24>
 80089e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008a10 <__libc_init_array+0x40>)
 80089e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008a14 <__libc_init_array+0x44>)
 80089e4:	f001 fee2 	bl	800a7ac <_init>
 80089e8:	1b64      	subs	r4, r4, r5
 80089ea:	10a4      	asrs	r4, r4, #2
 80089ec:	2600      	movs	r6, #0
 80089ee:	42a6      	cmp	r6, r4
 80089f0:	d105      	bne.n	80089fe <__libc_init_array+0x2e>
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f8:	4798      	blx	r3
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7ee      	b.n	80089dc <__libc_init_array+0xc>
 80089fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a02:	4798      	blx	r3
 8008a04:	3601      	adds	r6, #1
 8008a06:	e7f2      	b.n	80089ee <__libc_init_array+0x1e>
 8008a08:	0800ac20 	.word	0x0800ac20
 8008a0c:	0800ac20 	.word	0x0800ac20
 8008a10:	0800ac20 	.word	0x0800ac20
 8008a14:	0800ac24 	.word	0x0800ac24

08008a18 <__retarget_lock_init_recursive>:
 8008a18:	4770      	bx	lr

08008a1a <__retarget_lock_acquire_recursive>:
 8008a1a:	4770      	bx	lr

08008a1c <__retarget_lock_release_recursive>:
 8008a1c:	4770      	bx	lr

08008a1e <quorem>:
 8008a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a22:	6903      	ldr	r3, [r0, #16]
 8008a24:	690c      	ldr	r4, [r1, #16]
 8008a26:	42a3      	cmp	r3, r4
 8008a28:	4607      	mov	r7, r0
 8008a2a:	db7e      	blt.n	8008b2a <quorem+0x10c>
 8008a2c:	3c01      	subs	r4, #1
 8008a2e:	f101 0814 	add.w	r8, r1, #20
 8008a32:	00a3      	lsls	r3, r4, #2
 8008a34:	f100 0514 	add.w	r5, r0, #20
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a50:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a54:	d32e      	bcc.n	8008ab4 <quorem+0x96>
 8008a56:	f04f 0a00 	mov.w	sl, #0
 8008a5a:	46c4      	mov	ip, r8
 8008a5c:	46ae      	mov	lr, r5
 8008a5e:	46d3      	mov	fp, sl
 8008a60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a64:	b298      	uxth	r0, r3
 8008a66:	fb06 a000 	mla	r0, r6, r0, sl
 8008a6a:	0c02      	lsrs	r2, r0, #16
 8008a6c:	0c1b      	lsrs	r3, r3, #16
 8008a6e:	fb06 2303 	mla	r3, r6, r3, r2
 8008a72:	f8de 2000 	ldr.w	r2, [lr]
 8008a76:	b280      	uxth	r0, r0
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	1a12      	subs	r2, r2, r0
 8008a7c:	445a      	add	r2, fp
 8008a7e:	f8de 0000 	ldr.w	r0, [lr]
 8008a82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a90:	b292      	uxth	r2, r2
 8008a92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a96:	45e1      	cmp	r9, ip
 8008a98:	f84e 2b04 	str.w	r2, [lr], #4
 8008a9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008aa0:	d2de      	bcs.n	8008a60 <quorem+0x42>
 8008aa2:	9b00      	ldr	r3, [sp, #0]
 8008aa4:	58eb      	ldr	r3, [r5, r3]
 8008aa6:	b92b      	cbnz	r3, 8008ab4 <quorem+0x96>
 8008aa8:	9b01      	ldr	r3, [sp, #4]
 8008aaa:	3b04      	subs	r3, #4
 8008aac:	429d      	cmp	r5, r3
 8008aae:	461a      	mov	r2, r3
 8008ab0:	d32f      	bcc.n	8008b12 <quorem+0xf4>
 8008ab2:	613c      	str	r4, [r7, #16]
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f001 f8c3 	bl	8009c40 <__mcmp>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	db25      	blt.n	8008b0a <quorem+0xec>
 8008abe:	4629      	mov	r1, r5
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ac6:	f8d1 c000 	ldr.w	ip, [r1]
 8008aca:	fa1f fe82 	uxth.w	lr, r2
 8008ace:	fa1f f38c 	uxth.w	r3, ip
 8008ad2:	eba3 030e 	sub.w	r3, r3, lr
 8008ad6:	4403      	add	r3, r0
 8008ad8:	0c12      	lsrs	r2, r2, #16
 8008ada:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ade:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ae8:	45c1      	cmp	r9, r8
 8008aea:	f841 3b04 	str.w	r3, [r1], #4
 8008aee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008af2:	d2e6      	bcs.n	8008ac2 <quorem+0xa4>
 8008af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008afc:	b922      	cbnz	r2, 8008b08 <quorem+0xea>
 8008afe:	3b04      	subs	r3, #4
 8008b00:	429d      	cmp	r5, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	d30b      	bcc.n	8008b1e <quorem+0x100>
 8008b06:	613c      	str	r4, [r7, #16]
 8008b08:	3601      	adds	r6, #1
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	b003      	add	sp, #12
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	3b04      	subs	r3, #4
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d1cb      	bne.n	8008ab2 <quorem+0x94>
 8008b1a:	3c01      	subs	r4, #1
 8008b1c:	e7c6      	b.n	8008aac <quorem+0x8e>
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	3b04      	subs	r3, #4
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	d1ef      	bne.n	8008b06 <quorem+0xe8>
 8008b26:	3c01      	subs	r4, #1
 8008b28:	e7ea      	b.n	8008b00 <quorem+0xe2>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	e7ee      	b.n	8008b0c <quorem+0xee>
	...

08008b30 <_dtoa_r>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	69c7      	ldr	r7, [r0, #28]
 8008b36:	b099      	sub	sp, #100	@ 0x64
 8008b38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b3c:	ec55 4b10 	vmov	r4, r5, d0
 8008b40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b42:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b44:	4683      	mov	fp, r0
 8008b46:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b4a:	b97f      	cbnz	r7, 8008b6c <_dtoa_r+0x3c>
 8008b4c:	2010      	movs	r0, #16
 8008b4e:	f7fe ffbf 	bl	8007ad0 <malloc>
 8008b52:	4602      	mov	r2, r0
 8008b54:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b58:	b920      	cbnz	r0, 8008b64 <_dtoa_r+0x34>
 8008b5a:	4ba7      	ldr	r3, [pc, #668]	@ (8008df8 <_dtoa_r+0x2c8>)
 8008b5c:	21ef      	movs	r1, #239	@ 0xef
 8008b5e:	48a7      	ldr	r0, [pc, #668]	@ (8008dfc <_dtoa_r+0x2cc>)
 8008b60:	f001 fbf6 	bl	800a350 <__assert_func>
 8008b64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b68:	6007      	str	r7, [r0, #0]
 8008b6a:	60c7      	str	r7, [r0, #12]
 8008b6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b70:	6819      	ldr	r1, [r3, #0]
 8008b72:	b159      	cbz	r1, 8008b8c <_dtoa_r+0x5c>
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	604a      	str	r2, [r1, #4]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	4093      	lsls	r3, r2
 8008b7c:	608b      	str	r3, [r1, #8]
 8008b7e:	4658      	mov	r0, fp
 8008b80:	f000 fe24 	bl	80097cc <_Bfree>
 8008b84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	1e2b      	subs	r3, r5, #0
 8008b8e:	bfb9      	ittee	lt
 8008b90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b94:	9303      	strlt	r3, [sp, #12]
 8008b96:	2300      	movge	r3, #0
 8008b98:	6033      	strge	r3, [r6, #0]
 8008b9a:	9f03      	ldr	r7, [sp, #12]
 8008b9c:	4b98      	ldr	r3, [pc, #608]	@ (8008e00 <_dtoa_r+0x2d0>)
 8008b9e:	bfbc      	itt	lt
 8008ba0:	2201      	movlt	r2, #1
 8008ba2:	6032      	strlt	r2, [r6, #0]
 8008ba4:	43bb      	bics	r3, r7
 8008ba6:	d112      	bne.n	8008bce <_dtoa_r+0x9e>
 8008ba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008baa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bb4:	4323      	orrs	r3, r4
 8008bb6:	f000 854d 	beq.w	8009654 <_dtoa_r+0xb24>
 8008bba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e14 <_dtoa_r+0x2e4>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 854f 	beq.w	8009664 <_dtoa_r+0xb34>
 8008bc6:	f10a 0303 	add.w	r3, sl, #3
 8008bca:	f000 bd49 	b.w	8009660 <_dtoa_r+0xb30>
 8008bce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	ec51 0b17 	vmov	r0, r1, d7
 8008bd8:	2300      	movs	r3, #0
 8008bda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008bde:	f7f7 ff9b 	bl	8000b18 <__aeabi_dcmpeq>
 8008be2:	4680      	mov	r8, r0
 8008be4:	b158      	cbz	r0, 8008bfe <_dtoa_r+0xce>
 8008be6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008be8:	2301      	movs	r3, #1
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bee:	b113      	cbz	r3, 8008bf6 <_dtoa_r+0xc6>
 8008bf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008bf2:	4b84      	ldr	r3, [pc, #528]	@ (8008e04 <_dtoa_r+0x2d4>)
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e18 <_dtoa_r+0x2e8>
 8008bfa:	f000 bd33 	b.w	8009664 <_dtoa_r+0xb34>
 8008bfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c02:	aa16      	add	r2, sp, #88	@ 0x58
 8008c04:	a917      	add	r1, sp, #92	@ 0x5c
 8008c06:	4658      	mov	r0, fp
 8008c08:	f001 f8ca 	bl	8009da0 <__d2b>
 8008c0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c10:	4681      	mov	r9, r0
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	d077      	beq.n	8008d06 <_dtoa_r+0x1d6>
 8008c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c30:	4619      	mov	r1, r3
 8008c32:	2200      	movs	r2, #0
 8008c34:	4b74      	ldr	r3, [pc, #464]	@ (8008e08 <_dtoa_r+0x2d8>)
 8008c36:	f7f7 fb4f 	bl	80002d8 <__aeabi_dsub>
 8008c3a:	a369      	add	r3, pc, #420	@ (adr r3, 8008de0 <_dtoa_r+0x2b0>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fd02 	bl	8000648 <__aeabi_dmul>
 8008c44:	a368      	add	r3, pc, #416	@ (adr r3, 8008de8 <_dtoa_r+0x2b8>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 fb47 	bl	80002dc <__adddf3>
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4630      	mov	r0, r6
 8008c52:	460d      	mov	r5, r1
 8008c54:	f7f7 fc8e 	bl	8000574 <__aeabi_i2d>
 8008c58:	a365      	add	r3, pc, #404	@ (adr r3, 8008df0 <_dtoa_r+0x2c0>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fcf3 	bl	8000648 <__aeabi_dmul>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f7 fb37 	bl	80002dc <__adddf3>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	f7f7 ff99 	bl	8000ba8 <__aeabi_d2iz>
 8008c76:	2200      	movs	r2, #0
 8008c78:	4607      	mov	r7, r0
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7f7 ff54 	bl	8000b2c <__aeabi_dcmplt>
 8008c84:	b140      	cbz	r0, 8008c98 <_dtoa_r+0x168>
 8008c86:	4638      	mov	r0, r7
 8008c88:	f7f7 fc74 	bl	8000574 <__aeabi_i2d>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	462b      	mov	r3, r5
 8008c90:	f7f7 ff42 	bl	8000b18 <__aeabi_dcmpeq>
 8008c94:	b900      	cbnz	r0, 8008c98 <_dtoa_r+0x168>
 8008c96:	3f01      	subs	r7, #1
 8008c98:	2f16      	cmp	r7, #22
 8008c9a:	d851      	bhi.n	8008d40 <_dtoa_r+0x210>
 8008c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8008e0c <_dtoa_r+0x2dc>)
 8008c9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008caa:	f7f7 ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d048      	beq.n	8008d44 <_dtoa_r+0x214>
 8008cb2:	3f01      	subs	r7, #1
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cba:	1b9b      	subs	r3, r3, r6
 8008cbc:	1e5a      	subs	r2, r3, #1
 8008cbe:	bf44      	itt	mi
 8008cc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008cc4:	2300      	movmi	r3, #0
 8008cc6:	9208      	str	r2, [sp, #32]
 8008cc8:	bf54      	ite	pl
 8008cca:	f04f 0800 	movpl.w	r8, #0
 8008cce:	9308      	strmi	r3, [sp, #32]
 8008cd0:	2f00      	cmp	r7, #0
 8008cd2:	db39      	blt.n	8008d48 <_dtoa_r+0x218>
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008cd8:	443b      	add	r3, r7
 8008cda:	9308      	str	r3, [sp, #32]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	d864      	bhi.n	8008db0 <_dtoa_r+0x280>
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	bfc4      	itt	gt
 8008cea:	3b04      	subgt	r3, #4
 8008cec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf0:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf4:	bfcc      	ite	gt
 8008cf6:	2400      	movgt	r4, #0
 8008cf8:	2401      	movle	r4, #1
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d863      	bhi.n	8008dc6 <_dtoa_r+0x296>
 8008cfe:	e8df f003 	tbb	[pc, r3]
 8008d02:	372a      	.short	0x372a
 8008d04:	5535      	.short	0x5535
 8008d06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d0a:	441e      	add	r6, r3
 8008d0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	bfc1      	itttt	gt
 8008d14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d18:	409f      	lslgt	r7, r3
 8008d1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d22:	bfd6      	itet	le
 8008d24:	f1c3 0320 	rsble	r3, r3, #32
 8008d28:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d2c:	fa04 f003 	lslle.w	r0, r4, r3
 8008d30:	f7f7 fc10 	bl	8000554 <__aeabi_ui2d>
 8008d34:	2201      	movs	r2, #1
 8008d36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d3a:	3e01      	subs	r6, #1
 8008d3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d3e:	e777      	b.n	8008c30 <_dtoa_r+0x100>
 8008d40:	2301      	movs	r3, #1
 8008d42:	e7b8      	b.n	8008cb6 <_dtoa_r+0x186>
 8008d44:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d46:	e7b7      	b.n	8008cb8 <_dtoa_r+0x188>
 8008d48:	427b      	negs	r3, r7
 8008d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	eba8 0807 	sub.w	r8, r8, r7
 8008d52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d54:	e7c4      	b.n	8008ce0 <_dtoa_r+0x1b0>
 8008d56:	2300      	movs	r3, #0
 8008d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dc35      	bgt.n	8008dcc <_dtoa_r+0x29c>
 8008d60:	2301      	movs	r3, #1
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	9307      	str	r3, [sp, #28]
 8008d66:	461a      	mov	r2, r3
 8008d68:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d6a:	e00b      	b.n	8008d84 <_dtoa_r+0x254>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e7f3      	b.n	8008d58 <_dtoa_r+0x228>
 8008d70:	2300      	movs	r3, #0
 8008d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	9307      	str	r3, [sp, #28]
 8008d80:	bfb8      	it	lt
 8008d82:	2301      	movlt	r3, #1
 8008d84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	f102 0514 	add.w	r5, r2, #20
 8008d90:	429d      	cmp	r5, r3
 8008d92:	d91f      	bls.n	8008dd4 <_dtoa_r+0x2a4>
 8008d94:	6041      	str	r1, [r0, #4]
 8008d96:	4658      	mov	r0, fp
 8008d98:	f000 fcd8 	bl	800974c <_Balloc>
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d13c      	bne.n	8008e1c <_dtoa_r+0x2ec>
 8008da2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e10 <_dtoa_r+0x2e0>)
 8008da4:	4602      	mov	r2, r0
 8008da6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008daa:	e6d8      	b.n	8008b5e <_dtoa_r+0x2e>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e7e0      	b.n	8008d72 <_dtoa_r+0x242>
 8008db0:	2401      	movs	r4, #1
 8008db2:	2300      	movs	r3, #0
 8008db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2312      	movs	r3, #18
 8008dc4:	e7d0      	b.n	8008d68 <_dtoa_r+0x238>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dca:	e7f5      	b.n	8008db8 <_dtoa_r+0x288>
 8008dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	9307      	str	r3, [sp, #28]
 8008dd2:	e7d7      	b.n	8008d84 <_dtoa_r+0x254>
 8008dd4:	3101      	adds	r1, #1
 8008dd6:	0052      	lsls	r2, r2, #1
 8008dd8:	e7d8      	b.n	8008d8c <_dtoa_r+0x25c>
 8008dda:	bf00      	nop
 8008ddc:	f3af 8000 	nop.w
 8008de0:	636f4361 	.word	0x636f4361
 8008de4:	3fd287a7 	.word	0x3fd287a7
 8008de8:	8b60c8b3 	.word	0x8b60c8b3
 8008dec:	3fc68a28 	.word	0x3fc68a28
 8008df0:	509f79fb 	.word	0x509f79fb
 8008df4:	3fd34413 	.word	0x3fd34413
 8008df8:	0800a8b1 	.word	0x0800a8b1
 8008dfc:	0800a8c8 	.word	0x0800a8c8
 8008e00:	7ff00000 	.word	0x7ff00000
 8008e04:	0800a881 	.word	0x0800a881
 8008e08:	3ff80000 	.word	0x3ff80000
 8008e0c:	0800a9c0 	.word	0x0800a9c0
 8008e10:	0800a920 	.word	0x0800a920
 8008e14:	0800a8ad 	.word	0x0800a8ad
 8008e18:	0800a880 	.word	0x0800a880
 8008e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e20:	6018      	str	r0, [r3, #0]
 8008e22:	9b07      	ldr	r3, [sp, #28]
 8008e24:	2b0e      	cmp	r3, #14
 8008e26:	f200 80a4 	bhi.w	8008f72 <_dtoa_r+0x442>
 8008e2a:	2c00      	cmp	r4, #0
 8008e2c:	f000 80a1 	beq.w	8008f72 <_dtoa_r+0x442>
 8008e30:	2f00      	cmp	r7, #0
 8008e32:	dd33      	ble.n	8008e9c <_dtoa_r+0x36c>
 8008e34:	4bad      	ldr	r3, [pc, #692]	@ (80090ec <_dtoa_r+0x5bc>)
 8008e36:	f007 020f 	and.w	r2, r7, #15
 8008e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e3e:	ed93 7b00 	vldr	d7, [r3]
 8008e42:	05f8      	lsls	r0, r7, #23
 8008e44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e4c:	d516      	bpl.n	8008e7c <_dtoa_r+0x34c>
 8008e4e:	4ba8      	ldr	r3, [pc, #672]	@ (80090f0 <_dtoa_r+0x5c0>)
 8008e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e58:	f7f7 fd20 	bl	800089c <__aeabi_ddiv>
 8008e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e60:	f004 040f 	and.w	r4, r4, #15
 8008e64:	2603      	movs	r6, #3
 8008e66:	4da2      	ldr	r5, [pc, #648]	@ (80090f0 <_dtoa_r+0x5c0>)
 8008e68:	b954      	cbnz	r4, 8008e80 <_dtoa_r+0x350>
 8008e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e72:	f7f7 fd13 	bl	800089c <__aeabi_ddiv>
 8008e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e7a:	e028      	b.n	8008ece <_dtoa_r+0x39e>
 8008e7c:	2602      	movs	r6, #2
 8008e7e:	e7f2      	b.n	8008e66 <_dtoa_r+0x336>
 8008e80:	07e1      	lsls	r1, r4, #31
 8008e82:	d508      	bpl.n	8008e96 <_dtoa_r+0x366>
 8008e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e8c:	f7f7 fbdc 	bl	8000648 <__aeabi_dmul>
 8008e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e94:	3601      	adds	r6, #1
 8008e96:	1064      	asrs	r4, r4, #1
 8008e98:	3508      	adds	r5, #8
 8008e9a:	e7e5      	b.n	8008e68 <_dtoa_r+0x338>
 8008e9c:	f000 80d2 	beq.w	8009044 <_dtoa_r+0x514>
 8008ea0:	427c      	negs	r4, r7
 8008ea2:	4b92      	ldr	r3, [pc, #584]	@ (80090ec <_dtoa_r+0x5bc>)
 8008ea4:	4d92      	ldr	r5, [pc, #584]	@ (80090f0 <_dtoa_r+0x5c0>)
 8008ea6:	f004 020f 	and.w	r2, r4, #15
 8008eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eb6:	f7f7 fbc7 	bl	8000648 <__aeabi_dmul>
 8008eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ebe:	1124      	asrs	r4, r4, #4
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2602      	movs	r6, #2
 8008ec4:	2c00      	cmp	r4, #0
 8008ec6:	f040 80b2 	bne.w	800902e <_dtoa_r+0x4fe>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1d3      	bne.n	8008e76 <_dtoa_r+0x346>
 8008ece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ed0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80b7 	beq.w	8009048 <_dtoa_r+0x518>
 8008eda:	4b86      	ldr	r3, [pc, #536]	@ (80090f4 <_dtoa_r+0x5c4>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 fe23 	bl	8000b2c <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f000 80ae 	beq.w	8009048 <_dtoa_r+0x518>
 8008eec:	9b07      	ldr	r3, [sp, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80aa 	beq.w	8009048 <_dtoa_r+0x518>
 8008ef4:	9b00      	ldr	r3, [sp, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dd37      	ble.n	8008f6a <_dtoa_r+0x43a>
 8008efa:	1e7b      	subs	r3, r7, #1
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	4620      	mov	r0, r4
 8008f00:	4b7d      	ldr	r3, [pc, #500]	@ (80090f8 <_dtoa_r+0x5c8>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7f7 fb9f 	bl	8000648 <__aeabi_dmul>
 8008f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f0e:	9c00      	ldr	r4, [sp, #0]
 8008f10:	3601      	adds	r6, #1
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7f7 fb2e 	bl	8000574 <__aeabi_i2d>
 8008f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f1c:	f7f7 fb94 	bl	8000648 <__aeabi_dmul>
 8008f20:	4b76      	ldr	r3, [pc, #472]	@ (80090fc <_dtoa_r+0x5cc>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	f7f7 f9da 	bl	80002dc <__adddf3>
 8008f28:	4605      	mov	r5, r0
 8008f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f2e:	2c00      	cmp	r4, #0
 8008f30:	f040 808d 	bne.w	800904e <_dtoa_r+0x51e>
 8008f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f38:	4b71      	ldr	r3, [pc, #452]	@ (8009100 <_dtoa_r+0x5d0>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f7f7 f9cc 	bl	80002d8 <__aeabi_dsub>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4633      	mov	r3, r6
 8008f4c:	f7f7 fe0c 	bl	8000b68 <__aeabi_dcmpgt>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	f040 828b 	bne.w	800946c <_dtoa_r+0x93c>
 8008f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f60:	f7f7 fde4 	bl	8000b2c <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f040 8128 	bne.w	80091ba <_dtoa_r+0x68a>
 8008f6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f2c0 815a 	blt.w	800922e <_dtoa_r+0x6fe>
 8008f7a:	2f0e      	cmp	r7, #14
 8008f7c:	f300 8157 	bgt.w	800922e <_dtoa_r+0x6fe>
 8008f80:	4b5a      	ldr	r3, [pc, #360]	@ (80090ec <_dtoa_r+0x5bc>)
 8008f82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f86:	ed93 7b00 	vldr	d7, [r3]
 8008f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	ed8d 7b00 	vstr	d7, [sp]
 8008f92:	da03      	bge.n	8008f9c <_dtoa_r+0x46c>
 8008f94:	9b07      	ldr	r3, [sp, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f340 8101 	ble.w	800919e <_dtoa_r+0x66e>
 8008f9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008fa0:	4656      	mov	r6, sl
 8008fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4629      	mov	r1, r5
 8008faa:	f7f7 fc77 	bl	800089c <__aeabi_ddiv>
 8008fae:	f7f7 fdfb 	bl	8000ba8 <__aeabi_d2iz>
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	f7f7 fade 	bl	8000574 <__aeabi_i2d>
 8008fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fbc:	f7f7 fb44 	bl	8000648 <__aeabi_dmul>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fcc:	f7f7 f984 	bl	80002d8 <__aeabi_dsub>
 8008fd0:	f806 4b01 	strb.w	r4, [r6], #1
 8008fd4:	9d07      	ldr	r5, [sp, #28]
 8008fd6:	eba6 040a 	sub.w	r4, r6, sl
 8008fda:	42a5      	cmp	r5, r4
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	f040 8117 	bne.w	8009212 <_dtoa_r+0x6e2>
 8008fe4:	f7f7 f97a 	bl	80002dc <__adddf3>
 8008fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	f7f7 fdba 	bl	8000b68 <__aeabi_dcmpgt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 80f9 	bne.w	80091ec <_dtoa_r+0x6bc>
 8008ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 fd89 	bl	8000b18 <__aeabi_dcmpeq>
 8009006:	b118      	cbz	r0, 8009010 <_dtoa_r+0x4e0>
 8009008:	f018 0f01 	tst.w	r8, #1
 800900c:	f040 80ee 	bne.w	80091ec <_dtoa_r+0x6bc>
 8009010:	4649      	mov	r1, r9
 8009012:	4658      	mov	r0, fp
 8009014:	f000 fbda 	bl	80097cc <_Bfree>
 8009018:	2300      	movs	r3, #0
 800901a:	7033      	strb	r3, [r6, #0]
 800901c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800901e:	3701      	adds	r7, #1
 8009020:	601f      	str	r7, [r3, #0]
 8009022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 831d 	beq.w	8009664 <_dtoa_r+0xb34>
 800902a:	601e      	str	r6, [r3, #0]
 800902c:	e31a      	b.n	8009664 <_dtoa_r+0xb34>
 800902e:	07e2      	lsls	r2, r4, #31
 8009030:	d505      	bpl.n	800903e <_dtoa_r+0x50e>
 8009032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009036:	f7f7 fb07 	bl	8000648 <__aeabi_dmul>
 800903a:	3601      	adds	r6, #1
 800903c:	2301      	movs	r3, #1
 800903e:	1064      	asrs	r4, r4, #1
 8009040:	3508      	adds	r5, #8
 8009042:	e73f      	b.n	8008ec4 <_dtoa_r+0x394>
 8009044:	2602      	movs	r6, #2
 8009046:	e742      	b.n	8008ece <_dtoa_r+0x39e>
 8009048:	9c07      	ldr	r4, [sp, #28]
 800904a:	9704      	str	r7, [sp, #16]
 800904c:	e761      	b.n	8008f12 <_dtoa_r+0x3e2>
 800904e:	4b27      	ldr	r3, [pc, #156]	@ (80090ec <_dtoa_r+0x5bc>)
 8009050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800905a:	4454      	add	r4, sl
 800905c:	2900      	cmp	r1, #0
 800905e:	d053      	beq.n	8009108 <_dtoa_r+0x5d8>
 8009060:	4928      	ldr	r1, [pc, #160]	@ (8009104 <_dtoa_r+0x5d4>)
 8009062:	2000      	movs	r0, #0
 8009064:	f7f7 fc1a 	bl	800089c <__aeabi_ddiv>
 8009068:	4633      	mov	r3, r6
 800906a:	462a      	mov	r2, r5
 800906c:	f7f7 f934 	bl	80002d8 <__aeabi_dsub>
 8009070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009074:	4656      	mov	r6, sl
 8009076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800907a:	f7f7 fd95 	bl	8000ba8 <__aeabi_d2iz>
 800907e:	4605      	mov	r5, r0
 8009080:	f7f7 fa78 	bl	8000574 <__aeabi_i2d>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908c:	f7f7 f924 	bl	80002d8 <__aeabi_dsub>
 8009090:	3530      	adds	r5, #48	@ 0x30
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800909a:	f806 5b01 	strb.w	r5, [r6], #1
 800909e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090a2:	f7f7 fd43 	bl	8000b2c <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d171      	bne.n	800918e <_dtoa_r+0x65e>
 80090aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ae:	4911      	ldr	r1, [pc, #68]	@ (80090f4 <_dtoa_r+0x5c4>)
 80090b0:	2000      	movs	r0, #0
 80090b2:	f7f7 f911 	bl	80002d8 <__aeabi_dsub>
 80090b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090ba:	f7f7 fd37 	bl	8000b2c <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f040 8095 	bne.w	80091ee <_dtoa_r+0x6be>
 80090c4:	42a6      	cmp	r6, r4
 80090c6:	f43f af50 	beq.w	8008f6a <_dtoa_r+0x43a>
 80090ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090ce:	4b0a      	ldr	r3, [pc, #40]	@ (80090f8 <_dtoa_r+0x5c8>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	f7f7 fab9 	bl	8000648 <__aeabi_dmul>
 80090d6:	4b08      	ldr	r3, [pc, #32]	@ (80090f8 <_dtoa_r+0x5c8>)
 80090d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090dc:	2200      	movs	r2, #0
 80090de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090e2:	f7f7 fab1 	bl	8000648 <__aeabi_dmul>
 80090e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ea:	e7c4      	b.n	8009076 <_dtoa_r+0x546>
 80090ec:	0800a9c0 	.word	0x0800a9c0
 80090f0:	0800a998 	.word	0x0800a998
 80090f4:	3ff00000 	.word	0x3ff00000
 80090f8:	40240000 	.word	0x40240000
 80090fc:	401c0000 	.word	0x401c0000
 8009100:	40140000 	.word	0x40140000
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	4631      	mov	r1, r6
 800910a:	4628      	mov	r0, r5
 800910c:	f7f7 fa9c 	bl	8000648 <__aeabi_dmul>
 8009110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009114:	9415      	str	r4, [sp, #84]	@ 0x54
 8009116:	4656      	mov	r6, sl
 8009118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911c:	f7f7 fd44 	bl	8000ba8 <__aeabi_d2iz>
 8009120:	4605      	mov	r5, r0
 8009122:	f7f7 fa27 	bl	8000574 <__aeabi_i2d>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912e:	f7f7 f8d3 	bl	80002d8 <__aeabi_dsub>
 8009132:	3530      	adds	r5, #48	@ 0x30
 8009134:	f806 5b01 	strb.w	r5, [r6], #1
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	42a6      	cmp	r6, r4
 800913e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	d124      	bne.n	8009192 <_dtoa_r+0x662>
 8009148:	4bac      	ldr	r3, [pc, #688]	@ (80093fc <_dtoa_r+0x8cc>)
 800914a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800914e:	f7f7 f8c5 	bl	80002dc <__adddf3>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915a:	f7f7 fd05 	bl	8000b68 <__aeabi_dcmpgt>
 800915e:	2800      	cmp	r0, #0
 8009160:	d145      	bne.n	80091ee <_dtoa_r+0x6be>
 8009162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009166:	49a5      	ldr	r1, [pc, #660]	@ (80093fc <_dtoa_r+0x8cc>)
 8009168:	2000      	movs	r0, #0
 800916a:	f7f7 f8b5 	bl	80002d8 <__aeabi_dsub>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009176:	f7f7 fcd9 	bl	8000b2c <__aeabi_dcmplt>
 800917a:	2800      	cmp	r0, #0
 800917c:	f43f aef5 	beq.w	8008f6a <_dtoa_r+0x43a>
 8009180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009182:	1e73      	subs	r3, r6, #1
 8009184:	9315      	str	r3, [sp, #84]	@ 0x54
 8009186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800918a:	2b30      	cmp	r3, #48	@ 0x30
 800918c:	d0f8      	beq.n	8009180 <_dtoa_r+0x650>
 800918e:	9f04      	ldr	r7, [sp, #16]
 8009190:	e73e      	b.n	8009010 <_dtoa_r+0x4e0>
 8009192:	4b9b      	ldr	r3, [pc, #620]	@ (8009400 <_dtoa_r+0x8d0>)
 8009194:	f7f7 fa58 	bl	8000648 <__aeabi_dmul>
 8009198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800919c:	e7bc      	b.n	8009118 <_dtoa_r+0x5e8>
 800919e:	d10c      	bne.n	80091ba <_dtoa_r+0x68a>
 80091a0:	4b98      	ldr	r3, [pc, #608]	@ (8009404 <_dtoa_r+0x8d4>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091a8:	f7f7 fa4e 	bl	8000648 <__aeabi_dmul>
 80091ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091b0:	f7f7 fcd0 	bl	8000b54 <__aeabi_dcmpge>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f000 8157 	beq.w	8009468 <_dtoa_r+0x938>
 80091ba:	2400      	movs	r4, #0
 80091bc:	4625      	mov	r5, r4
 80091be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c0:	43db      	mvns	r3, r3
 80091c2:	9304      	str	r3, [sp, #16]
 80091c4:	4656      	mov	r6, sl
 80091c6:	2700      	movs	r7, #0
 80091c8:	4621      	mov	r1, r4
 80091ca:	4658      	mov	r0, fp
 80091cc:	f000 fafe 	bl	80097cc <_Bfree>
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	d0dc      	beq.n	800918e <_dtoa_r+0x65e>
 80091d4:	b12f      	cbz	r7, 80091e2 <_dtoa_r+0x6b2>
 80091d6:	42af      	cmp	r7, r5
 80091d8:	d003      	beq.n	80091e2 <_dtoa_r+0x6b2>
 80091da:	4639      	mov	r1, r7
 80091dc:	4658      	mov	r0, fp
 80091de:	f000 faf5 	bl	80097cc <_Bfree>
 80091e2:	4629      	mov	r1, r5
 80091e4:	4658      	mov	r0, fp
 80091e6:	f000 faf1 	bl	80097cc <_Bfree>
 80091ea:	e7d0      	b.n	800918e <_dtoa_r+0x65e>
 80091ec:	9704      	str	r7, [sp, #16]
 80091ee:	4633      	mov	r3, r6
 80091f0:	461e      	mov	r6, r3
 80091f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091f6:	2a39      	cmp	r2, #57	@ 0x39
 80091f8:	d107      	bne.n	800920a <_dtoa_r+0x6da>
 80091fa:	459a      	cmp	sl, r3
 80091fc:	d1f8      	bne.n	80091f0 <_dtoa_r+0x6c0>
 80091fe:	9a04      	ldr	r2, [sp, #16]
 8009200:	3201      	adds	r2, #1
 8009202:	9204      	str	r2, [sp, #16]
 8009204:	2230      	movs	r2, #48	@ 0x30
 8009206:	f88a 2000 	strb.w	r2, [sl]
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	3201      	adds	r2, #1
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e7bd      	b.n	800918e <_dtoa_r+0x65e>
 8009212:	4b7b      	ldr	r3, [pc, #492]	@ (8009400 <_dtoa_r+0x8d0>)
 8009214:	2200      	movs	r2, #0
 8009216:	f7f7 fa17 	bl	8000648 <__aeabi_dmul>
 800921a:	2200      	movs	r2, #0
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	460d      	mov	r5, r1
 8009222:	f7f7 fc79 	bl	8000b18 <__aeabi_dcmpeq>
 8009226:	2800      	cmp	r0, #0
 8009228:	f43f aebb 	beq.w	8008fa2 <_dtoa_r+0x472>
 800922c:	e6f0      	b.n	8009010 <_dtoa_r+0x4e0>
 800922e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009230:	2a00      	cmp	r2, #0
 8009232:	f000 80db 	beq.w	80093ec <_dtoa_r+0x8bc>
 8009236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009238:	2a01      	cmp	r2, #1
 800923a:	f300 80bf 	bgt.w	80093bc <_dtoa_r+0x88c>
 800923e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009240:	2a00      	cmp	r2, #0
 8009242:	f000 80b7 	beq.w	80093b4 <_dtoa_r+0x884>
 8009246:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800924a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800924c:	4646      	mov	r6, r8
 800924e:	9a08      	ldr	r2, [sp, #32]
 8009250:	2101      	movs	r1, #1
 8009252:	441a      	add	r2, r3
 8009254:	4658      	mov	r0, fp
 8009256:	4498      	add	r8, r3
 8009258:	9208      	str	r2, [sp, #32]
 800925a:	f000 fb6b 	bl	8009934 <__i2b>
 800925e:	4605      	mov	r5, r0
 8009260:	b15e      	cbz	r6, 800927a <_dtoa_r+0x74a>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd08      	ble.n	800927a <_dtoa_r+0x74a>
 8009268:	42b3      	cmp	r3, r6
 800926a:	9a08      	ldr	r2, [sp, #32]
 800926c:	bfa8      	it	ge
 800926e:	4633      	movge	r3, r6
 8009270:	eba8 0803 	sub.w	r8, r8, r3
 8009274:	1af6      	subs	r6, r6, r3
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800927c:	b1f3      	cbz	r3, 80092bc <_dtoa_r+0x78c>
 800927e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80b7 	beq.w	80093f4 <_dtoa_r+0x8c4>
 8009286:	b18c      	cbz	r4, 80092ac <_dtoa_r+0x77c>
 8009288:	4629      	mov	r1, r5
 800928a:	4622      	mov	r2, r4
 800928c:	4658      	mov	r0, fp
 800928e:	f000 fc11 	bl	8009ab4 <__pow5mult>
 8009292:	464a      	mov	r2, r9
 8009294:	4601      	mov	r1, r0
 8009296:	4605      	mov	r5, r0
 8009298:	4658      	mov	r0, fp
 800929a:	f000 fb61 	bl	8009960 <__multiply>
 800929e:	4649      	mov	r1, r9
 80092a0:	9004      	str	r0, [sp, #16]
 80092a2:	4658      	mov	r0, fp
 80092a4:	f000 fa92 	bl	80097cc <_Bfree>
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	4699      	mov	r9, r3
 80092ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ae:	1b1a      	subs	r2, r3, r4
 80092b0:	d004      	beq.n	80092bc <_dtoa_r+0x78c>
 80092b2:	4649      	mov	r1, r9
 80092b4:	4658      	mov	r0, fp
 80092b6:	f000 fbfd 	bl	8009ab4 <__pow5mult>
 80092ba:	4681      	mov	r9, r0
 80092bc:	2101      	movs	r1, #1
 80092be:	4658      	mov	r0, fp
 80092c0:	f000 fb38 	bl	8009934 <__i2b>
 80092c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092c6:	4604      	mov	r4, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 81cf 	beq.w	800966c <_dtoa_r+0xb3c>
 80092ce:	461a      	mov	r2, r3
 80092d0:	4601      	mov	r1, r0
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 fbee 	bl	8009ab4 <__pow5mult>
 80092d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092da:	2b01      	cmp	r3, #1
 80092dc:	4604      	mov	r4, r0
 80092de:	f300 8095 	bgt.w	800940c <_dtoa_r+0x8dc>
 80092e2:	9b02      	ldr	r3, [sp, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 8087 	bne.w	80093f8 <_dtoa_r+0x8c8>
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f040 8089 	bne.w	8009408 <_dtoa_r+0x8d8>
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092fc:	0d1b      	lsrs	r3, r3, #20
 80092fe:	051b      	lsls	r3, r3, #20
 8009300:	b12b      	cbz	r3, 800930e <_dtoa_r+0x7de>
 8009302:	9b08      	ldr	r3, [sp, #32]
 8009304:	3301      	adds	r3, #1
 8009306:	9308      	str	r3, [sp, #32]
 8009308:	f108 0801 	add.w	r8, r8, #1
 800930c:	2301      	movs	r3, #1
 800930e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 81b0 	beq.w	8009678 <_dtoa_r+0xb48>
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800931e:	6918      	ldr	r0, [r3, #16]
 8009320:	f000 fabc 	bl	800989c <__hi0bits>
 8009324:	f1c0 0020 	rsb	r0, r0, #32
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	4418      	add	r0, r3
 800932c:	f010 001f 	ands.w	r0, r0, #31
 8009330:	d077      	beq.n	8009422 <_dtoa_r+0x8f2>
 8009332:	f1c0 0320 	rsb	r3, r0, #32
 8009336:	2b04      	cmp	r3, #4
 8009338:	dd6b      	ble.n	8009412 <_dtoa_r+0x8e2>
 800933a:	9b08      	ldr	r3, [sp, #32]
 800933c:	f1c0 001c 	rsb	r0, r0, #28
 8009340:	4403      	add	r3, r0
 8009342:	4480      	add	r8, r0
 8009344:	4406      	add	r6, r0
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	f1b8 0f00 	cmp.w	r8, #0
 800934c:	dd05      	ble.n	800935a <_dtoa_r+0x82a>
 800934e:	4649      	mov	r1, r9
 8009350:	4642      	mov	r2, r8
 8009352:	4658      	mov	r0, fp
 8009354:	f000 fc08 	bl	8009b68 <__lshift>
 8009358:	4681      	mov	r9, r0
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	2b00      	cmp	r3, #0
 800935e:	dd05      	ble.n	800936c <_dtoa_r+0x83c>
 8009360:	4621      	mov	r1, r4
 8009362:	461a      	mov	r2, r3
 8009364:	4658      	mov	r0, fp
 8009366:	f000 fbff 	bl	8009b68 <__lshift>
 800936a:	4604      	mov	r4, r0
 800936c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800936e:	2b00      	cmp	r3, #0
 8009370:	d059      	beq.n	8009426 <_dtoa_r+0x8f6>
 8009372:	4621      	mov	r1, r4
 8009374:	4648      	mov	r0, r9
 8009376:	f000 fc63 	bl	8009c40 <__mcmp>
 800937a:	2800      	cmp	r0, #0
 800937c:	da53      	bge.n	8009426 <_dtoa_r+0x8f6>
 800937e:	1e7b      	subs	r3, r7, #1
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	4649      	mov	r1, r9
 8009384:	2300      	movs	r3, #0
 8009386:	220a      	movs	r2, #10
 8009388:	4658      	mov	r0, fp
 800938a:	f000 fa41 	bl	8009810 <__multadd>
 800938e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009390:	4681      	mov	r9, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8172 	beq.w	800967c <_dtoa_r+0xb4c>
 8009398:	2300      	movs	r3, #0
 800939a:	4629      	mov	r1, r5
 800939c:	220a      	movs	r2, #10
 800939e:	4658      	mov	r0, fp
 80093a0:	f000 fa36 	bl	8009810 <__multadd>
 80093a4:	9b00      	ldr	r3, [sp, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	4605      	mov	r5, r0
 80093aa:	dc67      	bgt.n	800947c <_dtoa_r+0x94c>
 80093ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	dc41      	bgt.n	8009436 <_dtoa_r+0x906>
 80093b2:	e063      	b.n	800947c <_dtoa_r+0x94c>
 80093b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093ba:	e746      	b.n	800924a <_dtoa_r+0x71a>
 80093bc:	9b07      	ldr	r3, [sp, #28]
 80093be:	1e5c      	subs	r4, r3, #1
 80093c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093c2:	42a3      	cmp	r3, r4
 80093c4:	bfbf      	itttt	lt
 80093c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80093c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80093ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80093cc:	1ae3      	sublt	r3, r4, r3
 80093ce:	bfb4      	ite	lt
 80093d0:	18d2      	addlt	r2, r2, r3
 80093d2:	1b1c      	subge	r4, r3, r4
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	bfbc      	itt	lt
 80093d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80093da:	2400      	movlt	r4, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bfb5      	itete	lt
 80093e0:	eba8 0603 	sublt.w	r6, r8, r3
 80093e4:	9b07      	ldrge	r3, [sp, #28]
 80093e6:	2300      	movlt	r3, #0
 80093e8:	4646      	movge	r6, r8
 80093ea:	e730      	b.n	800924e <_dtoa_r+0x71e>
 80093ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80093f0:	4646      	mov	r6, r8
 80093f2:	e735      	b.n	8009260 <_dtoa_r+0x730>
 80093f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093f6:	e75c      	b.n	80092b2 <_dtoa_r+0x782>
 80093f8:	2300      	movs	r3, #0
 80093fa:	e788      	b.n	800930e <_dtoa_r+0x7de>
 80093fc:	3fe00000 	.word	0x3fe00000
 8009400:	40240000 	.word	0x40240000
 8009404:	40140000 	.word	0x40140000
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	e780      	b.n	800930e <_dtoa_r+0x7de>
 800940c:	2300      	movs	r3, #0
 800940e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009410:	e782      	b.n	8009318 <_dtoa_r+0x7e8>
 8009412:	d099      	beq.n	8009348 <_dtoa_r+0x818>
 8009414:	9a08      	ldr	r2, [sp, #32]
 8009416:	331c      	adds	r3, #28
 8009418:	441a      	add	r2, r3
 800941a:	4498      	add	r8, r3
 800941c:	441e      	add	r6, r3
 800941e:	9208      	str	r2, [sp, #32]
 8009420:	e792      	b.n	8009348 <_dtoa_r+0x818>
 8009422:	4603      	mov	r3, r0
 8009424:	e7f6      	b.n	8009414 <_dtoa_r+0x8e4>
 8009426:	9b07      	ldr	r3, [sp, #28]
 8009428:	9704      	str	r7, [sp, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	dc20      	bgt.n	8009470 <_dtoa_r+0x940>
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009432:	2b02      	cmp	r3, #2
 8009434:	dd1e      	ble.n	8009474 <_dtoa_r+0x944>
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f47f aec0 	bne.w	80091be <_dtoa_r+0x68e>
 800943e:	4621      	mov	r1, r4
 8009440:	2205      	movs	r2, #5
 8009442:	4658      	mov	r0, fp
 8009444:	f000 f9e4 	bl	8009810 <__multadd>
 8009448:	4601      	mov	r1, r0
 800944a:	4604      	mov	r4, r0
 800944c:	4648      	mov	r0, r9
 800944e:	f000 fbf7 	bl	8009c40 <__mcmp>
 8009452:	2800      	cmp	r0, #0
 8009454:	f77f aeb3 	ble.w	80091be <_dtoa_r+0x68e>
 8009458:	4656      	mov	r6, sl
 800945a:	2331      	movs	r3, #49	@ 0x31
 800945c:	f806 3b01 	strb.w	r3, [r6], #1
 8009460:	9b04      	ldr	r3, [sp, #16]
 8009462:	3301      	adds	r3, #1
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	e6ae      	b.n	80091c6 <_dtoa_r+0x696>
 8009468:	9c07      	ldr	r4, [sp, #28]
 800946a:	9704      	str	r7, [sp, #16]
 800946c:	4625      	mov	r5, r4
 800946e:	e7f3      	b.n	8009458 <_dtoa_r+0x928>
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 8104 	beq.w	8009684 <_dtoa_r+0xb54>
 800947c:	2e00      	cmp	r6, #0
 800947e:	dd05      	ble.n	800948c <_dtoa_r+0x95c>
 8009480:	4629      	mov	r1, r5
 8009482:	4632      	mov	r2, r6
 8009484:	4658      	mov	r0, fp
 8009486:	f000 fb6f 	bl	8009b68 <__lshift>
 800948a:	4605      	mov	r5, r0
 800948c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948e:	2b00      	cmp	r3, #0
 8009490:	d05a      	beq.n	8009548 <_dtoa_r+0xa18>
 8009492:	6869      	ldr	r1, [r5, #4]
 8009494:	4658      	mov	r0, fp
 8009496:	f000 f959 	bl	800974c <_Balloc>
 800949a:	4606      	mov	r6, r0
 800949c:	b928      	cbnz	r0, 80094aa <_dtoa_r+0x97a>
 800949e:	4b84      	ldr	r3, [pc, #528]	@ (80096b0 <_dtoa_r+0xb80>)
 80094a0:	4602      	mov	r2, r0
 80094a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094a6:	f7ff bb5a 	b.w	8008b5e <_dtoa_r+0x2e>
 80094aa:	692a      	ldr	r2, [r5, #16]
 80094ac:	3202      	adds	r2, #2
 80094ae:	0092      	lsls	r2, r2, #2
 80094b0:	f105 010c 	add.w	r1, r5, #12
 80094b4:	300c      	adds	r0, #12
 80094b6:	f000 ff3d 	bl	800a334 <memcpy>
 80094ba:	2201      	movs	r2, #1
 80094bc:	4631      	mov	r1, r6
 80094be:	4658      	mov	r0, fp
 80094c0:	f000 fb52 	bl	8009b68 <__lshift>
 80094c4:	f10a 0301 	add.w	r3, sl, #1
 80094c8:	9307      	str	r3, [sp, #28]
 80094ca:	9b00      	ldr	r3, [sp, #0]
 80094cc:	4453      	add	r3, sl
 80094ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094d0:	9b02      	ldr	r3, [sp, #8]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	462f      	mov	r7, r5
 80094d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094da:	4605      	mov	r5, r0
 80094dc:	9b07      	ldr	r3, [sp, #28]
 80094de:	4621      	mov	r1, r4
 80094e0:	3b01      	subs	r3, #1
 80094e2:	4648      	mov	r0, r9
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	f7ff fa9a 	bl	8008a1e <quorem>
 80094ea:	4639      	mov	r1, r7
 80094ec:	9002      	str	r0, [sp, #8]
 80094ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094f2:	4648      	mov	r0, r9
 80094f4:	f000 fba4 	bl	8009c40 <__mcmp>
 80094f8:	462a      	mov	r2, r5
 80094fa:	9008      	str	r0, [sp, #32]
 80094fc:	4621      	mov	r1, r4
 80094fe:	4658      	mov	r0, fp
 8009500:	f000 fbba 	bl	8009c78 <__mdiff>
 8009504:	68c2      	ldr	r2, [r0, #12]
 8009506:	4606      	mov	r6, r0
 8009508:	bb02      	cbnz	r2, 800954c <_dtoa_r+0xa1c>
 800950a:	4601      	mov	r1, r0
 800950c:	4648      	mov	r0, r9
 800950e:	f000 fb97 	bl	8009c40 <__mcmp>
 8009512:	4602      	mov	r2, r0
 8009514:	4631      	mov	r1, r6
 8009516:	4658      	mov	r0, fp
 8009518:	920e      	str	r2, [sp, #56]	@ 0x38
 800951a:	f000 f957 	bl	80097cc <_Bfree>
 800951e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009522:	9e07      	ldr	r6, [sp, #28]
 8009524:	ea43 0102 	orr.w	r1, r3, r2
 8009528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800952a:	4319      	orrs	r1, r3
 800952c:	d110      	bne.n	8009550 <_dtoa_r+0xa20>
 800952e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009532:	d029      	beq.n	8009588 <_dtoa_r+0xa58>
 8009534:	9b08      	ldr	r3, [sp, #32]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd02      	ble.n	8009540 <_dtoa_r+0xa10>
 800953a:	9b02      	ldr	r3, [sp, #8]
 800953c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009540:	9b00      	ldr	r3, [sp, #0]
 8009542:	f883 8000 	strb.w	r8, [r3]
 8009546:	e63f      	b.n	80091c8 <_dtoa_r+0x698>
 8009548:	4628      	mov	r0, r5
 800954a:	e7bb      	b.n	80094c4 <_dtoa_r+0x994>
 800954c:	2201      	movs	r2, #1
 800954e:	e7e1      	b.n	8009514 <_dtoa_r+0x9e4>
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	db04      	blt.n	8009560 <_dtoa_r+0xa30>
 8009556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009558:	430b      	orrs	r3, r1
 800955a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800955c:	430b      	orrs	r3, r1
 800955e:	d120      	bne.n	80095a2 <_dtoa_r+0xa72>
 8009560:	2a00      	cmp	r2, #0
 8009562:	dded      	ble.n	8009540 <_dtoa_r+0xa10>
 8009564:	4649      	mov	r1, r9
 8009566:	2201      	movs	r2, #1
 8009568:	4658      	mov	r0, fp
 800956a:	f000 fafd 	bl	8009b68 <__lshift>
 800956e:	4621      	mov	r1, r4
 8009570:	4681      	mov	r9, r0
 8009572:	f000 fb65 	bl	8009c40 <__mcmp>
 8009576:	2800      	cmp	r0, #0
 8009578:	dc03      	bgt.n	8009582 <_dtoa_r+0xa52>
 800957a:	d1e1      	bne.n	8009540 <_dtoa_r+0xa10>
 800957c:	f018 0f01 	tst.w	r8, #1
 8009580:	d0de      	beq.n	8009540 <_dtoa_r+0xa10>
 8009582:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009586:	d1d8      	bne.n	800953a <_dtoa_r+0xa0a>
 8009588:	9a00      	ldr	r2, [sp, #0]
 800958a:	2339      	movs	r3, #57	@ 0x39
 800958c:	7013      	strb	r3, [r2, #0]
 800958e:	4633      	mov	r3, r6
 8009590:	461e      	mov	r6, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009598:	2a39      	cmp	r2, #57	@ 0x39
 800959a:	d052      	beq.n	8009642 <_dtoa_r+0xb12>
 800959c:	3201      	adds	r2, #1
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e612      	b.n	80091c8 <_dtoa_r+0x698>
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	dd07      	ble.n	80095b6 <_dtoa_r+0xa86>
 80095a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095aa:	d0ed      	beq.n	8009588 <_dtoa_r+0xa58>
 80095ac:	9a00      	ldr	r2, [sp, #0]
 80095ae:	f108 0301 	add.w	r3, r8, #1
 80095b2:	7013      	strb	r3, [r2, #0]
 80095b4:	e608      	b.n	80091c8 <_dtoa_r+0x698>
 80095b6:	9b07      	ldr	r3, [sp, #28]
 80095b8:	9a07      	ldr	r2, [sp, #28]
 80095ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d028      	beq.n	8009616 <_dtoa_r+0xae6>
 80095c4:	4649      	mov	r1, r9
 80095c6:	2300      	movs	r3, #0
 80095c8:	220a      	movs	r2, #10
 80095ca:	4658      	mov	r0, fp
 80095cc:	f000 f920 	bl	8009810 <__multadd>
 80095d0:	42af      	cmp	r7, r5
 80095d2:	4681      	mov	r9, r0
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	f04f 020a 	mov.w	r2, #10
 80095dc:	4639      	mov	r1, r7
 80095de:	4658      	mov	r0, fp
 80095e0:	d107      	bne.n	80095f2 <_dtoa_r+0xac2>
 80095e2:	f000 f915 	bl	8009810 <__multadd>
 80095e6:	4607      	mov	r7, r0
 80095e8:	4605      	mov	r5, r0
 80095ea:	9b07      	ldr	r3, [sp, #28]
 80095ec:	3301      	adds	r3, #1
 80095ee:	9307      	str	r3, [sp, #28]
 80095f0:	e774      	b.n	80094dc <_dtoa_r+0x9ac>
 80095f2:	f000 f90d 	bl	8009810 <__multadd>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4607      	mov	r7, r0
 80095fa:	2300      	movs	r3, #0
 80095fc:	220a      	movs	r2, #10
 80095fe:	4658      	mov	r0, fp
 8009600:	f000 f906 	bl	8009810 <__multadd>
 8009604:	4605      	mov	r5, r0
 8009606:	e7f0      	b.n	80095ea <_dtoa_r+0xaba>
 8009608:	9b00      	ldr	r3, [sp, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	bfcc      	ite	gt
 800960e:	461e      	movgt	r6, r3
 8009610:	2601      	movle	r6, #1
 8009612:	4456      	add	r6, sl
 8009614:	2700      	movs	r7, #0
 8009616:	4649      	mov	r1, r9
 8009618:	2201      	movs	r2, #1
 800961a:	4658      	mov	r0, fp
 800961c:	f000 faa4 	bl	8009b68 <__lshift>
 8009620:	4621      	mov	r1, r4
 8009622:	4681      	mov	r9, r0
 8009624:	f000 fb0c 	bl	8009c40 <__mcmp>
 8009628:	2800      	cmp	r0, #0
 800962a:	dcb0      	bgt.n	800958e <_dtoa_r+0xa5e>
 800962c:	d102      	bne.n	8009634 <_dtoa_r+0xb04>
 800962e:	f018 0f01 	tst.w	r8, #1
 8009632:	d1ac      	bne.n	800958e <_dtoa_r+0xa5e>
 8009634:	4633      	mov	r3, r6
 8009636:	461e      	mov	r6, r3
 8009638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800963c:	2a30      	cmp	r2, #48	@ 0x30
 800963e:	d0fa      	beq.n	8009636 <_dtoa_r+0xb06>
 8009640:	e5c2      	b.n	80091c8 <_dtoa_r+0x698>
 8009642:	459a      	cmp	sl, r3
 8009644:	d1a4      	bne.n	8009590 <_dtoa_r+0xa60>
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	3301      	adds	r3, #1
 800964a:	9304      	str	r3, [sp, #16]
 800964c:	2331      	movs	r3, #49	@ 0x31
 800964e:	f88a 3000 	strb.w	r3, [sl]
 8009652:	e5b9      	b.n	80091c8 <_dtoa_r+0x698>
 8009654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009656:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096b4 <_dtoa_r+0xb84>
 800965a:	b11b      	cbz	r3, 8009664 <_dtoa_r+0xb34>
 800965c:	f10a 0308 	add.w	r3, sl, #8
 8009660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	4650      	mov	r0, sl
 8009666:	b019      	add	sp, #100	@ 0x64
 8009668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966e:	2b01      	cmp	r3, #1
 8009670:	f77f ae37 	ble.w	80092e2 <_dtoa_r+0x7b2>
 8009674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009676:	930a      	str	r3, [sp, #40]	@ 0x28
 8009678:	2001      	movs	r0, #1
 800967a:	e655      	b.n	8009328 <_dtoa_r+0x7f8>
 800967c:	9b00      	ldr	r3, [sp, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f77f aed6 	ble.w	8009430 <_dtoa_r+0x900>
 8009684:	4656      	mov	r6, sl
 8009686:	4621      	mov	r1, r4
 8009688:	4648      	mov	r0, r9
 800968a:	f7ff f9c8 	bl	8008a1e <quorem>
 800968e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009692:	f806 8b01 	strb.w	r8, [r6], #1
 8009696:	9b00      	ldr	r3, [sp, #0]
 8009698:	eba6 020a 	sub.w	r2, r6, sl
 800969c:	4293      	cmp	r3, r2
 800969e:	ddb3      	ble.n	8009608 <_dtoa_r+0xad8>
 80096a0:	4649      	mov	r1, r9
 80096a2:	2300      	movs	r3, #0
 80096a4:	220a      	movs	r2, #10
 80096a6:	4658      	mov	r0, fp
 80096a8:	f000 f8b2 	bl	8009810 <__multadd>
 80096ac:	4681      	mov	r9, r0
 80096ae:	e7ea      	b.n	8009686 <_dtoa_r+0xb56>
 80096b0:	0800a920 	.word	0x0800a920
 80096b4:	0800a8a4 	.word	0x0800a8a4

080096b8 <_free_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4605      	mov	r5, r0
 80096bc:	2900      	cmp	r1, #0
 80096be:	d041      	beq.n	8009744 <_free_r+0x8c>
 80096c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c4:	1f0c      	subs	r4, r1, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bfb8      	it	lt
 80096ca:	18e4      	addlt	r4, r4, r3
 80096cc:	f7fe faaa 	bl	8007c24 <__malloc_lock>
 80096d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009748 <_free_r+0x90>)
 80096d2:	6813      	ldr	r3, [r2, #0]
 80096d4:	b933      	cbnz	r3, 80096e4 <_free_r+0x2c>
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	6014      	str	r4, [r2, #0]
 80096da:	4628      	mov	r0, r5
 80096dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e0:	f7fe baa6 	b.w	8007c30 <__malloc_unlock>
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	d908      	bls.n	80096fa <_free_r+0x42>
 80096e8:	6820      	ldr	r0, [r4, #0]
 80096ea:	1821      	adds	r1, r4, r0
 80096ec:	428b      	cmp	r3, r1
 80096ee:	bf01      	itttt	eq
 80096f0:	6819      	ldreq	r1, [r3, #0]
 80096f2:	685b      	ldreq	r3, [r3, #4]
 80096f4:	1809      	addeq	r1, r1, r0
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	e7ed      	b.n	80096d6 <_free_r+0x1e>
 80096fa:	461a      	mov	r2, r3
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	b10b      	cbz	r3, 8009704 <_free_r+0x4c>
 8009700:	42a3      	cmp	r3, r4
 8009702:	d9fa      	bls.n	80096fa <_free_r+0x42>
 8009704:	6811      	ldr	r1, [r2, #0]
 8009706:	1850      	adds	r0, r2, r1
 8009708:	42a0      	cmp	r0, r4
 800970a:	d10b      	bne.n	8009724 <_free_r+0x6c>
 800970c:	6820      	ldr	r0, [r4, #0]
 800970e:	4401      	add	r1, r0
 8009710:	1850      	adds	r0, r2, r1
 8009712:	4283      	cmp	r3, r0
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	d1e0      	bne.n	80096da <_free_r+0x22>
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	6053      	str	r3, [r2, #4]
 800971e:	4408      	add	r0, r1
 8009720:	6010      	str	r0, [r2, #0]
 8009722:	e7da      	b.n	80096da <_free_r+0x22>
 8009724:	d902      	bls.n	800972c <_free_r+0x74>
 8009726:	230c      	movs	r3, #12
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	e7d6      	b.n	80096da <_free_r+0x22>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	1821      	adds	r1, r4, r0
 8009730:	428b      	cmp	r3, r1
 8009732:	bf04      	itt	eq
 8009734:	6819      	ldreq	r1, [r3, #0]
 8009736:	685b      	ldreq	r3, [r3, #4]
 8009738:	6063      	str	r3, [r4, #4]
 800973a:	bf04      	itt	eq
 800973c:	1809      	addeq	r1, r1, r0
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	6054      	str	r4, [r2, #4]
 8009742:	e7ca      	b.n	80096da <_free_r+0x22>
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	bf00      	nop
 8009748:	200005f8 	.word	0x200005f8

0800974c <_Balloc>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	69c6      	ldr	r6, [r0, #28]
 8009750:	4604      	mov	r4, r0
 8009752:	460d      	mov	r5, r1
 8009754:	b976      	cbnz	r6, 8009774 <_Balloc+0x28>
 8009756:	2010      	movs	r0, #16
 8009758:	f7fe f9ba 	bl	8007ad0 <malloc>
 800975c:	4602      	mov	r2, r0
 800975e:	61e0      	str	r0, [r4, #28]
 8009760:	b920      	cbnz	r0, 800976c <_Balloc+0x20>
 8009762:	4b18      	ldr	r3, [pc, #96]	@ (80097c4 <_Balloc+0x78>)
 8009764:	4818      	ldr	r0, [pc, #96]	@ (80097c8 <_Balloc+0x7c>)
 8009766:	216b      	movs	r1, #107	@ 0x6b
 8009768:	f000 fdf2 	bl	800a350 <__assert_func>
 800976c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009770:	6006      	str	r6, [r0, #0]
 8009772:	60c6      	str	r6, [r0, #12]
 8009774:	69e6      	ldr	r6, [r4, #28]
 8009776:	68f3      	ldr	r3, [r6, #12]
 8009778:	b183      	cbz	r3, 800979c <_Balloc+0x50>
 800977a:	69e3      	ldr	r3, [r4, #28]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009782:	b9b8      	cbnz	r0, 80097b4 <_Balloc+0x68>
 8009784:	2101      	movs	r1, #1
 8009786:	fa01 f605 	lsl.w	r6, r1, r5
 800978a:	1d72      	adds	r2, r6, #5
 800978c:	0092      	lsls	r2, r2, #2
 800978e:	4620      	mov	r0, r4
 8009790:	f000 fdfc 	bl	800a38c <_calloc_r>
 8009794:	b160      	cbz	r0, 80097b0 <_Balloc+0x64>
 8009796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800979a:	e00e      	b.n	80097ba <_Balloc+0x6e>
 800979c:	2221      	movs	r2, #33	@ 0x21
 800979e:	2104      	movs	r1, #4
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fdf3 	bl	800a38c <_calloc_r>
 80097a6:	69e3      	ldr	r3, [r4, #28]
 80097a8:	60f0      	str	r0, [r6, #12]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e4      	bne.n	800977a <_Balloc+0x2e>
 80097b0:	2000      	movs	r0, #0
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	6802      	ldr	r2, [r0, #0]
 80097b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097ba:	2300      	movs	r3, #0
 80097bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097c0:	e7f7      	b.n	80097b2 <_Balloc+0x66>
 80097c2:	bf00      	nop
 80097c4:	0800a8b1 	.word	0x0800a8b1
 80097c8:	0800a931 	.word	0x0800a931

080097cc <_Bfree>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	69c6      	ldr	r6, [r0, #28]
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	b976      	cbnz	r6, 80097f4 <_Bfree+0x28>
 80097d6:	2010      	movs	r0, #16
 80097d8:	f7fe f97a 	bl	8007ad0 <malloc>
 80097dc:	4602      	mov	r2, r0
 80097de:	61e8      	str	r0, [r5, #28]
 80097e0:	b920      	cbnz	r0, 80097ec <_Bfree+0x20>
 80097e2:	4b09      	ldr	r3, [pc, #36]	@ (8009808 <_Bfree+0x3c>)
 80097e4:	4809      	ldr	r0, [pc, #36]	@ (800980c <_Bfree+0x40>)
 80097e6:	218f      	movs	r1, #143	@ 0x8f
 80097e8:	f000 fdb2 	bl	800a350 <__assert_func>
 80097ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f0:	6006      	str	r6, [r0, #0]
 80097f2:	60c6      	str	r6, [r0, #12]
 80097f4:	b13c      	cbz	r4, 8009806 <_Bfree+0x3a>
 80097f6:	69eb      	ldr	r3, [r5, #28]
 80097f8:	6862      	ldr	r2, [r4, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009800:	6021      	str	r1, [r4, #0]
 8009802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	0800a8b1 	.word	0x0800a8b1
 800980c:	0800a931 	.word	0x0800a931

08009810 <__multadd>:
 8009810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	690d      	ldr	r5, [r1, #16]
 8009816:	4607      	mov	r7, r0
 8009818:	460c      	mov	r4, r1
 800981a:	461e      	mov	r6, r3
 800981c:	f101 0c14 	add.w	ip, r1, #20
 8009820:	2000      	movs	r0, #0
 8009822:	f8dc 3000 	ldr.w	r3, [ip]
 8009826:	b299      	uxth	r1, r3
 8009828:	fb02 6101 	mla	r1, r2, r1, r6
 800982c:	0c1e      	lsrs	r6, r3, #16
 800982e:	0c0b      	lsrs	r3, r1, #16
 8009830:	fb02 3306 	mla	r3, r2, r6, r3
 8009834:	b289      	uxth	r1, r1
 8009836:	3001      	adds	r0, #1
 8009838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800983c:	4285      	cmp	r5, r0
 800983e:	f84c 1b04 	str.w	r1, [ip], #4
 8009842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009846:	dcec      	bgt.n	8009822 <__multadd+0x12>
 8009848:	b30e      	cbz	r6, 800988e <__multadd+0x7e>
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	42ab      	cmp	r3, r5
 800984e:	dc19      	bgt.n	8009884 <__multadd+0x74>
 8009850:	6861      	ldr	r1, [r4, #4]
 8009852:	4638      	mov	r0, r7
 8009854:	3101      	adds	r1, #1
 8009856:	f7ff ff79 	bl	800974c <_Balloc>
 800985a:	4680      	mov	r8, r0
 800985c:	b928      	cbnz	r0, 800986a <__multadd+0x5a>
 800985e:	4602      	mov	r2, r0
 8009860:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <__multadd+0x84>)
 8009862:	480d      	ldr	r0, [pc, #52]	@ (8009898 <__multadd+0x88>)
 8009864:	21ba      	movs	r1, #186	@ 0xba
 8009866:	f000 fd73 	bl	800a350 <__assert_func>
 800986a:	6922      	ldr	r2, [r4, #16]
 800986c:	3202      	adds	r2, #2
 800986e:	f104 010c 	add.w	r1, r4, #12
 8009872:	0092      	lsls	r2, r2, #2
 8009874:	300c      	adds	r0, #12
 8009876:	f000 fd5d 	bl	800a334 <memcpy>
 800987a:	4621      	mov	r1, r4
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff ffa5 	bl	80097cc <_Bfree>
 8009882:	4644      	mov	r4, r8
 8009884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009888:	3501      	adds	r5, #1
 800988a:	615e      	str	r6, [r3, #20]
 800988c:	6125      	str	r5, [r4, #16]
 800988e:	4620      	mov	r0, r4
 8009890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009894:	0800a920 	.word	0x0800a920
 8009898:	0800a931 	.word	0x0800a931

0800989c <__hi0bits>:
 800989c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80098a0:	4603      	mov	r3, r0
 80098a2:	bf36      	itet	cc
 80098a4:	0403      	lslcc	r3, r0, #16
 80098a6:	2000      	movcs	r0, #0
 80098a8:	2010      	movcc	r0, #16
 80098aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098ae:	bf3c      	itt	cc
 80098b0:	021b      	lslcc	r3, r3, #8
 80098b2:	3008      	addcc	r0, #8
 80098b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098b8:	bf3c      	itt	cc
 80098ba:	011b      	lslcc	r3, r3, #4
 80098bc:	3004      	addcc	r0, #4
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c2:	bf3c      	itt	cc
 80098c4:	009b      	lslcc	r3, r3, #2
 80098c6:	3002      	addcc	r0, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	db05      	blt.n	80098d8 <__hi0bits+0x3c>
 80098cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80098d0:	f100 0001 	add.w	r0, r0, #1
 80098d4:	bf08      	it	eq
 80098d6:	2020      	moveq	r0, #32
 80098d8:	4770      	bx	lr

080098da <__lo0bits>:
 80098da:	6803      	ldr	r3, [r0, #0]
 80098dc:	4602      	mov	r2, r0
 80098de:	f013 0007 	ands.w	r0, r3, #7
 80098e2:	d00b      	beq.n	80098fc <__lo0bits+0x22>
 80098e4:	07d9      	lsls	r1, r3, #31
 80098e6:	d421      	bmi.n	800992c <__lo0bits+0x52>
 80098e8:	0798      	lsls	r0, r3, #30
 80098ea:	bf49      	itett	mi
 80098ec:	085b      	lsrmi	r3, r3, #1
 80098ee:	089b      	lsrpl	r3, r3, #2
 80098f0:	2001      	movmi	r0, #1
 80098f2:	6013      	strmi	r3, [r2, #0]
 80098f4:	bf5c      	itt	pl
 80098f6:	6013      	strpl	r3, [r2, #0]
 80098f8:	2002      	movpl	r0, #2
 80098fa:	4770      	bx	lr
 80098fc:	b299      	uxth	r1, r3
 80098fe:	b909      	cbnz	r1, 8009904 <__lo0bits+0x2a>
 8009900:	0c1b      	lsrs	r3, r3, #16
 8009902:	2010      	movs	r0, #16
 8009904:	b2d9      	uxtb	r1, r3
 8009906:	b909      	cbnz	r1, 800990c <__lo0bits+0x32>
 8009908:	3008      	adds	r0, #8
 800990a:	0a1b      	lsrs	r3, r3, #8
 800990c:	0719      	lsls	r1, r3, #28
 800990e:	bf04      	itt	eq
 8009910:	091b      	lsreq	r3, r3, #4
 8009912:	3004      	addeq	r0, #4
 8009914:	0799      	lsls	r1, r3, #30
 8009916:	bf04      	itt	eq
 8009918:	089b      	lsreq	r3, r3, #2
 800991a:	3002      	addeq	r0, #2
 800991c:	07d9      	lsls	r1, r3, #31
 800991e:	d403      	bmi.n	8009928 <__lo0bits+0x4e>
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	f100 0001 	add.w	r0, r0, #1
 8009926:	d003      	beq.n	8009930 <__lo0bits+0x56>
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	4770      	bx	lr
 800992c:	2000      	movs	r0, #0
 800992e:	4770      	bx	lr
 8009930:	2020      	movs	r0, #32
 8009932:	4770      	bx	lr

08009934 <__i2b>:
 8009934:	b510      	push	{r4, lr}
 8009936:	460c      	mov	r4, r1
 8009938:	2101      	movs	r1, #1
 800993a:	f7ff ff07 	bl	800974c <_Balloc>
 800993e:	4602      	mov	r2, r0
 8009940:	b928      	cbnz	r0, 800994e <__i2b+0x1a>
 8009942:	4b05      	ldr	r3, [pc, #20]	@ (8009958 <__i2b+0x24>)
 8009944:	4805      	ldr	r0, [pc, #20]	@ (800995c <__i2b+0x28>)
 8009946:	f240 1145 	movw	r1, #325	@ 0x145
 800994a:	f000 fd01 	bl	800a350 <__assert_func>
 800994e:	2301      	movs	r3, #1
 8009950:	6144      	str	r4, [r0, #20]
 8009952:	6103      	str	r3, [r0, #16]
 8009954:	bd10      	pop	{r4, pc}
 8009956:	bf00      	nop
 8009958:	0800a920 	.word	0x0800a920
 800995c:	0800a931 	.word	0x0800a931

08009960 <__multiply>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	4614      	mov	r4, r2
 8009966:	690a      	ldr	r2, [r1, #16]
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	429a      	cmp	r2, r3
 800996c:	bfa8      	it	ge
 800996e:	4623      	movge	r3, r4
 8009970:	460f      	mov	r7, r1
 8009972:	bfa4      	itt	ge
 8009974:	460c      	movge	r4, r1
 8009976:	461f      	movge	r7, r3
 8009978:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800997c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009980:	68a3      	ldr	r3, [r4, #8]
 8009982:	6861      	ldr	r1, [r4, #4]
 8009984:	eb0a 0609 	add.w	r6, sl, r9
 8009988:	42b3      	cmp	r3, r6
 800998a:	b085      	sub	sp, #20
 800998c:	bfb8      	it	lt
 800998e:	3101      	addlt	r1, #1
 8009990:	f7ff fedc 	bl	800974c <_Balloc>
 8009994:	b930      	cbnz	r0, 80099a4 <__multiply+0x44>
 8009996:	4602      	mov	r2, r0
 8009998:	4b44      	ldr	r3, [pc, #272]	@ (8009aac <__multiply+0x14c>)
 800999a:	4845      	ldr	r0, [pc, #276]	@ (8009ab0 <__multiply+0x150>)
 800999c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80099a0:	f000 fcd6 	bl	800a350 <__assert_func>
 80099a4:	f100 0514 	add.w	r5, r0, #20
 80099a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099ac:	462b      	mov	r3, r5
 80099ae:	2200      	movs	r2, #0
 80099b0:	4543      	cmp	r3, r8
 80099b2:	d321      	bcc.n	80099f8 <__multiply+0x98>
 80099b4:	f107 0114 	add.w	r1, r7, #20
 80099b8:	f104 0214 	add.w	r2, r4, #20
 80099bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80099c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80099c4:	9302      	str	r3, [sp, #8]
 80099c6:	1b13      	subs	r3, r2, r4
 80099c8:	3b15      	subs	r3, #21
 80099ca:	f023 0303 	bic.w	r3, r3, #3
 80099ce:	3304      	adds	r3, #4
 80099d0:	f104 0715 	add.w	r7, r4, #21
 80099d4:	42ba      	cmp	r2, r7
 80099d6:	bf38      	it	cc
 80099d8:	2304      	movcc	r3, #4
 80099da:	9301      	str	r3, [sp, #4]
 80099dc:	9b02      	ldr	r3, [sp, #8]
 80099de:	9103      	str	r1, [sp, #12]
 80099e0:	428b      	cmp	r3, r1
 80099e2:	d80c      	bhi.n	80099fe <__multiply+0x9e>
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	dd03      	ble.n	80099f0 <__multiply+0x90>
 80099e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d05b      	beq.n	8009aa8 <__multiply+0x148>
 80099f0:	6106      	str	r6, [r0, #16]
 80099f2:	b005      	add	sp, #20
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	f843 2b04 	str.w	r2, [r3], #4
 80099fc:	e7d8      	b.n	80099b0 <__multiply+0x50>
 80099fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a02:	f1ba 0f00 	cmp.w	sl, #0
 8009a06:	d024      	beq.n	8009a52 <__multiply+0xf2>
 8009a08:	f104 0e14 	add.w	lr, r4, #20
 8009a0c:	46a9      	mov	r9, r5
 8009a0e:	f04f 0c00 	mov.w	ip, #0
 8009a12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a16:	f8d9 3000 	ldr.w	r3, [r9]
 8009a1a:	fa1f fb87 	uxth.w	fp, r7
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009a28:	f8d9 7000 	ldr.w	r7, [r9]
 8009a2c:	4463      	add	r3, ip
 8009a2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009a32:	fb0a c70b 	mla	r7, sl, fp, ip
 8009a36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009a40:	4572      	cmp	r2, lr
 8009a42:	f849 3b04 	str.w	r3, [r9], #4
 8009a46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009a4a:	d8e2      	bhi.n	8009a12 <__multiply+0xb2>
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	f845 c003 	str.w	ip, [r5, r3]
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a58:	3104      	adds	r1, #4
 8009a5a:	f1b9 0f00 	cmp.w	r9, #0
 8009a5e:	d021      	beq.n	8009aa4 <__multiply+0x144>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	f104 0c14 	add.w	ip, r4, #20
 8009a66:	46ae      	mov	lr, r5
 8009a68:	f04f 0a00 	mov.w	sl, #0
 8009a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8009a70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009a74:	fb09 770b 	mla	r7, r9, fp, r7
 8009a78:	4457      	add	r7, sl
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009a80:	f84e 3b04 	str.w	r3, [lr], #4
 8009a84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a8c:	f8be 3000 	ldrh.w	r3, [lr]
 8009a90:	fb09 330a 	mla	r3, r9, sl, r3
 8009a94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009a98:	4562      	cmp	r2, ip
 8009a9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a9e:	d8e5      	bhi.n	8009a6c <__multiply+0x10c>
 8009aa0:	9f01      	ldr	r7, [sp, #4]
 8009aa2:	51eb      	str	r3, [r5, r7]
 8009aa4:	3504      	adds	r5, #4
 8009aa6:	e799      	b.n	80099dc <__multiply+0x7c>
 8009aa8:	3e01      	subs	r6, #1
 8009aaa:	e79b      	b.n	80099e4 <__multiply+0x84>
 8009aac:	0800a920 	.word	0x0800a920
 8009ab0:	0800a931 	.word	0x0800a931

08009ab4 <__pow5mult>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	4615      	mov	r5, r2
 8009aba:	f012 0203 	ands.w	r2, r2, #3
 8009abe:	4607      	mov	r7, r0
 8009ac0:	460e      	mov	r6, r1
 8009ac2:	d007      	beq.n	8009ad4 <__pow5mult+0x20>
 8009ac4:	4c25      	ldr	r4, [pc, #148]	@ (8009b5c <__pow5mult+0xa8>)
 8009ac6:	3a01      	subs	r2, #1
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ace:	f7ff fe9f 	bl	8009810 <__multadd>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	10ad      	asrs	r5, r5, #2
 8009ad6:	d03d      	beq.n	8009b54 <__pow5mult+0xa0>
 8009ad8:	69fc      	ldr	r4, [r7, #28]
 8009ada:	b97c      	cbnz	r4, 8009afc <__pow5mult+0x48>
 8009adc:	2010      	movs	r0, #16
 8009ade:	f7fd fff7 	bl	8007ad0 <malloc>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	61f8      	str	r0, [r7, #28]
 8009ae6:	b928      	cbnz	r0, 8009af4 <__pow5mult+0x40>
 8009ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b60 <__pow5mult+0xac>)
 8009aea:	481e      	ldr	r0, [pc, #120]	@ (8009b64 <__pow5mult+0xb0>)
 8009aec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009af0:	f000 fc2e 	bl	800a350 <__assert_func>
 8009af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009af8:	6004      	str	r4, [r0, #0]
 8009afa:	60c4      	str	r4, [r0, #12]
 8009afc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b04:	b94c      	cbnz	r4, 8009b1a <__pow5mult+0x66>
 8009b06:	f240 2171 	movw	r1, #625	@ 0x271
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff ff12 	bl	8009934 <__i2b>
 8009b10:	2300      	movs	r3, #0
 8009b12:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b16:	4604      	mov	r4, r0
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	f04f 0900 	mov.w	r9, #0
 8009b1e:	07eb      	lsls	r3, r5, #31
 8009b20:	d50a      	bpl.n	8009b38 <__pow5mult+0x84>
 8009b22:	4631      	mov	r1, r6
 8009b24:	4622      	mov	r2, r4
 8009b26:	4638      	mov	r0, r7
 8009b28:	f7ff ff1a 	bl	8009960 <__multiply>
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4680      	mov	r8, r0
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7ff fe4b 	bl	80097cc <_Bfree>
 8009b36:	4646      	mov	r6, r8
 8009b38:	106d      	asrs	r5, r5, #1
 8009b3a:	d00b      	beq.n	8009b54 <__pow5mult+0xa0>
 8009b3c:	6820      	ldr	r0, [r4, #0]
 8009b3e:	b938      	cbnz	r0, 8009b50 <__pow5mult+0x9c>
 8009b40:	4622      	mov	r2, r4
 8009b42:	4621      	mov	r1, r4
 8009b44:	4638      	mov	r0, r7
 8009b46:	f7ff ff0b 	bl	8009960 <__multiply>
 8009b4a:	6020      	str	r0, [r4, #0]
 8009b4c:	f8c0 9000 	str.w	r9, [r0]
 8009b50:	4604      	mov	r4, r0
 8009b52:	e7e4      	b.n	8009b1e <__pow5mult+0x6a>
 8009b54:	4630      	mov	r0, r6
 8009b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800a98c 	.word	0x0800a98c
 8009b60:	0800a8b1 	.word	0x0800a8b1
 8009b64:	0800a931 	.word	0x0800a931

08009b68 <__lshift>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	6849      	ldr	r1, [r1, #4]
 8009b70:	6923      	ldr	r3, [r4, #16]
 8009b72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b76:	68a3      	ldr	r3, [r4, #8]
 8009b78:	4607      	mov	r7, r0
 8009b7a:	4691      	mov	r9, r2
 8009b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b80:	f108 0601 	add.w	r6, r8, #1
 8009b84:	42b3      	cmp	r3, r6
 8009b86:	db0b      	blt.n	8009ba0 <__lshift+0x38>
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7ff fddf 	bl	800974c <_Balloc>
 8009b8e:	4605      	mov	r5, r0
 8009b90:	b948      	cbnz	r0, 8009ba6 <__lshift+0x3e>
 8009b92:	4602      	mov	r2, r0
 8009b94:	4b28      	ldr	r3, [pc, #160]	@ (8009c38 <__lshift+0xd0>)
 8009b96:	4829      	ldr	r0, [pc, #164]	@ (8009c3c <__lshift+0xd4>)
 8009b98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b9c:	f000 fbd8 	bl	800a350 <__assert_func>
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	e7ee      	b.n	8009b84 <__lshift+0x1c>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f100 0114 	add.w	r1, r0, #20
 8009bac:	f100 0210 	add.w	r2, r0, #16
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	4553      	cmp	r3, sl
 8009bb4:	db33      	blt.n	8009c1e <__lshift+0xb6>
 8009bb6:	6920      	ldr	r0, [r4, #16]
 8009bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bbc:	f104 0314 	add.w	r3, r4, #20
 8009bc0:	f019 091f 	ands.w	r9, r9, #31
 8009bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bcc:	d02b      	beq.n	8009c26 <__lshift+0xbe>
 8009bce:	f1c9 0e20 	rsb	lr, r9, #32
 8009bd2:	468a      	mov	sl, r1
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	fa00 f009 	lsl.w	r0, r0, r9
 8009bdc:	4310      	orrs	r0, r2
 8009bde:	f84a 0b04 	str.w	r0, [sl], #4
 8009be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be6:	459c      	cmp	ip, r3
 8009be8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bec:	d8f3      	bhi.n	8009bd6 <__lshift+0x6e>
 8009bee:	ebac 0304 	sub.w	r3, ip, r4
 8009bf2:	3b15      	subs	r3, #21
 8009bf4:	f023 0303 	bic.w	r3, r3, #3
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	f104 0015 	add.w	r0, r4, #21
 8009bfe:	4584      	cmp	ip, r0
 8009c00:	bf38      	it	cc
 8009c02:	2304      	movcc	r3, #4
 8009c04:	50ca      	str	r2, [r1, r3]
 8009c06:	b10a      	cbz	r2, 8009c0c <__lshift+0xa4>
 8009c08:	f108 0602 	add.w	r6, r8, #2
 8009c0c:	3e01      	subs	r6, #1
 8009c0e:	4638      	mov	r0, r7
 8009c10:	612e      	str	r6, [r5, #16]
 8009c12:	4621      	mov	r1, r4
 8009c14:	f7ff fdda 	bl	80097cc <_Bfree>
 8009c18:	4628      	mov	r0, r5
 8009c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c22:	3301      	adds	r3, #1
 8009c24:	e7c5      	b.n	8009bb2 <__lshift+0x4a>
 8009c26:	3904      	subs	r1, #4
 8009c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c30:	459c      	cmp	ip, r3
 8009c32:	d8f9      	bhi.n	8009c28 <__lshift+0xc0>
 8009c34:	e7ea      	b.n	8009c0c <__lshift+0xa4>
 8009c36:	bf00      	nop
 8009c38:	0800a920 	.word	0x0800a920
 8009c3c:	0800a931 	.word	0x0800a931

08009c40 <__mcmp>:
 8009c40:	690a      	ldr	r2, [r1, #16]
 8009c42:	4603      	mov	r3, r0
 8009c44:	6900      	ldr	r0, [r0, #16]
 8009c46:	1a80      	subs	r0, r0, r2
 8009c48:	b530      	push	{r4, r5, lr}
 8009c4a:	d10e      	bne.n	8009c6a <__mcmp+0x2a>
 8009c4c:	3314      	adds	r3, #20
 8009c4e:	3114      	adds	r1, #20
 8009c50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c60:	4295      	cmp	r5, r2
 8009c62:	d003      	beq.n	8009c6c <__mcmp+0x2c>
 8009c64:	d205      	bcs.n	8009c72 <__mcmp+0x32>
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c6a:	bd30      	pop	{r4, r5, pc}
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d3f3      	bcc.n	8009c58 <__mcmp+0x18>
 8009c70:	e7fb      	b.n	8009c6a <__mcmp+0x2a>
 8009c72:	2001      	movs	r0, #1
 8009c74:	e7f9      	b.n	8009c6a <__mcmp+0x2a>
	...

08009c78 <__mdiff>:
 8009c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	4689      	mov	r9, r1
 8009c7e:	4606      	mov	r6, r0
 8009c80:	4611      	mov	r1, r2
 8009c82:	4648      	mov	r0, r9
 8009c84:	4614      	mov	r4, r2
 8009c86:	f7ff ffdb 	bl	8009c40 <__mcmp>
 8009c8a:	1e05      	subs	r5, r0, #0
 8009c8c:	d112      	bne.n	8009cb4 <__mdiff+0x3c>
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4630      	mov	r0, r6
 8009c92:	f7ff fd5b 	bl	800974c <_Balloc>
 8009c96:	4602      	mov	r2, r0
 8009c98:	b928      	cbnz	r0, 8009ca6 <__mdiff+0x2e>
 8009c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8009d98 <__mdiff+0x120>)
 8009c9c:	f240 2137 	movw	r1, #567	@ 0x237
 8009ca0:	483e      	ldr	r0, [pc, #248]	@ (8009d9c <__mdiff+0x124>)
 8009ca2:	f000 fb55 	bl	800a350 <__assert_func>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cac:	4610      	mov	r0, r2
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb4:	bfbc      	itt	lt
 8009cb6:	464b      	movlt	r3, r9
 8009cb8:	46a1      	movlt	r9, r4
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009cc0:	bfba      	itte	lt
 8009cc2:	461c      	movlt	r4, r3
 8009cc4:	2501      	movlt	r5, #1
 8009cc6:	2500      	movge	r5, #0
 8009cc8:	f7ff fd40 	bl	800974c <_Balloc>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	b918      	cbnz	r0, 8009cd8 <__mdiff+0x60>
 8009cd0:	4b31      	ldr	r3, [pc, #196]	@ (8009d98 <__mdiff+0x120>)
 8009cd2:	f240 2145 	movw	r1, #581	@ 0x245
 8009cd6:	e7e3      	b.n	8009ca0 <__mdiff+0x28>
 8009cd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009cdc:	6926      	ldr	r6, [r4, #16]
 8009cde:	60c5      	str	r5, [r0, #12]
 8009ce0:	f109 0310 	add.w	r3, r9, #16
 8009ce4:	f109 0514 	add.w	r5, r9, #20
 8009ce8:	f104 0e14 	add.w	lr, r4, #20
 8009cec:	f100 0b14 	add.w	fp, r0, #20
 8009cf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009cf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	46d9      	mov	r9, fp
 8009cfc:	f04f 0c00 	mov.w	ip, #0
 8009d00:	9b01      	ldr	r3, [sp, #4]
 8009d02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	fa1f f38a 	uxth.w	r3, sl
 8009d10:	4619      	mov	r1, r3
 8009d12:	b283      	uxth	r3, r0
 8009d14:	1acb      	subs	r3, r1, r3
 8009d16:	0c00      	lsrs	r0, r0, #16
 8009d18:	4463      	add	r3, ip
 8009d1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d28:	4576      	cmp	r6, lr
 8009d2a:	f849 3b04 	str.w	r3, [r9], #4
 8009d2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d32:	d8e5      	bhi.n	8009d00 <__mdiff+0x88>
 8009d34:	1b33      	subs	r3, r6, r4
 8009d36:	3b15      	subs	r3, #21
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	3415      	adds	r4, #21
 8009d3e:	3304      	adds	r3, #4
 8009d40:	42a6      	cmp	r6, r4
 8009d42:	bf38      	it	cc
 8009d44:	2304      	movcc	r3, #4
 8009d46:	441d      	add	r5, r3
 8009d48:	445b      	add	r3, fp
 8009d4a:	461e      	mov	r6, r3
 8009d4c:	462c      	mov	r4, r5
 8009d4e:	4544      	cmp	r4, r8
 8009d50:	d30e      	bcc.n	8009d70 <__mdiff+0xf8>
 8009d52:	f108 0103 	add.w	r1, r8, #3
 8009d56:	1b49      	subs	r1, r1, r5
 8009d58:	f021 0103 	bic.w	r1, r1, #3
 8009d5c:	3d03      	subs	r5, #3
 8009d5e:	45a8      	cmp	r8, r5
 8009d60:	bf38      	it	cc
 8009d62:	2100      	movcc	r1, #0
 8009d64:	440b      	add	r3, r1
 8009d66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d6a:	b191      	cbz	r1, 8009d92 <__mdiff+0x11a>
 8009d6c:	6117      	str	r7, [r2, #16]
 8009d6e:	e79d      	b.n	8009cac <__mdiff+0x34>
 8009d70:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d74:	46e6      	mov	lr, ip
 8009d76:	0c08      	lsrs	r0, r1, #16
 8009d78:	fa1c fc81 	uxtah	ip, ip, r1
 8009d7c:	4471      	add	r1, lr
 8009d7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d82:	b289      	uxth	r1, r1
 8009d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d88:	f846 1b04 	str.w	r1, [r6], #4
 8009d8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d90:	e7dd      	b.n	8009d4e <__mdiff+0xd6>
 8009d92:	3f01      	subs	r7, #1
 8009d94:	e7e7      	b.n	8009d66 <__mdiff+0xee>
 8009d96:	bf00      	nop
 8009d98:	0800a920 	.word	0x0800a920
 8009d9c:	0800a931 	.word	0x0800a931

08009da0 <__d2b>:
 8009da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009da4:	460f      	mov	r7, r1
 8009da6:	2101      	movs	r1, #1
 8009da8:	ec59 8b10 	vmov	r8, r9, d0
 8009dac:	4616      	mov	r6, r2
 8009dae:	f7ff fccd 	bl	800974c <_Balloc>
 8009db2:	4604      	mov	r4, r0
 8009db4:	b930      	cbnz	r0, 8009dc4 <__d2b+0x24>
 8009db6:	4602      	mov	r2, r0
 8009db8:	4b23      	ldr	r3, [pc, #140]	@ (8009e48 <__d2b+0xa8>)
 8009dba:	4824      	ldr	r0, [pc, #144]	@ (8009e4c <__d2b+0xac>)
 8009dbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8009dc0:	f000 fac6 	bl	800a350 <__assert_func>
 8009dc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dcc:	b10d      	cbz	r5, 8009dd2 <__d2b+0x32>
 8009dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	f1b8 0300 	subs.w	r3, r8, #0
 8009dd8:	d023      	beq.n	8009e22 <__d2b+0x82>
 8009dda:	4668      	mov	r0, sp
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	f7ff fd7c 	bl	80098da <__lo0bits>
 8009de2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009de6:	b1d0      	cbz	r0, 8009e1e <__d2b+0x7e>
 8009de8:	f1c0 0320 	rsb	r3, r0, #32
 8009dec:	fa02 f303 	lsl.w	r3, r2, r3
 8009df0:	430b      	orrs	r3, r1
 8009df2:	40c2      	lsrs	r2, r0
 8009df4:	6163      	str	r3, [r4, #20]
 8009df6:	9201      	str	r2, [sp, #4]
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	61a3      	str	r3, [r4, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	bf0c      	ite	eq
 8009e00:	2201      	moveq	r2, #1
 8009e02:	2202      	movne	r2, #2
 8009e04:	6122      	str	r2, [r4, #16]
 8009e06:	b1a5      	cbz	r5, 8009e32 <__d2b+0x92>
 8009e08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e0c:	4405      	add	r5, r0
 8009e0e:	603d      	str	r5, [r7, #0]
 8009e10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e14:	6030      	str	r0, [r6, #0]
 8009e16:	4620      	mov	r0, r4
 8009e18:	b003      	add	sp, #12
 8009e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1e:	6161      	str	r1, [r4, #20]
 8009e20:	e7ea      	b.n	8009df8 <__d2b+0x58>
 8009e22:	a801      	add	r0, sp, #4
 8009e24:	f7ff fd59 	bl	80098da <__lo0bits>
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	6163      	str	r3, [r4, #20]
 8009e2c:	3020      	adds	r0, #32
 8009e2e:	2201      	movs	r2, #1
 8009e30:	e7e8      	b.n	8009e04 <__d2b+0x64>
 8009e32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e3a:	6038      	str	r0, [r7, #0]
 8009e3c:	6918      	ldr	r0, [r3, #16]
 8009e3e:	f7ff fd2d 	bl	800989c <__hi0bits>
 8009e42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e46:	e7e5      	b.n	8009e14 <__d2b+0x74>
 8009e48:	0800a920 	.word	0x0800a920
 8009e4c:	0800a931 	.word	0x0800a931

08009e50 <__sfputc_r>:
 8009e50:	6893      	ldr	r3, [r2, #8]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	b410      	push	{r4}
 8009e58:	6093      	str	r3, [r2, #8]
 8009e5a:	da08      	bge.n	8009e6e <__sfputc_r+0x1e>
 8009e5c:	6994      	ldr	r4, [r2, #24]
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	db01      	blt.n	8009e66 <__sfputc_r+0x16>
 8009e62:	290a      	cmp	r1, #10
 8009e64:	d103      	bne.n	8009e6e <__sfputc_r+0x1e>
 8009e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e6a:	f7fe bcb4 	b.w	80087d6 <__swbuf_r>
 8009e6e:	6813      	ldr	r3, [r2, #0]
 8009e70:	1c58      	adds	r0, r3, #1
 8009e72:	6010      	str	r0, [r2, #0]
 8009e74:	7019      	strb	r1, [r3, #0]
 8009e76:	4608      	mov	r0, r1
 8009e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <__sfputs_r>:
 8009e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e80:	4606      	mov	r6, r0
 8009e82:	460f      	mov	r7, r1
 8009e84:	4614      	mov	r4, r2
 8009e86:	18d5      	adds	r5, r2, r3
 8009e88:	42ac      	cmp	r4, r5
 8009e8a:	d101      	bne.n	8009e90 <__sfputs_r+0x12>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e007      	b.n	8009ea0 <__sfputs_r+0x22>
 8009e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e94:	463a      	mov	r2, r7
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7ff ffda 	bl	8009e50 <__sfputc_r>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d1f3      	bne.n	8009e88 <__sfputs_r+0xa>
 8009ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ea4 <_vfiprintf_r>:
 8009ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	b09d      	sub	sp, #116	@ 0x74
 8009eac:	4614      	mov	r4, r2
 8009eae:	4698      	mov	r8, r3
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	b118      	cbz	r0, 8009ebc <_vfiprintf_r+0x18>
 8009eb4:	6a03      	ldr	r3, [r0, #32]
 8009eb6:	b90b      	cbnz	r3, 8009ebc <_vfiprintf_r+0x18>
 8009eb8:	f7fe fba4 	bl	8008604 <__sinit>
 8009ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ebe:	07d9      	lsls	r1, r3, #31
 8009ec0:	d405      	bmi.n	8009ece <_vfiprintf_r+0x2a>
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_vfiprintf_r+0x2a>
 8009ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eca:	f7fe fda6 	bl	8008a1a <__retarget_lock_acquire_recursive>
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	d501      	bpl.n	8009ed8 <_vfiprintf_r+0x34>
 8009ed4:	692b      	ldr	r3, [r5, #16]
 8009ed6:	b99b      	cbnz	r3, 8009f00 <_vfiprintf_r+0x5c>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7fe fcba 	bl	8008854 <__swsetup_r>
 8009ee0:	b170      	cbz	r0, 8009f00 <_vfiprintf_r+0x5c>
 8009ee2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ee4:	07dc      	lsls	r4, r3, #31
 8009ee6:	d504      	bpl.n	8009ef2 <_vfiprintf_r+0x4e>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eec:	b01d      	add	sp, #116	@ 0x74
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	89ab      	ldrh	r3, [r5, #12]
 8009ef4:	0598      	lsls	r0, r3, #22
 8009ef6:	d4f7      	bmi.n	8009ee8 <_vfiprintf_r+0x44>
 8009ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009efa:	f7fe fd8f 	bl	8008a1c <__retarget_lock_release_recursive>
 8009efe:	e7f3      	b.n	8009ee8 <_vfiprintf_r+0x44>
 8009f00:	2300      	movs	r3, #0
 8009f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f04:	2320      	movs	r3, #32
 8009f06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f0e:	2330      	movs	r3, #48	@ 0x30
 8009f10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a0c0 <_vfiprintf_r+0x21c>
 8009f14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f18:	f04f 0901 	mov.w	r9, #1
 8009f1c:	4623      	mov	r3, r4
 8009f1e:	469a      	mov	sl, r3
 8009f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f24:	b10a      	cbz	r2, 8009f2a <_vfiprintf_r+0x86>
 8009f26:	2a25      	cmp	r2, #37	@ 0x25
 8009f28:	d1f9      	bne.n	8009f1e <_vfiprintf_r+0x7a>
 8009f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f2e:	d00b      	beq.n	8009f48 <_vfiprintf_r+0xa4>
 8009f30:	465b      	mov	r3, fp
 8009f32:	4622      	mov	r2, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff ffa1 	bl	8009e7e <__sfputs_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f000 80a7 	beq.w	800a090 <_vfiprintf_r+0x1ec>
 8009f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f44:	445a      	add	r2, fp
 8009f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f48:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 809f 	beq.w	800a090 <_vfiprintf_r+0x1ec>
 8009f52:	2300      	movs	r3, #0
 8009f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f5c:	f10a 0a01 	add.w	sl, sl, #1
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f68:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f6a:	4654      	mov	r4, sl
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f72:	4853      	ldr	r0, [pc, #332]	@ (800a0c0 <_vfiprintf_r+0x21c>)
 8009f74:	f7f6 f954 	bl	8000220 <memchr>
 8009f78:	9a04      	ldr	r2, [sp, #16]
 8009f7a:	b9d8      	cbnz	r0, 8009fb4 <_vfiprintf_r+0x110>
 8009f7c:	06d1      	lsls	r1, r2, #27
 8009f7e:	bf44      	itt	mi
 8009f80:	2320      	movmi	r3, #32
 8009f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f86:	0713      	lsls	r3, r2, #28
 8009f88:	bf44      	itt	mi
 8009f8a:	232b      	movmi	r3, #43	@ 0x2b
 8009f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f90:	f89a 3000 	ldrb.w	r3, [sl]
 8009f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f96:	d015      	beq.n	8009fc4 <_vfiprintf_r+0x120>
 8009f98:	9a07      	ldr	r2, [sp, #28]
 8009f9a:	4654      	mov	r4, sl
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	f04f 0c0a 	mov.w	ip, #10
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa8:	3b30      	subs	r3, #48	@ 0x30
 8009faa:	2b09      	cmp	r3, #9
 8009fac:	d94b      	bls.n	800a046 <_vfiprintf_r+0x1a2>
 8009fae:	b1b0      	cbz	r0, 8009fde <_vfiprintf_r+0x13a>
 8009fb0:	9207      	str	r2, [sp, #28]
 8009fb2:	e014      	b.n	8009fde <_vfiprintf_r+0x13a>
 8009fb4:	eba0 0308 	sub.w	r3, r0, r8
 8009fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	46a2      	mov	sl, r4
 8009fc2:	e7d2      	b.n	8009f6a <_vfiprintf_r+0xc6>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	1d19      	adds	r1, r3, #4
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	9103      	str	r1, [sp, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bfbb      	ittet	lt
 8009fd0:	425b      	neglt	r3, r3
 8009fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd6:	9307      	strge	r3, [sp, #28]
 8009fd8:	9307      	strlt	r3, [sp, #28]
 8009fda:	bfb8      	it	lt
 8009fdc:	9204      	strlt	r2, [sp, #16]
 8009fde:	7823      	ldrb	r3, [r4, #0]
 8009fe0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fe2:	d10a      	bne.n	8009ffa <_vfiprintf_r+0x156>
 8009fe4:	7863      	ldrb	r3, [r4, #1]
 8009fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fe8:	d132      	bne.n	800a050 <_vfiprintf_r+0x1ac>
 8009fea:	9b03      	ldr	r3, [sp, #12]
 8009fec:	1d1a      	adds	r2, r3, #4
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	9203      	str	r2, [sp, #12]
 8009ff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ff6:	3402      	adds	r4, #2
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0d0 <_vfiprintf_r+0x22c>
 8009ffe:	7821      	ldrb	r1, [r4, #0]
 800a000:	2203      	movs	r2, #3
 800a002:	4650      	mov	r0, sl
 800a004:	f7f6 f90c 	bl	8000220 <memchr>
 800a008:	b138      	cbz	r0, 800a01a <_vfiprintf_r+0x176>
 800a00a:	9b04      	ldr	r3, [sp, #16]
 800a00c:	eba0 000a 	sub.w	r0, r0, sl
 800a010:	2240      	movs	r2, #64	@ 0x40
 800a012:	4082      	lsls	r2, r0
 800a014:	4313      	orrs	r3, r2
 800a016:	3401      	adds	r4, #1
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4829      	ldr	r0, [pc, #164]	@ (800a0c4 <_vfiprintf_r+0x220>)
 800a020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a024:	2206      	movs	r2, #6
 800a026:	f7f6 f8fb 	bl	8000220 <memchr>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d03f      	beq.n	800a0ae <_vfiprintf_r+0x20a>
 800a02e:	4b26      	ldr	r3, [pc, #152]	@ (800a0c8 <_vfiprintf_r+0x224>)
 800a030:	bb1b      	cbnz	r3, 800a07a <_vfiprintf_r+0x1d6>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	3307      	adds	r3, #7
 800a036:	f023 0307 	bic.w	r3, r3, #7
 800a03a:	3308      	adds	r3, #8
 800a03c:	9303      	str	r3, [sp, #12]
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	443b      	add	r3, r7
 800a042:	9309      	str	r3, [sp, #36]	@ 0x24
 800a044:	e76a      	b.n	8009f1c <_vfiprintf_r+0x78>
 800a046:	fb0c 3202 	mla	r2, ip, r2, r3
 800a04a:	460c      	mov	r4, r1
 800a04c:	2001      	movs	r0, #1
 800a04e:	e7a8      	b.n	8009fa2 <_vfiprintf_r+0xfe>
 800a050:	2300      	movs	r3, #0
 800a052:	3401      	adds	r4, #1
 800a054:	9305      	str	r3, [sp, #20]
 800a056:	4619      	mov	r1, r3
 800a058:	f04f 0c0a 	mov.w	ip, #10
 800a05c:	4620      	mov	r0, r4
 800a05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a062:	3a30      	subs	r2, #48	@ 0x30
 800a064:	2a09      	cmp	r2, #9
 800a066:	d903      	bls.n	800a070 <_vfiprintf_r+0x1cc>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0c6      	beq.n	8009ffa <_vfiprintf_r+0x156>
 800a06c:	9105      	str	r1, [sp, #20]
 800a06e:	e7c4      	b.n	8009ffa <_vfiprintf_r+0x156>
 800a070:	fb0c 2101 	mla	r1, ip, r1, r2
 800a074:	4604      	mov	r4, r0
 800a076:	2301      	movs	r3, #1
 800a078:	e7f0      	b.n	800a05c <_vfiprintf_r+0x1b8>
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	462a      	mov	r2, r5
 800a080:	4b12      	ldr	r3, [pc, #72]	@ (800a0cc <_vfiprintf_r+0x228>)
 800a082:	a904      	add	r1, sp, #16
 800a084:	4630      	mov	r0, r6
 800a086:	f7fd fe79 	bl	8007d7c <_printf_float>
 800a08a:	4607      	mov	r7, r0
 800a08c:	1c78      	adds	r0, r7, #1
 800a08e:	d1d6      	bne.n	800a03e <_vfiprintf_r+0x19a>
 800a090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a092:	07d9      	lsls	r1, r3, #31
 800a094:	d405      	bmi.n	800a0a2 <_vfiprintf_r+0x1fe>
 800a096:	89ab      	ldrh	r3, [r5, #12]
 800a098:	059a      	lsls	r2, r3, #22
 800a09a:	d402      	bmi.n	800a0a2 <_vfiprintf_r+0x1fe>
 800a09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a09e:	f7fe fcbd 	bl	8008a1c <__retarget_lock_release_recursive>
 800a0a2:	89ab      	ldrh	r3, [r5, #12]
 800a0a4:	065b      	lsls	r3, r3, #25
 800a0a6:	f53f af1f 	bmi.w	8009ee8 <_vfiprintf_r+0x44>
 800a0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0ac:	e71e      	b.n	8009eec <_vfiprintf_r+0x48>
 800a0ae:	ab03      	add	r3, sp, #12
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <_vfiprintf_r+0x228>)
 800a0b6:	a904      	add	r1, sp, #16
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7fe f8f7 	bl	80082ac <_printf_i>
 800a0be:	e7e4      	b.n	800a08a <_vfiprintf_r+0x1e6>
 800a0c0:	0800aa88 	.word	0x0800aa88
 800a0c4:	0800aa92 	.word	0x0800aa92
 800a0c8:	08007d7d 	.word	0x08007d7d
 800a0cc:	08009e7f 	.word	0x08009e7f
 800a0d0:	0800aa8e 	.word	0x0800aa8e

0800a0d4 <__sflush_r>:
 800a0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0dc:	0716      	lsls	r6, r2, #28
 800a0de:	4605      	mov	r5, r0
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	d454      	bmi.n	800a18e <__sflush_r+0xba>
 800a0e4:	684b      	ldr	r3, [r1, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dc02      	bgt.n	800a0f0 <__sflush_r+0x1c>
 800a0ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd48      	ble.n	800a182 <__sflush_r+0xae>
 800a0f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0f2:	2e00      	cmp	r6, #0
 800a0f4:	d045      	beq.n	800a182 <__sflush_r+0xae>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0fc:	682f      	ldr	r7, [r5, #0]
 800a0fe:	6a21      	ldr	r1, [r4, #32]
 800a100:	602b      	str	r3, [r5, #0]
 800a102:	d030      	beq.n	800a166 <__sflush_r+0x92>
 800a104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	0759      	lsls	r1, r3, #29
 800a10a:	d505      	bpl.n	800a118 <__sflush_r+0x44>
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a112:	b10b      	cbz	r3, 800a118 <__sflush_r+0x44>
 800a114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	2300      	movs	r3, #0
 800a11a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a11c:	6a21      	ldr	r1, [r4, #32]
 800a11e:	4628      	mov	r0, r5
 800a120:	47b0      	blx	r6
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	d106      	bne.n	800a136 <__sflush_r+0x62>
 800a128:	6829      	ldr	r1, [r5, #0]
 800a12a:	291d      	cmp	r1, #29
 800a12c:	d82b      	bhi.n	800a186 <__sflush_r+0xb2>
 800a12e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1d8 <__sflush_r+0x104>)
 800a130:	410a      	asrs	r2, r1
 800a132:	07d6      	lsls	r6, r2, #31
 800a134:	d427      	bmi.n	800a186 <__sflush_r+0xb2>
 800a136:	2200      	movs	r2, #0
 800a138:	6062      	str	r2, [r4, #4]
 800a13a:	04d9      	lsls	r1, r3, #19
 800a13c:	6922      	ldr	r2, [r4, #16]
 800a13e:	6022      	str	r2, [r4, #0]
 800a140:	d504      	bpl.n	800a14c <__sflush_r+0x78>
 800a142:	1c42      	adds	r2, r0, #1
 800a144:	d101      	bne.n	800a14a <__sflush_r+0x76>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b903      	cbnz	r3, 800a14c <__sflush_r+0x78>
 800a14a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a14e:	602f      	str	r7, [r5, #0]
 800a150:	b1b9      	cbz	r1, 800a182 <__sflush_r+0xae>
 800a152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a156:	4299      	cmp	r1, r3
 800a158:	d002      	beq.n	800a160 <__sflush_r+0x8c>
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7ff faac 	bl	80096b8 <_free_r>
 800a160:	2300      	movs	r3, #0
 800a162:	6363      	str	r3, [r4, #52]	@ 0x34
 800a164:	e00d      	b.n	800a182 <__sflush_r+0xae>
 800a166:	2301      	movs	r3, #1
 800a168:	4628      	mov	r0, r5
 800a16a:	47b0      	blx	r6
 800a16c:	4602      	mov	r2, r0
 800a16e:	1c50      	adds	r0, r2, #1
 800a170:	d1c9      	bne.n	800a106 <__sflush_r+0x32>
 800a172:	682b      	ldr	r3, [r5, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0c6      	beq.n	800a106 <__sflush_r+0x32>
 800a178:	2b1d      	cmp	r3, #29
 800a17a:	d001      	beq.n	800a180 <__sflush_r+0xac>
 800a17c:	2b16      	cmp	r3, #22
 800a17e:	d11e      	bne.n	800a1be <__sflush_r+0xea>
 800a180:	602f      	str	r7, [r5, #0]
 800a182:	2000      	movs	r0, #0
 800a184:	e022      	b.n	800a1cc <__sflush_r+0xf8>
 800a186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a18a:	b21b      	sxth	r3, r3
 800a18c:	e01b      	b.n	800a1c6 <__sflush_r+0xf2>
 800a18e:	690f      	ldr	r7, [r1, #16]
 800a190:	2f00      	cmp	r7, #0
 800a192:	d0f6      	beq.n	800a182 <__sflush_r+0xae>
 800a194:	0793      	lsls	r3, r2, #30
 800a196:	680e      	ldr	r6, [r1, #0]
 800a198:	bf08      	it	eq
 800a19a:	694b      	ldreq	r3, [r1, #20]
 800a19c:	600f      	str	r7, [r1, #0]
 800a19e:	bf18      	it	ne
 800a1a0:	2300      	movne	r3, #0
 800a1a2:	eba6 0807 	sub.w	r8, r6, r7
 800a1a6:	608b      	str	r3, [r1, #8]
 800a1a8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ac:	dde9      	ble.n	800a182 <__sflush_r+0xae>
 800a1ae:	6a21      	ldr	r1, [r4, #32]
 800a1b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1b2:	4643      	mov	r3, r8
 800a1b4:	463a      	mov	r2, r7
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b0      	blx	r6
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	dc08      	bgt.n	800a1d0 <__sflush_r+0xfc>
 800a1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d0:	4407      	add	r7, r0
 800a1d2:	eba8 0800 	sub.w	r8, r8, r0
 800a1d6:	e7e7      	b.n	800a1a8 <__sflush_r+0xd4>
 800a1d8:	dfbffffe 	.word	0xdfbffffe

0800a1dc <_fflush_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	690b      	ldr	r3, [r1, #16]
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	b913      	cbnz	r3, 800a1ec <_fflush_r+0x10>
 800a1e6:	2500      	movs	r5, #0
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	b118      	cbz	r0, 800a1f6 <_fflush_r+0x1a>
 800a1ee:	6a03      	ldr	r3, [r0, #32]
 800a1f0:	b90b      	cbnz	r3, 800a1f6 <_fflush_r+0x1a>
 800a1f2:	f7fe fa07 	bl	8008604 <__sinit>
 800a1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0f3      	beq.n	800a1e6 <_fflush_r+0xa>
 800a1fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a200:	07d0      	lsls	r0, r2, #31
 800a202:	d404      	bmi.n	800a20e <_fflush_r+0x32>
 800a204:	0599      	lsls	r1, r3, #22
 800a206:	d402      	bmi.n	800a20e <_fflush_r+0x32>
 800a208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a20a:	f7fe fc06 	bl	8008a1a <__retarget_lock_acquire_recursive>
 800a20e:	4628      	mov	r0, r5
 800a210:	4621      	mov	r1, r4
 800a212:	f7ff ff5f 	bl	800a0d4 <__sflush_r>
 800a216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a218:	07da      	lsls	r2, r3, #31
 800a21a:	4605      	mov	r5, r0
 800a21c:	d4e4      	bmi.n	800a1e8 <_fflush_r+0xc>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	059b      	lsls	r3, r3, #22
 800a222:	d4e1      	bmi.n	800a1e8 <_fflush_r+0xc>
 800a224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a226:	f7fe fbf9 	bl	8008a1c <__retarget_lock_release_recursive>
 800a22a:	e7dd      	b.n	800a1e8 <_fflush_r+0xc>

0800a22c <__swhatbuf_r>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	460c      	mov	r4, r1
 800a230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a234:	2900      	cmp	r1, #0
 800a236:	b096      	sub	sp, #88	@ 0x58
 800a238:	4615      	mov	r5, r2
 800a23a:	461e      	mov	r6, r3
 800a23c:	da0d      	bge.n	800a25a <__swhatbuf_r+0x2e>
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a244:	f04f 0100 	mov.w	r1, #0
 800a248:	bf14      	ite	ne
 800a24a:	2340      	movne	r3, #64	@ 0x40
 800a24c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a250:	2000      	movs	r0, #0
 800a252:	6031      	str	r1, [r6, #0]
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	b016      	add	sp, #88	@ 0x58
 800a258:	bd70      	pop	{r4, r5, r6, pc}
 800a25a:	466a      	mov	r2, sp
 800a25c:	f000 f848 	bl	800a2f0 <_fstat_r>
 800a260:	2800      	cmp	r0, #0
 800a262:	dbec      	blt.n	800a23e <__swhatbuf_r+0x12>
 800a264:	9901      	ldr	r1, [sp, #4]
 800a266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a26a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a26e:	4259      	negs	r1, r3
 800a270:	4159      	adcs	r1, r3
 800a272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a276:	e7eb      	b.n	800a250 <__swhatbuf_r+0x24>

0800a278 <__smakebuf_r>:
 800a278:	898b      	ldrh	r3, [r1, #12]
 800a27a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a27c:	079d      	lsls	r5, r3, #30
 800a27e:	4606      	mov	r6, r0
 800a280:	460c      	mov	r4, r1
 800a282:	d507      	bpl.n	800a294 <__smakebuf_r+0x1c>
 800a284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	2301      	movs	r3, #1
 800a28e:	6163      	str	r3, [r4, #20]
 800a290:	b003      	add	sp, #12
 800a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a294:	ab01      	add	r3, sp, #4
 800a296:	466a      	mov	r2, sp
 800a298:	f7ff ffc8 	bl	800a22c <__swhatbuf_r>
 800a29c:	9f00      	ldr	r7, [sp, #0]
 800a29e:	4605      	mov	r5, r0
 800a2a0:	4639      	mov	r1, r7
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f7fd fc3e 	bl	8007b24 <_malloc_r>
 800a2a8:	b948      	cbnz	r0, 800a2be <__smakebuf_r+0x46>
 800a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ae:	059a      	lsls	r2, r3, #22
 800a2b0:	d4ee      	bmi.n	800a290 <__smakebuf_r+0x18>
 800a2b2:	f023 0303 	bic.w	r3, r3, #3
 800a2b6:	f043 0302 	orr.w	r3, r3, #2
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	e7e2      	b.n	800a284 <__smakebuf_r+0xc>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	6020      	str	r0, [r4, #0]
 800a2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	9b01      	ldr	r3, [sp, #4]
 800a2ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2ce:	b15b      	cbz	r3, 800a2e8 <__smakebuf_r+0x70>
 800a2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f000 f81d 	bl	800a314 <_isatty_r>
 800a2da:	b128      	cbz	r0, 800a2e8 <__smakebuf_r+0x70>
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	431d      	orrs	r5, r3
 800a2ec:	81a5      	strh	r5, [r4, #12]
 800a2ee:	e7cf      	b.n	800a290 <__smakebuf_r+0x18>

0800a2f0 <_fstat_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d07      	ldr	r5, [pc, #28]	@ (800a310 <_fstat_r+0x20>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	602b      	str	r3, [r5, #0]
 800a2fe:	f7f7 fbfb 	bl	8001af8 <_fstat>
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	d102      	bne.n	800a30c <_fstat_r+0x1c>
 800a306:	682b      	ldr	r3, [r5, #0]
 800a308:	b103      	cbz	r3, 800a30c <_fstat_r+0x1c>
 800a30a:	6023      	str	r3, [r4, #0]
 800a30c:	bd38      	pop	{r3, r4, r5, pc}
 800a30e:	bf00      	nop
 800a310:	20000738 	.word	0x20000738

0800a314 <_isatty_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d06      	ldr	r5, [pc, #24]	@ (800a330 <_isatty_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f7 fbfa 	bl	8001b18 <_isatty>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_isatty_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_isatty_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000738 	.word	0x20000738

0800a334 <memcpy>:
 800a334:	440a      	add	r2, r1
 800a336:	4291      	cmp	r1, r2
 800a338:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a33c:	d100      	bne.n	800a340 <memcpy+0xc>
 800a33e:	4770      	bx	lr
 800a340:	b510      	push	{r4, lr}
 800a342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a34a:	4291      	cmp	r1, r2
 800a34c:	d1f9      	bne.n	800a342 <memcpy+0xe>
 800a34e:	bd10      	pop	{r4, pc}

0800a350 <__assert_func>:
 800a350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a352:	4614      	mov	r4, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4b09      	ldr	r3, [pc, #36]	@ (800a37c <__assert_func+0x2c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4605      	mov	r5, r0
 800a35c:	68d8      	ldr	r0, [r3, #12]
 800a35e:	b954      	cbnz	r4, 800a376 <__assert_func+0x26>
 800a360:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <__assert_func+0x30>)
 800a362:	461c      	mov	r4, r3
 800a364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a368:	9100      	str	r1, [sp, #0]
 800a36a:	462b      	mov	r3, r5
 800a36c:	4905      	ldr	r1, [pc, #20]	@ (800a384 <__assert_func+0x34>)
 800a36e:	f000 f841 	bl	800a3f4 <fiprintf>
 800a372:	f000 f851 	bl	800a418 <abort>
 800a376:	4b04      	ldr	r3, [pc, #16]	@ (800a388 <__assert_func+0x38>)
 800a378:	e7f4      	b.n	800a364 <__assert_func+0x14>
 800a37a:	bf00      	nop
 800a37c:	20000018 	.word	0x20000018
 800a380:	0800aade 	.word	0x0800aade
 800a384:	0800aab0 	.word	0x0800aab0
 800a388:	0800aaa3 	.word	0x0800aaa3

0800a38c <_calloc_r>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	fba1 5402 	umull	r5, r4, r1, r2
 800a392:	b93c      	cbnz	r4, 800a3a4 <_calloc_r+0x18>
 800a394:	4629      	mov	r1, r5
 800a396:	f7fd fbc5 	bl	8007b24 <_malloc_r>
 800a39a:	4606      	mov	r6, r0
 800a39c:	b928      	cbnz	r0, 800a3aa <_calloc_r+0x1e>
 800a39e:	2600      	movs	r6, #0
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}
 800a3a4:	220c      	movs	r2, #12
 800a3a6:	6002      	str	r2, [r0, #0]
 800a3a8:	e7f9      	b.n	800a39e <_calloc_r+0x12>
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	f7fe faa7 	bl	8008900 <memset>
 800a3b2:	e7f5      	b.n	800a3a0 <_calloc_r+0x14>

0800a3b4 <__ascii_mbtowc>:
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	b901      	cbnz	r1, 800a3ba <__ascii_mbtowc+0x6>
 800a3b8:	a901      	add	r1, sp, #4
 800a3ba:	b142      	cbz	r2, 800a3ce <__ascii_mbtowc+0x1a>
 800a3bc:	b14b      	cbz	r3, 800a3d2 <__ascii_mbtowc+0x1e>
 800a3be:	7813      	ldrb	r3, [r2, #0]
 800a3c0:	600b      	str	r3, [r1, #0]
 800a3c2:	7812      	ldrb	r2, [r2, #0]
 800a3c4:	1e10      	subs	r0, r2, #0
 800a3c6:	bf18      	it	ne
 800a3c8:	2001      	movne	r0, #1
 800a3ca:	b002      	add	sp, #8
 800a3cc:	4770      	bx	lr
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	e7fb      	b.n	800a3ca <__ascii_mbtowc+0x16>
 800a3d2:	f06f 0001 	mvn.w	r0, #1
 800a3d6:	e7f8      	b.n	800a3ca <__ascii_mbtowc+0x16>

0800a3d8 <__ascii_wctomb>:
 800a3d8:	4603      	mov	r3, r0
 800a3da:	4608      	mov	r0, r1
 800a3dc:	b141      	cbz	r1, 800a3f0 <__ascii_wctomb+0x18>
 800a3de:	2aff      	cmp	r2, #255	@ 0xff
 800a3e0:	d904      	bls.n	800a3ec <__ascii_wctomb+0x14>
 800a3e2:	228a      	movs	r2, #138	@ 0x8a
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3ea:	4770      	bx	lr
 800a3ec:	700a      	strb	r2, [r1, #0]
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <fiprintf>:
 800a3f4:	b40e      	push	{r1, r2, r3}
 800a3f6:	b503      	push	{r0, r1, lr}
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	ab03      	add	r3, sp, #12
 800a3fc:	4805      	ldr	r0, [pc, #20]	@ (800a414 <fiprintf+0x20>)
 800a3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a402:	6800      	ldr	r0, [r0, #0]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	f7ff fd4d 	bl	8009ea4 <_vfiprintf_r>
 800a40a:	b002      	add	sp, #8
 800a40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a410:	b003      	add	sp, #12
 800a412:	4770      	bx	lr
 800a414:	20000018 	.word	0x20000018

0800a418 <abort>:
 800a418:	b508      	push	{r3, lr}
 800a41a:	2006      	movs	r0, #6
 800a41c:	f000 f82c 	bl	800a478 <raise>
 800a420:	2001      	movs	r0, #1
 800a422:	f7f7 fb19 	bl	8001a58 <_exit>

0800a426 <_raise_r>:
 800a426:	291f      	cmp	r1, #31
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	460c      	mov	r4, r1
 800a42e:	d904      	bls.n	800a43a <_raise_r+0x14>
 800a430:	2316      	movs	r3, #22
 800a432:	6003      	str	r3, [r0, #0]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a438:	bd38      	pop	{r3, r4, r5, pc}
 800a43a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a43c:	b112      	cbz	r2, 800a444 <_raise_r+0x1e>
 800a43e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a442:	b94b      	cbnz	r3, 800a458 <_raise_r+0x32>
 800a444:	4628      	mov	r0, r5
 800a446:	f000 f831 	bl	800a4ac <_getpid_r>
 800a44a:	4622      	mov	r2, r4
 800a44c:	4601      	mov	r1, r0
 800a44e:	4628      	mov	r0, r5
 800a450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a454:	f000 b818 	b.w	800a488 <_kill_r>
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d00a      	beq.n	800a472 <_raise_r+0x4c>
 800a45c:	1c59      	adds	r1, r3, #1
 800a45e:	d103      	bne.n	800a468 <_raise_r+0x42>
 800a460:	2316      	movs	r3, #22
 800a462:	6003      	str	r3, [r0, #0]
 800a464:	2001      	movs	r0, #1
 800a466:	e7e7      	b.n	800a438 <_raise_r+0x12>
 800a468:	2100      	movs	r1, #0
 800a46a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a46e:	4620      	mov	r0, r4
 800a470:	4798      	blx	r3
 800a472:	2000      	movs	r0, #0
 800a474:	e7e0      	b.n	800a438 <_raise_r+0x12>
	...

0800a478 <raise>:
 800a478:	4b02      	ldr	r3, [pc, #8]	@ (800a484 <raise+0xc>)
 800a47a:	4601      	mov	r1, r0
 800a47c:	6818      	ldr	r0, [r3, #0]
 800a47e:	f7ff bfd2 	b.w	800a426 <_raise_r>
 800a482:	bf00      	nop
 800a484:	20000018 	.word	0x20000018

0800a488 <_kill_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d07      	ldr	r5, [pc, #28]	@ (800a4a8 <_kill_r+0x20>)
 800a48c:	2300      	movs	r3, #0
 800a48e:	4604      	mov	r4, r0
 800a490:	4608      	mov	r0, r1
 800a492:	4611      	mov	r1, r2
 800a494:	602b      	str	r3, [r5, #0]
 800a496:	f7f7 facf 	bl	8001a38 <_kill>
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	d102      	bne.n	800a4a4 <_kill_r+0x1c>
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	b103      	cbz	r3, 800a4a4 <_kill_r+0x1c>
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	bd38      	pop	{r3, r4, r5, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20000738 	.word	0x20000738

0800a4ac <_getpid_r>:
 800a4ac:	f7f7 babc 	b.w	8001a28 <_getpid>

0800a4b0 <atan2f>:
 800a4b0:	f000 b800 	b.w	800a4b4 <__ieee754_atan2f>

0800a4b4 <__ieee754_atan2f>:
 800a4b4:	ee10 2a90 	vmov	r2, s1
 800a4b8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a4bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	eef0 7a40 	vmov.f32	s15, s0
 800a4c6:	d806      	bhi.n	800a4d6 <__ieee754_atan2f+0x22>
 800a4c8:	ee10 0a10 	vmov	r0, s0
 800a4cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a4d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a4d4:	d904      	bls.n	800a4e0 <__ieee754_atan2f+0x2c>
 800a4d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a4da:	eeb0 0a67 	vmov.f32	s0, s15
 800a4de:	bd10      	pop	{r4, pc}
 800a4e0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a4e4:	d103      	bne.n	800a4ee <__ieee754_atan2f+0x3a>
 800a4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ea:	f000 b883 	b.w	800a5f4 <atanf>
 800a4ee:	1794      	asrs	r4, r2, #30
 800a4f0:	f004 0402 	and.w	r4, r4, #2
 800a4f4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a4f8:	b943      	cbnz	r3, 800a50c <__ieee754_atan2f+0x58>
 800a4fa:	2c02      	cmp	r4, #2
 800a4fc:	d05e      	beq.n	800a5bc <__ieee754_atan2f+0x108>
 800a4fe:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a5d0 <__ieee754_atan2f+0x11c>
 800a502:	2c03      	cmp	r4, #3
 800a504:	bf08      	it	eq
 800a506:	eef0 7a47 	vmoveq.f32	s15, s14
 800a50a:	e7e6      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a50c:	b941      	cbnz	r1, 800a520 <__ieee754_atan2f+0x6c>
 800a50e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800a5d4 <__ieee754_atan2f+0x120>
 800a512:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a5d8 <__ieee754_atan2f+0x124>
 800a516:	2800      	cmp	r0, #0
 800a518:	bfb8      	it	lt
 800a51a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a51e:	e7dc      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a520:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a524:	d110      	bne.n	800a548 <__ieee754_atan2f+0x94>
 800a526:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a52a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800a52e:	d107      	bne.n	800a540 <__ieee754_atan2f+0x8c>
 800a530:	2c02      	cmp	r4, #2
 800a532:	d846      	bhi.n	800a5c2 <__ieee754_atan2f+0x10e>
 800a534:	4b29      	ldr	r3, [pc, #164]	@ (800a5dc <__ieee754_atan2f+0x128>)
 800a536:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a53a:	edd3 7a00 	vldr	s15, [r3]
 800a53e:	e7cc      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a540:	2c02      	cmp	r4, #2
 800a542:	d841      	bhi.n	800a5c8 <__ieee754_atan2f+0x114>
 800a544:	4b26      	ldr	r3, [pc, #152]	@ (800a5e0 <__ieee754_atan2f+0x12c>)
 800a546:	e7f6      	b.n	800a536 <__ieee754_atan2f+0x82>
 800a548:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a54c:	d0df      	beq.n	800a50e <__ieee754_atan2f+0x5a>
 800a54e:	1a5b      	subs	r3, r3, r1
 800a550:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800a554:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a558:	da1a      	bge.n	800a590 <__ieee754_atan2f+0xdc>
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	da01      	bge.n	800a562 <__ieee754_atan2f+0xae>
 800a55e:	313c      	adds	r1, #60	@ 0x3c
 800a560:	db19      	blt.n	800a596 <__ieee754_atan2f+0xe2>
 800a562:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a566:	f000 f919 	bl	800a79c <fabsf>
 800a56a:	f000 f843 	bl	800a5f4 <atanf>
 800a56e:	eef0 7a40 	vmov.f32	s15, s0
 800a572:	2c01      	cmp	r4, #1
 800a574:	d012      	beq.n	800a59c <__ieee754_atan2f+0xe8>
 800a576:	2c02      	cmp	r4, #2
 800a578:	d017      	beq.n	800a5aa <__ieee754_atan2f+0xf6>
 800a57a:	2c00      	cmp	r4, #0
 800a57c:	d0ad      	beq.n	800a4da <__ieee754_atan2f+0x26>
 800a57e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a5e4 <__ieee754_atan2f+0x130>
 800a582:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a586:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a5e8 <__ieee754_atan2f+0x134>
 800a58a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a58e:	e7a4      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a590:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a5d4 <__ieee754_atan2f+0x120>
 800a594:	e7ed      	b.n	800a572 <__ieee754_atan2f+0xbe>
 800a596:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a5ec <__ieee754_atan2f+0x138>
 800a59a:	e7ea      	b.n	800a572 <__ieee754_atan2f+0xbe>
 800a59c:	ee17 3a90 	vmov	r3, s15
 800a5a0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a5a4:	ee07 3a90 	vmov	s15, r3
 800a5a8:	e797      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a5aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a5e4 <__ieee754_atan2f+0x130>
 800a5ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5b2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a5e8 <__ieee754_atan2f+0x134>
 800a5b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ba:	e78e      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a5bc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a5e8 <__ieee754_atan2f+0x134>
 800a5c0:	e78b      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a5c2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800a5f0 <__ieee754_atan2f+0x13c>
 800a5c6:	e788      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a5c8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a5ec <__ieee754_atan2f+0x138>
 800a5cc:	e785      	b.n	800a4da <__ieee754_atan2f+0x26>
 800a5ce:	bf00      	nop
 800a5d0:	c0490fdb 	.word	0xc0490fdb
 800a5d4:	3fc90fdb 	.word	0x3fc90fdb
 800a5d8:	bfc90fdb 	.word	0xbfc90fdb
 800a5dc:	0800abec 	.word	0x0800abec
 800a5e0:	0800abe0 	.word	0x0800abe0
 800a5e4:	33bbbd2e 	.word	0x33bbbd2e
 800a5e8:	40490fdb 	.word	0x40490fdb
 800a5ec:	00000000 	.word	0x00000000
 800a5f0:	3f490fdb 	.word	0x3f490fdb

0800a5f4 <atanf>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	ee10 5a10 	vmov	r5, s0
 800a5fa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a5fe:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a602:	eef0 7a40 	vmov.f32	s15, s0
 800a606:	d310      	bcc.n	800a62a <atanf+0x36>
 800a608:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a60c:	d904      	bls.n	800a618 <atanf+0x24>
 800a60e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a612:	eeb0 0a67 	vmov.f32	s0, s15
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800a750 <atanf+0x15c>
 800a61c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a754 <atanf+0x160>
 800a620:	2d00      	cmp	r5, #0
 800a622:	bfc8      	it	gt
 800a624:	eef0 7a47 	vmovgt.f32	s15, s14
 800a628:	e7f3      	b.n	800a612 <atanf+0x1e>
 800a62a:	4b4b      	ldr	r3, [pc, #300]	@ (800a758 <atanf+0x164>)
 800a62c:	429c      	cmp	r4, r3
 800a62e:	d810      	bhi.n	800a652 <atanf+0x5e>
 800a630:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a634:	d20a      	bcs.n	800a64c <atanf+0x58>
 800a636:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800a75c <atanf+0x168>
 800a63a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a63e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a642:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64a:	dce2      	bgt.n	800a612 <atanf+0x1e>
 800a64c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a650:	e013      	b.n	800a67a <atanf+0x86>
 800a652:	f000 f8a3 	bl	800a79c <fabsf>
 800a656:	4b42      	ldr	r3, [pc, #264]	@ (800a760 <atanf+0x16c>)
 800a658:	429c      	cmp	r4, r3
 800a65a:	d84f      	bhi.n	800a6fc <atanf+0x108>
 800a65c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a660:	429c      	cmp	r4, r3
 800a662:	d841      	bhi.n	800a6e8 <atanf+0xf4>
 800a664:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a668:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a66c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a670:	2300      	movs	r3, #0
 800a672:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a676:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a680:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a764 <atanf+0x170>
 800a684:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800a768 <atanf+0x174>
 800a688:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800a76c <atanf+0x178>
 800a68c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a690:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a694:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800a770 <atanf+0x17c>
 800a698:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a69c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a774 <atanf+0x180>
 800a6a0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a6a4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a778 <atanf+0x184>
 800a6a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a6ac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a77c <atanf+0x188>
 800a6b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a6b4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a780 <atanf+0x18c>
 800a6b8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a6bc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a784 <atanf+0x190>
 800a6c0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a6c4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a788 <atanf+0x194>
 800a6c8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a6cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a78c <atanf+0x198>
 800a6d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a6d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a6d8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a6dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a6e0:	d121      	bne.n	800a726 <atanf+0x132>
 800a6e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6e6:	e794      	b.n	800a612 <atanf+0x1e>
 800a6e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a6ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a6f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a6fa:	e7be      	b.n	800a67a <atanf+0x86>
 800a6fc:	4b24      	ldr	r3, [pc, #144]	@ (800a790 <atanf+0x19c>)
 800a6fe:	429c      	cmp	r4, r3
 800a700:	d80b      	bhi.n	800a71a <atanf+0x126>
 800a702:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a70a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a70e:	2302      	movs	r3, #2
 800a710:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a718:	e7af      	b.n	800a67a <atanf+0x86>
 800a71a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a71e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a722:	2303      	movs	r3, #3
 800a724:	e7a9      	b.n	800a67a <atanf+0x86>
 800a726:	4a1b      	ldr	r2, [pc, #108]	@ (800a794 <atanf+0x1a0>)
 800a728:	491b      	ldr	r1, [pc, #108]	@ (800a798 <atanf+0x1a4>)
 800a72a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a72e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a732:	edd3 6a00 	vldr	s13, [r3]
 800a736:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a740:	edd2 7a00 	vldr	s15, [r2]
 800a744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a748:	bfb8      	it	lt
 800a74a:	eef1 7a67 	vneglt.f32	s15, s15
 800a74e:	e760      	b.n	800a612 <atanf+0x1e>
 800a750:	bfc90fdb 	.word	0xbfc90fdb
 800a754:	3fc90fdb 	.word	0x3fc90fdb
 800a758:	3edfffff 	.word	0x3edfffff
 800a75c:	7149f2ca 	.word	0x7149f2ca
 800a760:	3f97ffff 	.word	0x3f97ffff
 800a764:	3c8569d7 	.word	0x3c8569d7
 800a768:	3d4bda59 	.word	0x3d4bda59
 800a76c:	bd6ef16b 	.word	0xbd6ef16b
 800a770:	3d886b35 	.word	0x3d886b35
 800a774:	3dba2e6e 	.word	0x3dba2e6e
 800a778:	3e124925 	.word	0x3e124925
 800a77c:	3eaaaaab 	.word	0x3eaaaaab
 800a780:	bd15a221 	.word	0xbd15a221
 800a784:	bd9d8795 	.word	0xbd9d8795
 800a788:	bde38e38 	.word	0xbde38e38
 800a78c:	be4ccccd 	.word	0xbe4ccccd
 800a790:	401bffff 	.word	0x401bffff
 800a794:	0800ac08 	.word	0x0800ac08
 800a798:	0800abf8 	.word	0x0800abf8

0800a79c <fabsf>:
 800a79c:	ee10 3a10 	vmov	r3, s0
 800a7a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7a4:	ee00 3a10 	vmov	s0, r3
 800a7a8:	4770      	bx	lr
	...

0800a7ac <_init>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	bf00      	nop
 800a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	469e      	mov	lr, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <_fini>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	bf00      	nop
 800a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7be:	bc08      	pop	{r3}
 800a7c0:	469e      	mov	lr, r3
 800a7c2:	4770      	bx	lr
